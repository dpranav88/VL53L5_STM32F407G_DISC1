
VL53L5_DISC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063dc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000158bc  0800656c  0800656c  0000756c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801be28  0801be28  0001d068  2**0
                  CONTENTS
  4 .ARM          00000008  0801be28  0801be28  0001ce28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801be30  0801be30  0001d068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801be30  0801be30  0001ce30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801be34  0801be34  0001ce34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0801be38  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001d068  2**0
                  CONTENTS
 10 .bss          00001218  20000068  20000068  0001d068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001280  20001280  0001d068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001d068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c2c1  00000000  00000000  0001d098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cf3  00000000  00000000  00029359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b30  00000000  00000000  0002b050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008b7  00000000  00000000  0002bb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021c83  00000000  00000000  0002c437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ec28  00000000  00000000  0004e0ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8392  00000000  00000000  0005cce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00125074  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003684  00000000  00000000  001250b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0012873c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006554 	.word	0x08006554

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006554 	.word	0x08006554

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	b29a      	uxth	r2, r3
 8000570:	f04f 33ff 	mov.w	r3, #4294967295
 8000574:	68b9      	ldr	r1, [r7, #8]
 8000576:	4804      	ldr	r0, [pc, #16]	@ (8000588 <_write+0x28>)
 8000578:	f002 fe22 	bl	80031c0 <HAL_UART_Transmit>
    return len;
 800057c:	687b      	ldr	r3, [r7, #4]
}
 800057e:	4618      	mov	r0, r3
 8000580:	3710      	adds	r7, #16
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	200000d8 	.word	0x200000d8

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f000 fc72 	bl	8000e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f854 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 f914 	bl	80007c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800059c:	f000 f8ba 	bl	8000714 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80005a0:	f000 f8e6 	bl	8000770 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	Dev.platform.address = VL53L5CX_DEFAULT_I2C_ADDRESS;
 80005a4:	4b20      	ldr	r3, [pc, #128]	@ (8000628 <main+0x9c>)
 80005a6:	2252      	movs	r2, #82	@ 0x52
 80005a8:	801a      	strh	r2, [r3, #0]
//	HAL_GPIO_WritePin(LPn_C_GPIO_Port, LPn_C_Pin, GPIO_PIN_RESET);
//	HAL_Delay(200);
//	HAL_GPIO_WritePin(PWR_EN_C_GPIO_Port, PWR_EN_C_Pin, GPIO_PIN_SET);
//	HAL_Delay(100);
//	HAL_GPIO_WritePin(LPn_C_GPIO_Port, LPn_C_Pin, GPIO_PIN_SET);
	status = vl53l5cx_is_alive(&Dev, &isAlive);
 80005aa:	4920      	ldr	r1, [pc, #128]	@ (800062c <main+0xa0>)
 80005ac:	481e      	ldr	r0, [pc, #120]	@ (8000628 <main+0x9c>)
 80005ae:	f003 fd6d 	bl	800408c <vl53l5cx_is_alive>
 80005b2:	4603      	mov	r3, r0
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000630 <main+0xa4>)
 80005b8:	601a      	str	r2, [r3, #0]
	if(!isAlive)
 80005ba:	4b1c      	ldr	r3, [pc, #112]	@ (800062c <main+0xa0>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d107      	bne.n	80005d2 <main+0x46>
	{
		printf("VL53L5CXV0 not detected at requested address (0x%x)\n", Dev.platform.address);
 80005c2:	4b19      	ldr	r3, [pc, #100]	@ (8000628 <main+0x9c>)
 80005c4:	881b      	ldrh	r3, [r3, #0]
 80005c6:	4619      	mov	r1, r3
 80005c8:	481a      	ldr	r0, [pc, #104]	@ (8000634 <main+0xa8>)
 80005ca:	f005 f8ad 	bl	8005728 <iprintf>
		return 255;
 80005ce:	23ff      	movs	r3, #255	@ 0xff
 80005d0:	e027      	b.n	8000622 <main+0x96>
	}
	printf("Sensor initializing, please wait few seconds\n");
 80005d2:	4819      	ldr	r0, [pc, #100]	@ (8000638 <main+0xac>)
 80005d4:	f005 f918 	bl	8005808 <puts>
	status = vl53l5cx_init(&Dev);
 80005d8:	4813      	ldr	r0, [pc, #76]	@ (8000628 <main+0x9c>)
 80005da:	f003 fda1 	bl	8004120 <vl53l5cx_init>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b13      	ldr	r3, [pc, #76]	@ (8000630 <main+0xa4>)
 80005e4:	601a      	str	r2, [r3, #0]
	status = vl53l5cx_set_ranging_frequency_hz(&Dev, 2);				// Set 2Hz ranging frequency
 80005e6:	2102      	movs	r1, #2
 80005e8:	480f      	ldr	r0, [pc, #60]	@ (8000628 <main+0x9c>)
 80005ea:	f004 fe0e 	bl	800520a <vl53l5cx_set_ranging_frequency_hz>
 80005ee:	4603      	mov	r3, r0
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000630 <main+0xa4>)
 80005f4:	601a      	str	r2, [r3, #0]
	status = vl53l5cx_set_ranging_mode(&Dev, VL53L5CX_RANGING_MODE_CONTINUOUS);  // Set mode continuous
 80005f6:	2101      	movs	r1, #1
 80005f8:	480b      	ldr	r0, [pc, #44]	@ (8000628 <main+0x9c>)
 80005fa:	f004 fe27 	bl	800524c <vl53l5cx_set_ranging_mode>
 80005fe:	4603      	mov	r3, r0
 8000600:	461a      	mov	r2, r3
 8000602:	4b0b      	ldr	r3, [pc, #44]	@ (8000630 <main+0xa4>)
 8000604:	601a      	str	r2, [r3, #0]

	printf("Ranging starts\n");
 8000606:	480d      	ldr	r0, [pc, #52]	@ (800063c <main+0xb0>)
 8000608:	f005 f8fe 	bl	8005808 <puts>
	status = vl53l5cx_start_ranging(&Dev);
 800060c:	4806      	ldr	r0, [pc, #24]	@ (8000628 <main+0x9c>)
 800060e:	f004 f9f3 	bl	80049f8 <vl53l5cx_start_ranging>
 8000612:	4603      	mov	r3, r0
 8000614:	461a      	mov	r2, r3
 8000616:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <main+0xa4>)
 8000618:	601a      	str	r2, [r3, #0]

	if (is_interrupt) {
		get_data_by_interrupt(&Dev);
	}
	else {
		get_data_by_polling(&Dev);
 800061a:	4803      	ldr	r0, [pc, #12]	@ (8000628 <main+0x9c>)
 800061c:	f000 f916 	bl	800084c <get_data_by_polling>
 8000620:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 8000622:	4618      	mov	r0, r3
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000128 	.word	0x20000128
 800062c:	20001129 	.word	0x20001129
 8000630:	20000120 	.word	0x20000120
 8000634:	0800656c 	.word	0x0800656c
 8000638:	080065a4 	.word	0x080065a4
 800063c:	080065d4 	.word	0x080065d4

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	@ 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2230      	movs	r2, #48	@ 0x30
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f005 f9ba 	bl	80059c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	4b28      	ldr	r3, [pc, #160]	@ (800070c <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	4a27      	ldr	r2, [pc, #156]	@ (800070c <SystemClock_Config+0xcc>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	@ 0x40
 8000674:	4b25      	ldr	r3, [pc, #148]	@ (800070c <SystemClock_Config+0xcc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b22      	ldr	r3, [pc, #136]	@ (8000710 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a21      	ldr	r2, [pc, #132]	@ (8000710 <SystemClock_Config+0xd0>)
 800068a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b1f      	ldr	r3, [pc, #124]	@ (8000710 <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	2302      	movs	r3, #2
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a4:	2310      	movs	r3, #16
 80006a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a8:	2302      	movs	r3, #2
 80006aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ac:	2300      	movs	r3, #0
 80006ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b0:	2308      	movs	r3, #8
 80006b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006b4:	2332      	movs	r3, #50	@ 0x32
 80006b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006bc:	2307      	movs	r3, #7
 80006be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 f893 	bl	80027f0 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d0:	f000 f930 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2302      	movs	r3, #2
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80006e0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80006e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2101      	movs	r1, #1
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 faf4 	bl	8002ce0 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006fe:	f000 f919 	bl	8000934 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	@ 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000718:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <MX_I2C1_Init+0x50>)
 800071a:	4a13      	ldr	r2, [pc, #76]	@ (8000768 <MX_I2C1_Init+0x54>)
 800071c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800071e:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <MX_I2C1_Init+0x50>)
 8000720:	4a12      	ldr	r2, [pc, #72]	@ (800076c <MX_I2C1_Init+0x58>)
 8000722:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000724:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <MX_I2C1_Init+0x50>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800072a:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <MX_I2C1_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000730:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <MX_I2C1_Init+0x50>)
 8000732:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000736:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000738:	4b0a      	ldr	r3, [pc, #40]	@ (8000764 <MX_I2C1_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800073e:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <MX_I2C1_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000744:	4b07      	ldr	r3, [pc, #28]	@ (8000764 <MX_I2C1_Init+0x50>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074a:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <MX_I2C1_Init+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000750:	4804      	ldr	r0, [pc, #16]	@ (8000764 <MX_I2C1_Init+0x50>)
 8000752:	f000 fec3 	bl	80014dc <HAL_I2C_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800075c:	f000 f8ea 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000084 	.word	0x20000084
 8000768:	40005400 	.word	0x40005400
 800076c:	000186a0 	.word	0x000186a0

08000770 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000774:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_USART3_UART_Init+0x4c>)
 8000776:	4a12      	ldr	r2, [pc, #72]	@ (80007c0 <MX_USART3_UART_Init+0x50>)
 8000778:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800077a:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <MX_USART3_UART_Init+0x4c>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_USART3_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_USART3_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <MX_USART3_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_USART3_UART_Init+0x4c>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <MX_USART3_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_USART3_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	@ (80007bc <MX_USART3_UART_Init+0x4c>)
 80007a8:	f002 fcba 	bl	8003120 <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007b2:	f000 f8bf 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200000d8 	.word	0x200000d8
 80007c0:	40004800 	.word	0x40004800

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b088      	sub	sp, #32
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	4b19      	ldr	r3, [pc, #100]	@ (8000844 <MX_GPIO_Init+0x80>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a18      	ldr	r2, [pc, #96]	@ (8000844 <MX_GPIO_Init+0x80>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b16      	ldr	r3, [pc, #88]	@ (8000844 <MX_GPIO_Init+0x80>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <MX_GPIO_Init+0x80>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a11      	ldr	r2, [pc, #68]	@ (8000844 <MX_GPIO_Init+0x80>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_GPIO_Init+0x80>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0308 	and.w	r3, r3, #8
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000818:	480b      	ldr	r0, [pc, #44]	@ (8000848 <MX_GPIO_Init+0x84>)
 800081a:	f000 fe45 	bl	80014a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800081e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000822:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	4619      	mov	r1, r3
 8000836:	4804      	ldr	r0, [pc, #16]	@ (8000848 <MX_GPIO_Init+0x84>)
 8000838:	f000 fc9a 	bl	8001170 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800083c:	bf00      	nop
 800083e:	3720      	adds	r7, #32
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40023800 	.word	0x40023800
 8000848:	40020c00 	.word	0x40020c00

0800084c <get_data_by_polling>:
		}
	}while(1);
}


void get_data_by_polling(VL53L5CX_Configuration *p_dev){
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	do
	{
		status = vl53l5cx_check_data_ready(&Dev, &p_data_ready);
 8000854:	492f      	ldr	r1, [pc, #188]	@ (8000914 <get_data_by_polling+0xc8>)
 8000856:	4830      	ldr	r0, [pc, #192]	@ (8000918 <get_data_by_polling+0xcc>)
 8000858:	f004 fa48 	bl	8004cec <vl53l5cx_check_data_ready>
 800085c:	4603      	mov	r3, r0
 800085e:	461a      	mov	r2, r3
 8000860:	4b2e      	ldr	r3, [pc, #184]	@ (800091c <get_data_by_polling+0xd0>)
 8000862:	601a      	str	r2, [r3, #0]
		if(p_data_ready){
 8000864:	4b2b      	ldr	r3, [pc, #172]	@ (8000914 <get_data_by_polling+0xc8>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d04e      	beq.n	800090a <get_data_by_polling+0xbe>
			status = vl53l5cx_get_resolution(p_dev, &resolution);
 800086c:	492c      	ldr	r1, [pc, #176]	@ (8000920 <get_data_by_polling+0xd4>)
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f004 fca6 	bl	80051c0 <vl53l5cx_get_resolution>
 8000874:	4603      	mov	r3, r0
 8000876:	461a      	mov	r2, r3
 8000878:	4b28      	ldr	r3, [pc, #160]	@ (800091c <get_data_by_polling+0xd0>)
 800087a:	601a      	str	r2, [r3, #0]
			status = vl53l5cx_get_ranging_data(p_dev, &Results);
 800087c:	4929      	ldr	r1, [pc, #164]	@ (8000924 <get_data_by_polling+0xd8>)
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f004 fa84 	bl	8004d8c <vl53l5cx_get_ranging_data>
 8000884:	4603      	mov	r3, r0
 8000886:	461a      	mov	r2, r3
 8000888:	4b24      	ldr	r3, [pc, #144]	@ (800091c <get_data_by_polling+0xd0>)
 800088a:	601a      	str	r2, [r3, #0]

			for(int i = 0; i < resolution;i++){
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	e031      	b.n	80008f6 <get_data_by_polling+0xaa>
				/* Print per zone results */
				printf("Zone : %2d, Nb targets : %2u, Ambient : %4lu Kcps/spads, ",
						i,
						Results.nb_target_detected[i],
 8000892:	4a24      	ldr	r2, [pc, #144]	@ (8000924 <get_data_by_polling+0xd8>)
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	4413      	add	r3, r2
 8000898:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800089c:	781b      	ldrb	r3, [r3, #0]
				printf("Zone : %2d, Nb targets : %2u, Ambient : %4lu Kcps/spads, ",
 800089e:	4619      	mov	r1, r3
 80008a0:	4a20      	ldr	r2, [pc, #128]	@ (8000924 <get_data_by_polling+0xd8>)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	4413      	add	r3, r2
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	460a      	mov	r2, r1
 80008ac:	68f9      	ldr	r1, [r7, #12]
 80008ae:	481e      	ldr	r0, [pc, #120]	@ (8000928 <get_data_by_polling+0xdc>)
 80008b0:	f004 ff3a 	bl	8005728 <iprintf>
						Results.ambient_per_spad[i]);

				/* Print per target results */
				if(Results.nb_target_detected[i] > 0){
 80008b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000924 <get_data_by_polling+0xd8>)
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	4413      	add	r3, r2
 80008ba:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d012      	beq.n	80008ea <get_data_by_polling+0x9e>
					printf("Target status : %3u, Distance : %4d mm\n",
							Results.target_status[VL53L5CX_NB_TARGET_PER_ZONE * i],
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	4a17      	ldr	r2, [pc, #92]	@ (8000924 <get_data_by_polling+0xd8>)
 80008c8:	4413      	add	r3, r2
 80008ca:	f893 3484 	ldrb.w	r3, [r3, #1156]	@ 0x484
					printf("Target status : %3u, Distance : %4d mm\n",
 80008ce:	4619      	mov	r1, r3
							Results.distance_mm[VL53L5CX_NB_TARGET_PER_ZONE * i]);
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	4a14      	ldr	r2, [pc, #80]	@ (8000924 <get_data_by_polling+0xd8>)
 80008d4:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	4413      	add	r3, r2
 80008dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
					printf("Target status : %3u, Distance : %4d mm\n",
 80008e0:	461a      	mov	r2, r3
 80008e2:	4812      	ldr	r0, [pc, #72]	@ (800092c <get_data_by_polling+0xe0>)
 80008e4:	f004 ff20 	bl	8005728 <iprintf>
 80008e8:	e002      	b.n	80008f0 <get_data_by_polling+0xa4>
				}else{
					printf("Target status : 255, Distance : No target\n");
 80008ea:	4811      	ldr	r0, [pc, #68]	@ (8000930 <get_data_by_polling+0xe4>)
 80008ec:	f004 ff8c 	bl	8005808 <puts>
			for(int i = 0; i < resolution;i++){
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	3301      	adds	r3, #1
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000920 <get_data_by_polling+0xd4>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	461a      	mov	r2, r3
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	4293      	cmp	r3, r2
 8000900:	dbc7      	blt.n	8000892 <get_data_by_polling+0x46>
				}
			}
			printf("\n");
 8000902:	200a      	movs	r0, #10
 8000904:	f004 ff22 	bl	800574c <putchar>
 8000908:	e7a4      	b.n	8000854 <get_data_by_polling+0x8>
		}else{
			HAL_Delay(5);
 800090a:	2005      	movs	r0, #5
 800090c:	f000 fb26 	bl	8000f5c <HAL_Delay>
		status = vl53l5cx_check_data_ready(&Dev, &p_data_ready);
 8000910:	e7a0      	b.n	8000854 <get_data_by_polling+0x8>
 8000912:	bf00      	nop
 8000914:	20000124 	.word	0x20000124
 8000918:	20000128 	.word	0x20000128
 800091c:	20000120 	.word	0x20000120
 8000920:	20001128 	.word	0x20001128
 8000924:	20000bd8 	.word	0x20000bd8
 8000928:	080065e4 	.word	0x080065e4
 800092c:	08006620 	.word	0x08006620
 8000930:	08006648 	.word	0x08006648

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <Error_Handler+0x8>

08000940 <VL53L5CX_RdByte>:

uint8_t VL53L5CX_RdByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af02      	add	r7, sp, #8
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	460b      	mov	r3, r1
 800094a:	607a      	str	r2, [r7, #4]
 800094c:	817b      	strh	r3, [r7, #10]
	uint8_t status = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	75fb      	strb	r3, [r7, #23]
	uint8_t data_write[2];
	uint8_t data_read[1];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8000952:	897b      	ldrh	r3, [r7, #10]
 8000954:	0a1b      	lsrs	r3, r3, #8
 8000956:	b29b      	uxth	r3, r3
 8000958:	b2db      	uxtb	r3, r3
 800095a:	753b      	strb	r3, [r7, #20]
	data_write[1] = RegisterAdress & 0xFF;
 800095c:	897b      	ldrh	r3, [r7, #10]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	757b      	strb	r3, [r7, #21]
	status = HAL_I2C_Master_Transmit(&hi2c1, p_platform->address, data_write, 2, 100);
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	8819      	ldrh	r1, [r3, #0]
 8000966:	f107 0214 	add.w	r2, r7, #20
 800096a:	2364      	movs	r3, #100	@ 0x64
 800096c:	9300      	str	r3, [sp, #0]
 800096e:	2302      	movs	r3, #2
 8000970:	480c      	ldr	r0, [pc, #48]	@ (80009a4 <VL53L5CX_RdByte+0x64>)
 8000972:	f000 fef7 	bl	8001764 <HAL_I2C_Master_Transmit>
 8000976:	4603      	mov	r3, r0
 8000978:	75fb      	strb	r3, [r7, #23]
	status = HAL_I2C_Master_Receive(&hi2c1, p_platform->address, data_read, 1, 100);
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	8819      	ldrh	r1, [r3, #0]
 800097e:	f107 0210 	add.w	r2, r7, #16
 8000982:	2364      	movs	r3, #100	@ 0x64
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	2301      	movs	r3, #1
 8000988:	4806      	ldr	r0, [pc, #24]	@ (80009a4 <VL53L5CX_RdByte+0x64>)
 800098a:	f000 ffe9 	bl	8001960 <HAL_I2C_Master_Receive>
 800098e:	4603      	mov	r3, r0
 8000990:	75fb      	strb	r3, [r7, #23]
	*p_value = data_read[0];
 8000992:	7c3a      	ldrb	r2, [r7, #16]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	701a      	strb	r2, [r3, #0]
  
	return status;
 8000998:	7dfb      	ldrb	r3, [r7, #23]
}
 800099a:	4618      	mov	r0, r3
 800099c:	3718      	adds	r7, #24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000084 	.word	0x20000084

080009a8 <VL53L5CX_WrByte>:

uint8_t VL53L5CX_WrByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af02      	add	r7, sp, #8
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	460b      	mov	r3, r1
 80009b2:	807b      	strh	r3, [r7, #2]
 80009b4:	4613      	mov	r3, r2
 80009b6:	707b      	strb	r3, [r7, #1]
	uint8_t data_write[3];
	uint8_t status = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 80009bc:	887b      	ldrh	r3, [r7, #2]
 80009be:	0a1b      	lsrs	r3, r3, #8
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 80009c6:	887b      	ldrh	r3, [r7, #2]
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	737b      	strb	r3, [r7, #13]
	data_write[2] = value & 0xFF;
 80009cc:	787b      	ldrb	r3, [r7, #1]
 80009ce:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Master_Transmit(&hi2c1,p_platform->address, data_write, 3, 100);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	8819      	ldrh	r1, [r3, #0]
 80009d4:	f107 020c 	add.w	r2, r7, #12
 80009d8:	2364      	movs	r3, #100	@ 0x64
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	2303      	movs	r3, #3
 80009de:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <VL53L5CX_WrByte+0x4c>)
 80009e0:	f000 fec0 	bl	8001764 <HAL_I2C_Master_Transmit>
 80009e4:	4603      	mov	r3, r0
 80009e6:	73fb      	strb	r3, [r7, #15]

	return status;
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000084 	.word	0x20000084

080009f8 <VL53L5CX_WrMulti>:
uint8_t VL53L5CX_WrMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	@ 0x28
 80009fc:	af04      	add	r7, sp, #16
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	607a      	str	r2, [r7, #4]
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	460b      	mov	r3, r1
 8000a06:	817b      	strh	r3, [r7, #10]
	uint8_t status = HAL_I2C_Mem_Write(&hi2c1, p_platform->address, RegisterAdress,
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	8819      	ldrh	r1, [r3, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	897a      	ldrh	r2, [r7, #10]
 8000a12:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000a16:	9002      	str	r0, [sp, #8]
 8000a18:	9301      	str	r3, [sp, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	2310      	movs	r3, #16
 8000a20:	4804      	ldr	r0, [pc, #16]	@ (8000a34 <VL53L5CX_WrMulti+0x3c>)
 8000a22:	f001 f9cf 	bl	8001dc4 <HAL_I2C_Mem_Write>
 8000a26:	4603      	mov	r3, r0
 8000a28:	75fb      	strb	r3, [r7, #23]
									I2C_MEMADD_SIZE_16BIT, p_values, size, 65535);
	return status;
 8000a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000084 	.word	0x20000084

08000a38 <VL53L5CX_RdMulti>:
uint8_t VL53L5CX_RdMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af02      	add	r7, sp, #8
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	607a      	str	r2, [r7, #4]
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	460b      	mov	r3, r1
 8000a46:	817b      	strh	r3, [r7, #10]
	uint8_t status;
	uint8_t data_write[2];
	data_write[0] = (RegisterAdress>>8) & 0xFF;
 8000a48:	897b      	ldrh	r3, [r7, #10]
 8000a4a:	0a1b      	lsrs	r3, r3, #8
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	753b      	strb	r3, [r7, #20]
	data_write[1] = RegisterAdress & 0xFF;
 8000a52:	897b      	ldrh	r3, [r7, #10]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	757b      	strb	r3, [r7, #21]
	status = HAL_I2C_Master_Transmit(&hi2c1, p_platform->address, data_write, 2, 100);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	8819      	ldrh	r1, [r3, #0]
 8000a5c:	f107 0214 	add.w	r2, r7, #20
 8000a60:	2364      	movs	r3, #100	@ 0x64
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	2302      	movs	r3, #2
 8000a66:	480c      	ldr	r0, [pc, #48]	@ (8000a98 <VL53L5CX_RdMulti+0x60>)
 8000a68:	f000 fe7c 	bl	8001764 <HAL_I2C_Master_Transmit>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	75fb      	strb	r3, [r7, #23]
	status += HAL_I2C_Master_Receive(&hi2c1, p_platform->address, p_values, size, 100);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	8819      	ldrh	r1, [r3, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	2264      	movs	r2, #100	@ 0x64
 8000a7a:	9200      	str	r2, [sp, #0]
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	4806      	ldr	r0, [pc, #24]	@ (8000a98 <VL53L5CX_RdMulti+0x60>)
 8000a80:	f000 ff6e 	bl	8001960 <HAL_I2C_Master_Receive>
 8000a84:	4603      	mov	r3, r0
 8000a86:	461a      	mov	r2, r3
 8000a88:	7dfb      	ldrb	r3, [r7, #23]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	75fb      	strb	r3, [r7, #23]

	return status;
 8000a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3718      	adds	r7, #24
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000084 	.word	0x20000084

08000a9c <VL53L5CX_SwapBuffer>:
}

void VL53L5CX_SwapBuffer(
		uint8_t 		*buffer,
		uint16_t 	 	 size)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	807b      	strh	r3, [r7, #2]
	uint32_t i, tmp;

	/* Example of possible implementation using <string.h> */
	for(i = 0; i < size; i = i + 4)
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	e021      	b.n	8000af2 <VL53L5CX_SwapBuffer+0x56>
	{
		tmp = (
		  buffer[i]<<24)
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	061a      	lsls	r2, r3, #24
		|(buffer[i+1]<<16)
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	3301      	adds	r3, #1
 8000abc:	6879      	ldr	r1, [r7, #4]
 8000abe:	440b      	add	r3, r1
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	041b      	lsls	r3, r3, #16
 8000ac4:	431a      	orrs	r2, r3
		|(buffer[i+2]<<8)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	3302      	adds	r3, #2
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	440b      	add	r3, r1
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	021b      	lsls	r3, r3, #8
 8000ad2:	4313      	orrs	r3, r2
		|(buffer[i+3]);
 8000ad4:	68fa      	ldr	r2, [r7, #12]
 8000ad6:	3203      	adds	r2, #3
 8000ad8:	6879      	ldr	r1, [r7, #4]
 8000ada:	440a      	add	r2, r1
 8000adc:	7812      	ldrb	r2, [r2, #0]
 8000ade:	4313      	orrs	r3, r2
		tmp = (
 8000ae0:	60bb      	str	r3, [r7, #8]

		memcpy(&(buffer[i]), &tmp, 4);
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	68ba      	ldr	r2, [r7, #8]
 8000aea:	601a      	str	r2, [r3, #0]
	for(i = 0; i < size; i = i + 4)
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	3304      	adds	r3, #4
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	887b      	ldrh	r3, [r7, #2]
 8000af4:	68fa      	ldr	r2, [r7, #12]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d3d9      	bcc.n	8000aae <VL53L5CX_SwapBuffer+0x12>
	}
}
 8000afa:	bf00      	nop
 8000afc:	bf00      	nop
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <VL53L5CX_WaitMs>:

uint8_t VL53L5CX_WaitMs(
		VL53L5CX_Platform *p_platform,
               uint32_t TimeMs)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
	HAL_Delay(TimeMs);
 8000b12:	6838      	ldr	r0, [r7, #0]
 8000b14:	f000 fa22 	bl	8000f5c <HAL_Delay>
	return 0;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	4b10      	ldr	r3, [pc, #64]	@ (8000b70 <HAL_MspInit+0x4c>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b32:	4a0f      	ldr	r2, [pc, #60]	@ (8000b70 <HAL_MspInit+0x4c>)
 8000b34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b70 <HAL_MspInit+0x4c>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <HAL_MspInit+0x4c>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4e:	4a08      	ldr	r2, [pc, #32]	@ (8000b70 <HAL_MspInit+0x4c>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b56:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <HAL_MspInit+0x4c>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b62:	2007      	movs	r0, #7
 8000b64:	f000 fad0 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40023800 	.word	0x40023800

08000b74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	@ 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a19      	ldr	r2, [pc, #100]	@ (8000bf8 <HAL_I2C_MspInit+0x84>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d12b      	bne.n	8000bee <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b18      	ldr	r3, [pc, #96]	@ (8000bfc <HAL_I2C_MspInit+0x88>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a17      	ldr	r2, [pc, #92]	@ (8000bfc <HAL_I2C_MspInit+0x88>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <HAL_I2C_MspInit+0x88>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bb2:	23c0      	movs	r3, #192	@ 0xc0
 8000bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb6:	2312      	movs	r3, #18
 8000bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	480c      	ldr	r0, [pc, #48]	@ (8000c00 <HAL_I2C_MspInit+0x8c>)
 8000bce:	f000 facf 	bl	8001170 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <HAL_I2C_MspInit+0x88>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bda:	4a08      	ldr	r2, [pc, #32]	@ (8000bfc <HAL_I2C_MspInit+0x88>)
 8000bdc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be2:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <HAL_I2C_MspInit+0x88>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	@ 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40005400 	.word	0x40005400
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020400 	.word	0x40020400

08000c04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	@ 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a19      	ldr	r2, [pc, #100]	@ (8000c88 <HAL_UART_MspInit+0x84>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d12c      	bne.n	8000c80 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	4b18      	ldr	r3, [pc, #96]	@ (8000c8c <HAL_UART_MspInit+0x88>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2e:	4a17      	ldr	r2, [pc, #92]	@ (8000c8c <HAL_UART_MspInit+0x88>)
 8000c30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c36:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <HAL_UART_MspInit+0x88>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <HAL_UART_MspInit+0x88>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	4a10      	ldr	r2, [pc, #64]	@ (8000c8c <HAL_UART_MspInit+0x88>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c52:	4b0e      	ldr	r3, [pc, #56]	@ (8000c8c <HAL_UART_MspInit+0x88>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c5e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c70:	2307      	movs	r3, #7
 8000c72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4805      	ldr	r0, [pc, #20]	@ (8000c90 <HAL_UART_MspInit+0x8c>)
 8000c7c:	f000 fa78 	bl	8001170 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000c80:	bf00      	nop
 8000c82:	3728      	adds	r7, #40	@ 0x28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40004800 	.word	0x40004800
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020400 	.word	0x40020400

08000c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <NMI_Handler+0x4>

08000c9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <HardFault_Handler+0x4>

08000ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <MemManage_Handler+0x4>

08000cac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <BusFault_Handler+0x4>

08000cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <UsageFault_Handler+0x4>

08000cbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cea:	f000 f917 	bl	8000f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b086      	sub	sp, #24
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	60f8      	str	r0, [r7, #12]
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	e00a      	b.n	8000d1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d04:	f3af 8000 	nop.w
 8000d08:	4601      	mov	r1, r0
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	1c5a      	adds	r2, r3, #1
 8000d0e:	60ba      	str	r2, [r7, #8]
 8000d10:	b2ca      	uxtb	r2, r1
 8000d12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	3301      	adds	r3, #1
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	697a      	ldr	r2, [r7, #20]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	dbf0      	blt.n	8000d04 <_read+0x12>
  }

  return len;
 8000d22:	687b      	ldr	r3, [r7, #4]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d54:	605a      	str	r2, [r3, #4]
  return 0;
 8000d56:	2300      	movs	r3, #0
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <_isatty>:

int _isatty(int file)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d6c:	2301      	movs	r3, #1
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b085      	sub	sp, #20
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	60f8      	str	r0, [r7, #12]
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d86:	2300      	movs	r3, #0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d9c:	4a14      	ldr	r2, [pc, #80]	@ (8000df0 <_sbrk+0x5c>)
 8000d9e:	4b15      	ldr	r3, [pc, #84]	@ (8000df4 <_sbrk+0x60>)
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da8:	4b13      	ldr	r3, [pc, #76]	@ (8000df8 <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d102      	bne.n	8000db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db0:	4b11      	ldr	r3, [pc, #68]	@ (8000df8 <_sbrk+0x64>)
 8000db2:	4a12      	ldr	r2, [pc, #72]	@ (8000dfc <_sbrk+0x68>)
 8000db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db6:	4b10      	ldr	r3, [pc, #64]	@ (8000df8 <_sbrk+0x64>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d207      	bcs.n	8000dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc4:	f004 fe4e 	bl	8005a64 <__errno>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	220c      	movs	r2, #12
 8000dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd2:	e009      	b.n	8000de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd4:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dda:	4b07      	ldr	r3, [pc, #28]	@ (8000df8 <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	4a05      	ldr	r2, [pc, #20]	@ (8000df8 <_sbrk+0x64>)
 8000de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000de6:	68fb      	ldr	r3, [r7, #12]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20020000 	.word	0x20020000
 8000df4:	00000400 	.word	0x00000400
 8000df8:	2000112c 	.word	0x2000112c
 8000dfc:	20001280 	.word	0x20001280

08000e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e38 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e04:	f000 f826 	bl	8000e54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e08:	480c      	ldr	r0, [pc, #48]	@ (8000e3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e0a:	490d      	ldr	r1, [pc, #52]	@ (8000e40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e10:	e002      	b.n	8000e18 <LoopCopyDataInit>

08000e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e16:	3304      	adds	r3, #4

08000e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e1c:	d3f9      	bcc.n	8000e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e20:	4c0a      	ldr	r4, [pc, #40]	@ (8000e4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e24:	e001      	b.n	8000e2a <LoopFillZerobss>

08000e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e28:	3204      	adds	r2, #4

08000e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e2c:	d3fb      	bcc.n	8000e26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e2e:	f004 fe1f 	bl	8005a70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e32:	f7ff fbab 	bl	800058c <main>
  bx  lr    
 8000e36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e40:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e44:	0801be38 	.word	0x0801be38
  ldr r2, =_sbss
 8000e48:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e4c:	20001280 	.word	0x20001280

08000e50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e50:	e7fe      	b.n	8000e50 <ADC_IRQHandler>
	...

08000e54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e58:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <SystemInit+0x20>)
 8000e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e5e:	4a05      	ldr	r2, [pc, #20]	@ (8000e74 <SystemInit+0x20>)
 8000e60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb8 <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb8 <HAL_Init+0x40>)
 8000e82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e88:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb8 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb8 <HAL_Init+0x40>)
 8000e8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e94:	4b08      	ldr	r3, [pc, #32]	@ (8000eb8 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a07      	ldr	r2, [pc, #28]	@ (8000eb8 <HAL_Init+0x40>)
 8000e9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f000 f931 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f000 f808 	bl	8000ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eac:	f7ff fe3a 	bl	8000b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023c00 	.word	0x40023c00

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec4:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <HAL_InitTick+0x54>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b12      	ldr	r3, [pc, #72]	@ (8000f14 <HAL_InitTick+0x58>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f93b 	bl	8001156 <HAL_SYSTICK_Config>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00e      	b.n	8000f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b0f      	cmp	r3, #15
 8000eee:	d80a      	bhi.n	8000f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	f000 f911 	bl	800111e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000efc:	4a06      	ldr	r2, [pc, #24]	@ (8000f18 <HAL_InitTick+0x5c>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e000      	b.n	8000f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000000 	.word	0x20000000
 8000f14:	20000008 	.word	0x20000008
 8000f18:	20000004 	.word	0x20000004

08000f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f20:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <HAL_IncTick+0x20>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <HAL_IncTick+0x24>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a04      	ldr	r2, [pc, #16]	@ (8000f40 <HAL_IncTick+0x24>)
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	20001130 	.word	0x20001130

08000f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b03      	ldr	r3, [pc, #12]	@ (8000f58 <HAL_GetTick+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20001130 	.word	0x20001130

08000f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff ffee 	bl	8000f44 <HAL_GetTick>
 8000f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f74:	d005      	beq.n	8000f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f76:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <HAL_Delay+0x44>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f82:	bf00      	nop
 8000f84:	f7ff ffde 	bl	8000f44 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8f7      	bhi.n	8000f84 <HAL_Delay+0x28>
  {
  }
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000008 	.word	0x20000008

08000fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd6:	4a04      	ldr	r2, [pc, #16]	@ (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	60d3      	str	r3, [r2, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff0:	4b04      	ldr	r3, [pc, #16]	@ (8001004 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	f003 0307 	and.w	r3, r3, #7
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	db0a      	blt.n	8001032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	490c      	ldr	r1, [pc, #48]	@ (8001054 <__NVIC_SetPriority+0x4c>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	0112      	lsls	r2, r2, #4
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	440b      	add	r3, r1
 800102c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001030:	e00a      	b.n	8001048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4908      	ldr	r1, [pc, #32]	@ (8001058 <__NVIC_SetPriority+0x50>)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	3b04      	subs	r3, #4
 8001040:	0112      	lsls	r2, r2, #4
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	440b      	add	r3, r1
 8001046:	761a      	strb	r2, [r3, #24]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000e100 	.word	0xe000e100
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	@ 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f1c3 0307 	rsb	r3, r3, #7
 8001076:	2b04      	cmp	r3, #4
 8001078:	bf28      	it	cs
 800107a:	2304      	movcs	r3, #4
 800107c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3304      	adds	r3, #4
 8001082:	2b06      	cmp	r3, #6
 8001084:	d902      	bls.n	800108c <NVIC_EncodePriority+0x30>
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3b03      	subs	r3, #3
 800108a:	e000      	b.n	800108e <NVIC_EncodePriority+0x32>
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	f04f 32ff 	mov.w	r2, #4294967295
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43da      	mvns	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	401a      	ands	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a4:	f04f 31ff 	mov.w	r1, #4294967295
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	43d9      	mvns	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	4313      	orrs	r3, r2
         );
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3724      	adds	r7, #36	@ 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010d4:	d301      	bcc.n	80010da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00f      	b.n	80010fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010da:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <SysTick_Config+0x40>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e2:	210f      	movs	r1, #15
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f7ff ff8e 	bl	8001008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ec:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <SysTick_Config+0x40>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f2:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <SysTick_Config+0x40>)
 80010f4:	2207      	movs	r2, #7
 80010f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	e000e010 	.word	0xe000e010

08001108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff47 	bl	8000fa4 <__NVIC_SetPriorityGrouping>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001130:	f7ff ff5c 	bl	8000fec <__NVIC_GetPriorityGrouping>
 8001134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f7ff ff8e 	bl	800105c <NVIC_EncodePriority>
 8001140:	4602      	mov	r2, r0
 8001142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff5d 	bl	8001008 <__NVIC_SetPriority>
}
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ffb0 	bl	80010c4 <SysTick_Config>
 8001164:	4603      	mov	r3, r0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	@ 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001182:	2300      	movs	r3, #0
 8001184:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
 800118a:	e16b      	b.n	8001464 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800118c:	2201      	movs	r2, #1
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	f040 815a 	bne.w	800145e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d005      	beq.n	80011c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d130      	bne.n	8001224 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	2203      	movs	r2, #3
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	68da      	ldr	r2, [r3, #12]
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f8:	2201      	movs	r2, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	091b      	lsrs	r3, r3, #4
 800120e:	f003 0201 	and.w	r2, r3, #1
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	2b03      	cmp	r3, #3
 800122e:	d017      	beq.n	8001260 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	2203      	movs	r2, #3
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d123      	bne.n	80012b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	08da      	lsrs	r2, r3, #3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3208      	adds	r2, #8
 8001274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	f003 0307 	and.w	r3, r3, #7
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	220f      	movs	r2, #15
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	691a      	ldr	r2, [r3, #16]
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	08da      	lsrs	r2, r3, #3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3208      	adds	r2, #8
 80012ae:	69b9      	ldr	r1, [r7, #24]
 80012b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0203 	and.w	r2, r3, #3
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 80b4 	beq.w	800145e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b60      	ldr	r3, [pc, #384]	@ (800147c <HAL_GPIO_Init+0x30c>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fe:	4a5f      	ldr	r2, [pc, #380]	@ (800147c <HAL_GPIO_Init+0x30c>)
 8001300:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001304:	6453      	str	r3, [r2, #68]	@ 0x44
 8001306:	4b5d      	ldr	r3, [pc, #372]	@ (800147c <HAL_GPIO_Init+0x30c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001312:	4a5b      	ldr	r2, [pc, #364]	@ (8001480 <HAL_GPIO_Init+0x310>)
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	089b      	lsrs	r3, r3, #2
 8001318:	3302      	adds	r3, #2
 800131a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	220f      	movs	r2, #15
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a52      	ldr	r2, [pc, #328]	@ (8001484 <HAL_GPIO_Init+0x314>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d02b      	beq.n	8001396 <HAL_GPIO_Init+0x226>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a51      	ldr	r2, [pc, #324]	@ (8001488 <HAL_GPIO_Init+0x318>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d025      	beq.n	8001392 <HAL_GPIO_Init+0x222>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a50      	ldr	r2, [pc, #320]	@ (800148c <HAL_GPIO_Init+0x31c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d01f      	beq.n	800138e <HAL_GPIO_Init+0x21e>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4f      	ldr	r2, [pc, #316]	@ (8001490 <HAL_GPIO_Init+0x320>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d019      	beq.n	800138a <HAL_GPIO_Init+0x21a>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4e      	ldr	r2, [pc, #312]	@ (8001494 <HAL_GPIO_Init+0x324>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d013      	beq.n	8001386 <HAL_GPIO_Init+0x216>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a4d      	ldr	r2, [pc, #308]	@ (8001498 <HAL_GPIO_Init+0x328>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d00d      	beq.n	8001382 <HAL_GPIO_Init+0x212>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4c      	ldr	r2, [pc, #304]	@ (800149c <HAL_GPIO_Init+0x32c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d007      	beq.n	800137e <HAL_GPIO_Init+0x20e>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4b      	ldr	r2, [pc, #300]	@ (80014a0 <HAL_GPIO_Init+0x330>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d101      	bne.n	800137a <HAL_GPIO_Init+0x20a>
 8001376:	2307      	movs	r3, #7
 8001378:	e00e      	b.n	8001398 <HAL_GPIO_Init+0x228>
 800137a:	2308      	movs	r3, #8
 800137c:	e00c      	b.n	8001398 <HAL_GPIO_Init+0x228>
 800137e:	2306      	movs	r3, #6
 8001380:	e00a      	b.n	8001398 <HAL_GPIO_Init+0x228>
 8001382:	2305      	movs	r3, #5
 8001384:	e008      	b.n	8001398 <HAL_GPIO_Init+0x228>
 8001386:	2304      	movs	r3, #4
 8001388:	e006      	b.n	8001398 <HAL_GPIO_Init+0x228>
 800138a:	2303      	movs	r3, #3
 800138c:	e004      	b.n	8001398 <HAL_GPIO_Init+0x228>
 800138e:	2302      	movs	r3, #2
 8001390:	e002      	b.n	8001398 <HAL_GPIO_Init+0x228>
 8001392:	2301      	movs	r3, #1
 8001394:	e000      	b.n	8001398 <HAL_GPIO_Init+0x228>
 8001396:	2300      	movs	r3, #0
 8001398:	69fa      	ldr	r2, [r7, #28]
 800139a:	f002 0203 	and.w	r2, r2, #3
 800139e:	0092      	lsls	r2, r2, #2
 80013a0:	4093      	lsls	r3, r2
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a8:	4935      	ldr	r1, [pc, #212]	@ (8001480 <HAL_GPIO_Init+0x310>)
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	089b      	lsrs	r3, r3, #2
 80013ae:	3302      	adds	r3, #2
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013b6:	4b3b      	ldr	r3, [pc, #236]	@ (80014a4 <HAL_GPIO_Init+0x334>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013da:	4a32      	ldr	r2, [pc, #200]	@ (80014a4 <HAL_GPIO_Init+0x334>)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013e0:	4b30      	ldr	r3, [pc, #192]	@ (80014a4 <HAL_GPIO_Init+0x334>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001404:	4a27      	ldr	r2, [pc, #156]	@ (80014a4 <HAL_GPIO_Init+0x334>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800140a:	4b26      	ldr	r3, [pc, #152]	@ (80014a4 <HAL_GPIO_Init+0x334>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800142e:	4a1d      	ldr	r2, [pc, #116]	@ (80014a4 <HAL_GPIO_Init+0x334>)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001434:	4b1b      	ldr	r3, [pc, #108]	@ (80014a4 <HAL_GPIO_Init+0x334>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001458:	4a12      	ldr	r2, [pc, #72]	@ (80014a4 <HAL_GPIO_Init+0x334>)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3301      	adds	r3, #1
 8001462:	61fb      	str	r3, [r7, #28]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	2b0f      	cmp	r3, #15
 8001468:	f67f ae90 	bls.w	800118c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3724      	adds	r7, #36	@ 0x24
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800
 8001480:	40013800 	.word	0x40013800
 8001484:	40020000 	.word	0x40020000
 8001488:	40020400 	.word	0x40020400
 800148c:	40020800 	.word	0x40020800
 8001490:	40020c00 	.word	0x40020c00
 8001494:	40021000 	.word	0x40021000
 8001498:	40021400 	.word	0x40021400
 800149c:	40021800 	.word	0x40021800
 80014a0:	40021c00 	.word	0x40021c00
 80014a4:	40013c00 	.word	0x40013c00

080014a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	807b      	strh	r3, [r7, #2]
 80014b4:	4613      	mov	r3, r2
 80014b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b8:	787b      	ldrb	r3, [r7, #1]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014be:	887a      	ldrh	r2, [r7, #2]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014c4:	e003      	b.n	80014ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014c6:	887b      	ldrh	r3, [r7, #2]
 80014c8:	041a      	lsls	r2, r3, #16
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	619a      	str	r2, [r3, #24]
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e12b      	b.n	8001746 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d106      	bne.n	8001508 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff fb36 	bl	8000b74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2224      	movs	r2, #36	@ 0x24
 800150c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0201 	bic.w	r2, r2, #1
 800151e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800152e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800153e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001540:	f001 fdc6 	bl	80030d0 <HAL_RCC_GetPCLK1Freq>
 8001544:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	4a81      	ldr	r2, [pc, #516]	@ (8001750 <HAL_I2C_Init+0x274>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d807      	bhi.n	8001560 <HAL_I2C_Init+0x84>
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4a80      	ldr	r2, [pc, #512]	@ (8001754 <HAL_I2C_Init+0x278>)
 8001554:	4293      	cmp	r3, r2
 8001556:	bf94      	ite	ls
 8001558:	2301      	movls	r3, #1
 800155a:	2300      	movhi	r3, #0
 800155c:	b2db      	uxtb	r3, r3
 800155e:	e006      	b.n	800156e <HAL_I2C_Init+0x92>
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4a7d      	ldr	r2, [pc, #500]	@ (8001758 <HAL_I2C_Init+0x27c>)
 8001564:	4293      	cmp	r3, r2
 8001566:	bf94      	ite	ls
 8001568:	2301      	movls	r3, #1
 800156a:	2300      	movhi	r3, #0
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e0e7      	b.n	8001746 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4a78      	ldr	r2, [pc, #480]	@ (800175c <HAL_I2C_Init+0x280>)
 800157a:	fba2 2303 	umull	r2, r3, r2, r3
 800157e:	0c9b      	lsrs	r3, r3, #18
 8001580:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68ba      	ldr	r2, [r7, #8]
 8001592:	430a      	orrs	r2, r1
 8001594:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	4a6a      	ldr	r2, [pc, #424]	@ (8001750 <HAL_I2C_Init+0x274>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d802      	bhi.n	80015b0 <HAL_I2C_Init+0xd4>
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3301      	adds	r3, #1
 80015ae:	e009      	b.n	80015c4 <HAL_I2C_Init+0xe8>
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80015b6:	fb02 f303 	mul.w	r3, r2, r3
 80015ba:	4a69      	ldr	r2, [pc, #420]	@ (8001760 <HAL_I2C_Init+0x284>)
 80015bc:	fba2 2303 	umull	r2, r3, r2, r3
 80015c0:	099b      	lsrs	r3, r3, #6
 80015c2:	3301      	adds	r3, #1
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	6812      	ldr	r2, [r2, #0]
 80015c8:	430b      	orrs	r3, r1
 80015ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80015d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	495c      	ldr	r1, [pc, #368]	@ (8001750 <HAL_I2C_Init+0x274>)
 80015e0:	428b      	cmp	r3, r1
 80015e2:	d819      	bhi.n	8001618 <HAL_I2C_Init+0x13c>
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	1e59      	subs	r1, r3, #1
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80015f2:	1c59      	adds	r1, r3, #1
 80015f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80015f8:	400b      	ands	r3, r1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00a      	beq.n	8001614 <HAL_I2C_Init+0x138>
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	1e59      	subs	r1, r3, #1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	fbb1 f3f3 	udiv	r3, r1, r3
 800160c:	3301      	adds	r3, #1
 800160e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001612:	e051      	b.n	80016b8 <HAL_I2C_Init+0x1dc>
 8001614:	2304      	movs	r3, #4
 8001616:	e04f      	b.n	80016b8 <HAL_I2C_Init+0x1dc>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d111      	bne.n	8001644 <HAL_I2C_Init+0x168>
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	1e58      	subs	r0, r3, #1
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6859      	ldr	r1, [r3, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	440b      	add	r3, r1
 800162e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001632:	3301      	adds	r3, #1
 8001634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001638:	2b00      	cmp	r3, #0
 800163a:	bf0c      	ite	eq
 800163c:	2301      	moveq	r3, #1
 800163e:	2300      	movne	r3, #0
 8001640:	b2db      	uxtb	r3, r3
 8001642:	e012      	b.n	800166a <HAL_I2C_Init+0x18e>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	1e58      	subs	r0, r3, #1
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6859      	ldr	r1, [r3, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	0099      	lsls	r1, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	fbb0 f3f3 	udiv	r3, r0, r3
 800165a:	3301      	adds	r3, #1
 800165c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001660:	2b00      	cmp	r3, #0
 8001662:	bf0c      	ite	eq
 8001664:	2301      	moveq	r3, #1
 8001666:	2300      	movne	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_I2C_Init+0x196>
 800166e:	2301      	movs	r3, #1
 8001670:	e022      	b.n	80016b8 <HAL_I2C_Init+0x1dc>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10e      	bne.n	8001698 <HAL_I2C_Init+0x1bc>
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	1e58      	subs	r0, r3, #1
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6859      	ldr	r1, [r3, #4]
 8001682:	460b      	mov	r3, r1
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	440b      	add	r3, r1
 8001688:	fbb0 f3f3 	udiv	r3, r0, r3
 800168c:	3301      	adds	r3, #1
 800168e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001692:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001696:	e00f      	b.n	80016b8 <HAL_I2C_Init+0x1dc>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	1e58      	subs	r0, r3, #1
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6859      	ldr	r1, [r3, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	0099      	lsls	r1, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ae:	3301      	adds	r3, #1
 80016b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	6809      	ldr	r1, [r1, #0]
 80016bc:	4313      	orrs	r3, r2
 80016be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69da      	ldr	r2, [r3, #28]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80016e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6911      	ldr	r1, [r2, #16]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	68d2      	ldr	r2, [r2, #12]
 80016f2:	4311      	orrs	r1, r2
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	430b      	orrs	r3, r1
 80016fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695a      	ldr	r2, [r3, #20]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0201 	orr.w	r2, r2, #1
 8001726:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2220      	movs	r2, #32
 8001732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	000186a0 	.word	0x000186a0
 8001754:	001e847f 	.word	0x001e847f
 8001758:	003d08ff 	.word	0x003d08ff
 800175c:	431bde83 	.word	0x431bde83
 8001760:	10624dd3 	.word	0x10624dd3

08001764 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af02      	add	r7, sp, #8
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	461a      	mov	r2, r3
 8001770:	460b      	mov	r3, r1
 8001772:	817b      	strh	r3, [r7, #10]
 8001774:	4613      	mov	r3, r2
 8001776:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001778:	f7ff fbe4 	bl	8000f44 <HAL_GetTick>
 800177c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b20      	cmp	r3, #32
 8001788:	f040 80e0 	bne.w	800194c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	2319      	movs	r3, #25
 8001792:	2201      	movs	r2, #1
 8001794:	4970      	ldr	r1, [pc, #448]	@ (8001958 <HAL_I2C_Master_Transmit+0x1f4>)
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 fdf4 	bl	8002384 <I2C_WaitOnFlagUntilTimeout>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80017a2:	2302      	movs	r3, #2
 80017a4:	e0d3      	b.n	800194e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <HAL_I2C_Master_Transmit+0x50>
 80017b0:	2302      	movs	r3, #2
 80017b2:	e0cc      	b.n	800194e <HAL_I2C_Master_Transmit+0x1ea>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d007      	beq.n	80017da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f042 0201 	orr.w	r2, r2, #1
 80017d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2221      	movs	r2, #33	@ 0x21
 80017ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2210      	movs	r2, #16
 80017f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2200      	movs	r2, #0
 80017fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	893a      	ldrh	r2, [r7, #8]
 800180a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001810:	b29a      	uxth	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4a50      	ldr	r2, [pc, #320]	@ (800195c <HAL_I2C_Master_Transmit+0x1f8>)
 800181a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800181c:	8979      	ldrh	r1, [r7, #10]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	6a3a      	ldr	r2, [r7, #32]
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 fbc8 	bl	8001fb8 <I2C_MasterRequestWrite>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e08d      	b.n	800194e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001848:	e066      	b.n	8001918 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	6a39      	ldr	r1, [r7, #32]
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 feb2 	bl	80025b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00d      	beq.n	8001876 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	2b04      	cmp	r3, #4
 8001860:	d107      	bne.n	8001872 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001870:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e06b      	b.n	800194e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187a:	781a      	ldrb	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001890:	b29b      	uxth	r3, r3
 8001892:	3b01      	subs	r3, #1
 8001894:	b29a      	uxth	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800189e:	3b01      	subs	r3, #1
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d11b      	bne.n	80018ec <HAL_I2C_Master_Transmit+0x188>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d017      	beq.n	80018ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c0:	781a      	ldrb	r2, [r3, #0]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018cc:	1c5a      	adds	r2, r3, #1
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	3b01      	subs	r3, #1
 80018da:	b29a      	uxth	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018e4:	3b01      	subs	r3, #1
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	6a39      	ldr	r1, [r7, #32]
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f000 fea9 	bl	8002648 <I2C_WaitOnBTFFlagUntilTimeout>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00d      	beq.n	8001918 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001900:	2b04      	cmp	r3, #4
 8001902:	d107      	bne.n	8001914 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001912:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e01a      	b.n	800194e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800191c:	2b00      	cmp	r3, #0
 800191e:	d194      	bne.n	800184a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800192e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2220      	movs	r2, #32
 8001934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	e000      	b.n	800194e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800194c:	2302      	movs	r3, #2
  }
}
 800194e:	4618      	mov	r0, r3
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	00100002 	.word	0x00100002
 800195c:	ffff0000 	.word	0xffff0000

08001960 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08c      	sub	sp, #48	@ 0x30
 8001964:	af02      	add	r7, sp, #8
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	461a      	mov	r2, r3
 800196c:	460b      	mov	r3, r1
 800196e:	817b      	strh	r3, [r7, #10]
 8001970:	4613      	mov	r3, r2
 8001972:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001974:	f7ff fae6 	bl	8000f44 <HAL_GetTick>
 8001978:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b20      	cmp	r3, #32
 8001984:	f040 8217 	bne.w	8001db6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	2319      	movs	r3, #25
 800198e:	2201      	movs	r2, #1
 8001990:	497c      	ldr	r1, [pc, #496]	@ (8001b84 <HAL_I2C_Master_Receive+0x224>)
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f000 fcf6 	bl	8002384 <I2C_WaitOnFlagUntilTimeout>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800199e:	2302      	movs	r3, #2
 80019a0:	e20a      	b.n	8001db8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d101      	bne.n	80019b0 <HAL_I2C_Master_Receive+0x50>
 80019ac:	2302      	movs	r3, #2
 80019ae:	e203      	b.n	8001db8 <HAL_I2C_Master_Receive+0x458>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d007      	beq.n	80019d6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f042 0201 	orr.w	r2, r2, #1
 80019d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2222      	movs	r2, #34	@ 0x22
 80019ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2210      	movs	r2, #16
 80019f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	893a      	ldrh	r2, [r7, #8]
 8001a06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4a5c      	ldr	r2, [pc, #368]	@ (8001b88 <HAL_I2C_Master_Receive+0x228>)
 8001a16:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a18:	8979      	ldrh	r1, [r7, #10]
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f000 fb4c 	bl	80020bc <I2C_MasterRequestRead>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e1c4      	b.n	8001db8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d113      	bne.n	8001a5e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a36:	2300      	movs	r3, #0
 8001a38:	623b      	str	r3, [r7, #32]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	623b      	str	r3, [r7, #32]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	623b      	str	r3, [r7, #32]
 8001a4a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	e198      	b.n	8001d90 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d11b      	bne.n	8001a9e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	61fb      	str	r3, [r7, #28]
 8001a8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	e178      	b.n	8001d90 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d11b      	bne.n	8001ade <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ab4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ac4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61bb      	str	r3, [r7, #24]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	61bb      	str	r3, [r7, #24]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	61bb      	str	r3, [r7, #24]
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	e158      	b.n	8001d90 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001aec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001b04:	e144      	b.n	8001d90 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	f200 80f1 	bhi.w	8001cf2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d123      	bne.n	8001b60 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f000 fddb 	bl	80026d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e145      	b.n	8001db8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	691a      	ldr	r2, [r3, #16]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	3b01      	subs	r3, #1
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b5e:	e117      	b.n	8001d90 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d14e      	bne.n	8001c06 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b6e:	2200      	movs	r2, #0
 8001b70:	4906      	ldr	r1, [pc, #24]	@ (8001b8c <HAL_I2C_Master_Receive+0x22c>)
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 fc06 	bl	8002384 <I2C_WaitOnFlagUntilTimeout>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d008      	beq.n	8001b90 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e11a      	b.n	8001db8 <HAL_I2C_Master_Receive+0x458>
 8001b82:	bf00      	nop
 8001b84:	00100002 	.word	0x00100002
 8001b88:	ffff0000 	.word	0xffff0000
 8001b8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	691a      	ldr	r2, [r3, #16]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	691a      	ldr	r2, [r3, #16]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be4:	1c5a      	adds	r2, r3, #1
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001c04:	e0c4      	b.n	8001d90 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	496c      	ldr	r1, [pc, #432]	@ (8001dc0 <HAL_I2C_Master_Receive+0x460>)
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f000 fbb7 	bl	8002384 <I2C_WaitOnFlagUntilTimeout>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0cb      	b.n	8001db8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	691a      	ldr	r2, [r3, #16]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c68:	2200      	movs	r2, #0
 8001c6a:	4955      	ldr	r1, [pc, #340]	@ (8001dc0 <HAL_I2C_Master_Receive+0x460>)
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 fb89 	bl	8002384 <I2C_WaitOnFlagUntilTimeout>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e09d      	b.n	8001db8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	691a      	ldr	r2, [r3, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	691a      	ldr	r2, [r3, #16]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001cf0:	e04e      	b.n	8001d90 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cf4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f000 fcee 	bl	80026d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e058      	b.n	8001db8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d22:	3b01      	subs	r3, #1
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	3b01      	subs	r3, #1
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	d124      	bne.n	8001d90 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d4a:	2b03      	cmp	r3, #3
 8001d4c:	d107      	bne.n	8001d5e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d5c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f47f aeb6 	bne.w	8001b06 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	e000      	b.n	8001db8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001db6:	2302      	movs	r3, #2
  }
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3728      	adds	r7, #40	@ 0x28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	00010004 	.word	0x00010004

08001dc4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af02      	add	r7, sp, #8
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	4608      	mov	r0, r1
 8001dce:	4611      	mov	r1, r2
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	817b      	strh	r3, [r7, #10]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	813b      	strh	r3, [r7, #8]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dde:	f7ff f8b1 	bl	8000f44 <HAL_GetTick>
 8001de2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b20      	cmp	r3, #32
 8001dee:	f040 80d9 	bne.w	8001fa4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2319      	movs	r3, #25
 8001df8:	2201      	movs	r2, #1
 8001dfa:	496d      	ldr	r1, [pc, #436]	@ (8001fb0 <HAL_I2C_Mem_Write+0x1ec>)
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f000 fac1 	bl	8002384 <I2C_WaitOnFlagUntilTimeout>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e0cc      	b.n	8001fa6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_I2C_Mem_Write+0x56>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e0c5      	b.n	8001fa6 <HAL_I2C_Mem_Write+0x1e2>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d007      	beq.n	8001e40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0201 	orr.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2221      	movs	r2, #33	@ 0x21
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2240      	movs	r2, #64	@ 0x40
 8001e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6a3a      	ldr	r2, [r7, #32]
 8001e6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001e70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4a4d      	ldr	r2, [pc, #308]	@ (8001fb4 <HAL_I2C_Mem_Write+0x1f0>)
 8001e80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e82:	88f8      	ldrh	r0, [r7, #6]
 8001e84:	893a      	ldrh	r2, [r7, #8]
 8001e86:	8979      	ldrh	r1, [r7, #10]
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	9301      	str	r3, [sp, #4]
 8001e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	4603      	mov	r3, r0
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 f9e0 	bl	8002258 <I2C_RequestMemoryWrite>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d052      	beq.n	8001f44 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e081      	b.n	8001fa6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 fb86 	bl	80025b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00d      	beq.n	8001ece <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	d107      	bne.n	8001eca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ec8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e06b      	b.n	8001fa6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed2:	781a      	ldrb	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d11b      	bne.n	8001f44 <HAL_I2C_Mem_Write+0x180>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d017      	beq.n	8001f44 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f18:	781a      	ldrb	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f24:	1c5a      	adds	r2, r3, #1
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1aa      	bne.n	8001ea2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f000 fb79 	bl	8002648 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00d      	beq.n	8001f78 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f60:	2b04      	cmp	r3, #4
 8001f62:	d107      	bne.n	8001f74 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e016      	b.n	8001fa6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	e000      	b.n	8001fa6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001fa4:	2302      	movs	r3, #2
  }
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	00100002 	.word	0x00100002
 8001fb4:	ffff0000 	.word	0xffff0000

08001fb8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af02      	add	r7, sp, #8
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fcc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d006      	beq.n	8001fe2 <I2C_MasterRequestWrite+0x2a>
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d003      	beq.n	8001fe2 <I2C_MasterRequestWrite+0x2a>
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001fe0:	d108      	bne.n	8001ff4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	e00b      	b.n	800200c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff8:	2b12      	cmp	r3, #18
 8001ffa:	d107      	bne.n	800200c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800200a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 f9b3 	bl	8002384 <I2C_WaitOnFlagUntilTimeout>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00d      	beq.n	8002040 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800202e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002032:	d103      	bne.n	800203c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800203a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e035      	b.n	80020ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002048:	d108      	bne.n	800205c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800204a:	897b      	ldrh	r3, [r7, #10]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	461a      	mov	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002058:	611a      	str	r2, [r3, #16]
 800205a:	e01b      	b.n	8002094 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800205c:	897b      	ldrh	r3, [r7, #10]
 800205e:	11db      	asrs	r3, r3, #7
 8002060:	b2db      	uxtb	r3, r3
 8002062:	f003 0306 	and.w	r3, r3, #6
 8002066:	b2db      	uxtb	r3, r3
 8002068:	f063 030f 	orn	r3, r3, #15
 800206c:	b2da      	uxtb	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	490e      	ldr	r1, [pc, #56]	@ (80020b4 <I2C_MasterRequestWrite+0xfc>)
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 f9fc 	bl	8002478 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e010      	b.n	80020ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800208a:	897b      	ldrh	r3, [r7, #10]
 800208c:	b2da      	uxtb	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	4907      	ldr	r1, [pc, #28]	@ (80020b8 <I2C_MasterRequestWrite+0x100>)
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 f9ec 	bl	8002478 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	00010008 	.word	0x00010008
 80020b8:	00010002 	.word	0x00010002

080020bc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b088      	sub	sp, #32
 80020c0:	af02      	add	r7, sp, #8
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	607a      	str	r2, [r7, #4]
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	460b      	mov	r3, r1
 80020ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80020e0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d006      	beq.n	80020f6 <I2C_MasterRequestRead+0x3a>
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d003      	beq.n	80020f6 <I2C_MasterRequestRead+0x3a>
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80020f4:	d108      	bne.n	8002108 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	e00b      	b.n	8002120 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210c:	2b11      	cmp	r3, #17
 800210e:	d107      	bne.n	8002120 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800211e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 f929 	bl	8002384 <I2C_WaitOnFlagUntilTimeout>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00d      	beq.n	8002154 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002142:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002146:	d103      	bne.n	8002150 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800214e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e079      	b.n	8002248 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800215c:	d108      	bne.n	8002170 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800215e:	897b      	ldrh	r3, [r7, #10]
 8002160:	b2db      	uxtb	r3, r3
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	b2da      	uxtb	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	611a      	str	r2, [r3, #16]
 800216e:	e05f      	b.n	8002230 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002170:	897b      	ldrh	r3, [r7, #10]
 8002172:	11db      	asrs	r3, r3, #7
 8002174:	b2db      	uxtb	r3, r3
 8002176:	f003 0306 	and.w	r3, r3, #6
 800217a:	b2db      	uxtb	r3, r3
 800217c:	f063 030f 	orn	r3, r3, #15
 8002180:	b2da      	uxtb	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	4930      	ldr	r1, [pc, #192]	@ (8002250 <I2C_MasterRequestRead+0x194>)
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 f972 	bl	8002478 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e054      	b.n	8002248 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800219e:	897b      	ldrh	r3, [r7, #10]
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	4929      	ldr	r1, [pc, #164]	@ (8002254 <I2C_MasterRequestRead+0x198>)
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 f962 	bl	8002478 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e044      	b.n	8002248 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021e2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f000 f8c7 	bl	8002384 <I2C_WaitOnFlagUntilTimeout>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00d      	beq.n	8002218 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002206:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800220a:	d103      	bne.n	8002214 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002212:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e017      	b.n	8002248 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002218:	897b      	ldrh	r3, [r7, #10]
 800221a:	11db      	asrs	r3, r3, #7
 800221c:	b2db      	uxtb	r3, r3
 800221e:	f003 0306 	and.w	r3, r3, #6
 8002222:	b2db      	uxtb	r3, r3
 8002224:	f063 030e 	orn	r3, r3, #14
 8002228:	b2da      	uxtb	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	4907      	ldr	r1, [pc, #28]	@ (8002254 <I2C_MasterRequestRead+0x198>)
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 f91e 	bl	8002478 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	00010008 	.word	0x00010008
 8002254:	00010002 	.word	0x00010002

08002258 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af02      	add	r7, sp, #8
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	4608      	mov	r0, r1
 8002262:	4611      	mov	r1, r2
 8002264:	461a      	mov	r2, r3
 8002266:	4603      	mov	r3, r0
 8002268:	817b      	strh	r3, [r7, #10]
 800226a:	460b      	mov	r3, r1
 800226c:	813b      	strh	r3, [r7, #8]
 800226e:	4613      	mov	r3, r2
 8002270:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002280:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	2200      	movs	r2, #0
 800228a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 f878 	bl	8002384 <I2C_WaitOnFlagUntilTimeout>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00d      	beq.n	80022b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022a8:	d103      	bne.n	80022b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e05f      	b.n	8002376 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022b6:	897b      	ldrh	r3, [r7, #10]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	461a      	mov	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80022c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	6a3a      	ldr	r2, [r7, #32]
 80022ca:	492d      	ldr	r1, [pc, #180]	@ (8002380 <I2C_RequestMemoryWrite+0x128>)
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 f8d3 	bl	8002478 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e04c      	b.n	8002376 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022f4:	6a39      	ldr	r1, [r7, #32]
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 f95e 	bl	80025b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00d      	beq.n	800231e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002306:	2b04      	cmp	r3, #4
 8002308:	d107      	bne.n	800231a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002318:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e02b      	b.n	8002376 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d105      	bne.n	8002330 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002324:	893b      	ldrh	r3, [r7, #8]
 8002326:	b2da      	uxtb	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	611a      	str	r2, [r3, #16]
 800232e:	e021      	b.n	8002374 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002330:	893b      	ldrh	r3, [r7, #8]
 8002332:	0a1b      	lsrs	r3, r3, #8
 8002334:	b29b      	uxth	r3, r3
 8002336:	b2da      	uxtb	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800233e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002340:	6a39      	ldr	r1, [r7, #32]
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 f938 	bl	80025b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00d      	beq.n	800236a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002352:	2b04      	cmp	r3, #4
 8002354:	d107      	bne.n	8002366 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002364:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e005      	b.n	8002376 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800236a:	893b      	ldrh	r3, [r7, #8]
 800236c:	b2da      	uxtb	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	00010002 	.word	0x00010002

08002384 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	4613      	mov	r3, r2
 8002392:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002394:	e048      	b.n	8002428 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239c:	d044      	beq.n	8002428 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800239e:	f7fe fdd1 	bl	8000f44 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d302      	bcc.n	80023b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d139      	bne.n	8002428 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	0c1b      	lsrs	r3, r3, #16
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d10d      	bne.n	80023da <I2C_WaitOnFlagUntilTimeout+0x56>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	43da      	mvns	r2, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	4013      	ands	r3, r2
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	bf0c      	ite	eq
 80023d0:	2301      	moveq	r3, #1
 80023d2:	2300      	movne	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	461a      	mov	r2, r3
 80023d8:	e00c      	b.n	80023f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	43da      	mvns	r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	4013      	ands	r3, r2
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	bf0c      	ite	eq
 80023ec:	2301      	moveq	r3, #1
 80023ee:	2300      	movne	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	461a      	mov	r2, r3
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d116      	bne.n	8002428 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2220      	movs	r2, #32
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002414:	f043 0220 	orr.w	r2, r3, #32
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e023      	b.n	8002470 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	0c1b      	lsrs	r3, r3, #16
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b01      	cmp	r3, #1
 8002430:	d10d      	bne.n	800244e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	43da      	mvns	r2, r3
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	4013      	ands	r3, r2
 800243e:	b29b      	uxth	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	bf0c      	ite	eq
 8002444:	2301      	moveq	r3, #1
 8002446:	2300      	movne	r3, #0
 8002448:	b2db      	uxtb	r3, r3
 800244a:	461a      	mov	r2, r3
 800244c:	e00c      	b.n	8002468 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	43da      	mvns	r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	4013      	ands	r3, r2
 800245a:	b29b      	uxth	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	bf0c      	ite	eq
 8002460:	2301      	moveq	r3, #1
 8002462:	2300      	movne	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	429a      	cmp	r2, r3
 800246c:	d093      	beq.n	8002396 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002486:	e071      	b.n	800256c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002492:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002496:	d123      	bne.n	80024e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80024b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2220      	movs	r2, #32
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024cc:	f043 0204 	orr.w	r2, r3, #4
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e067      	b.n	80025b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e6:	d041      	beq.n	800256c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e8:	f7fe fd2c 	bl	8000f44 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d302      	bcc.n	80024fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d136      	bne.n	800256c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	0c1b      	lsrs	r3, r3, #16
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b01      	cmp	r3, #1
 8002506:	d10c      	bne.n	8002522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	43da      	mvns	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	4013      	ands	r3, r2
 8002514:	b29b      	uxth	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	bf14      	ite	ne
 800251a:	2301      	movne	r3, #1
 800251c:	2300      	moveq	r3, #0
 800251e:	b2db      	uxtb	r3, r3
 8002520:	e00b      	b.n	800253a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	43da      	mvns	r2, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	4013      	ands	r3, r2
 800252e:	b29b      	uxth	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf14      	ite	ne
 8002534:	2301      	movne	r3, #1
 8002536:	2300      	moveq	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d016      	beq.n	800256c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2220      	movs	r2, #32
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002558:	f043 0220 	orr.w	r2, r3, #32
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e021      	b.n	80025b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	0c1b      	lsrs	r3, r3, #16
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b01      	cmp	r3, #1
 8002574:	d10c      	bne.n	8002590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	43da      	mvns	r2, r3
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	4013      	ands	r3, r2
 8002582:	b29b      	uxth	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	bf14      	ite	ne
 8002588:	2301      	movne	r3, #1
 800258a:	2300      	moveq	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	e00b      	b.n	80025a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	43da      	mvns	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4013      	ands	r3, r2
 800259c:	b29b      	uxth	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	bf14      	ite	ne
 80025a2:	2301      	movne	r3, #1
 80025a4:	2300      	moveq	r3, #0
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f47f af6d 	bne.w	8002488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025c4:	e034      	b.n	8002630 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 f8e3 	bl	8002792 <I2C_IsAcknowledgeFailed>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e034      	b.n	8002640 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025dc:	d028      	beq.n	8002630 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025de:	f7fe fcb1 	bl	8000f44 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d302      	bcc.n	80025f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d11d      	bne.n	8002630 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025fe:	2b80      	cmp	r3, #128	@ 0x80
 8002600:	d016      	beq.n	8002630 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2220      	movs	r2, #32
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261c:	f043 0220 	orr.w	r2, r3, #32
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e007      	b.n	8002640 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800263a:	2b80      	cmp	r3, #128	@ 0x80
 800263c:	d1c3      	bne.n	80025c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002654:	e034      	b.n	80026c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 f89b 	bl	8002792 <I2C_IsAcknowledgeFailed>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e034      	b.n	80026d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266c:	d028      	beq.n	80026c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800266e:	f7fe fc69 	bl	8000f44 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	429a      	cmp	r2, r3
 800267c:	d302      	bcc.n	8002684 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d11d      	bne.n	80026c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	f003 0304 	and.w	r3, r3, #4
 800268e:	2b04      	cmp	r3, #4
 8002690:	d016      	beq.n	80026c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2220      	movs	r2, #32
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ac:	f043 0220 	orr.w	r2, r3, #32
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e007      	b.n	80026d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d1c3      	bne.n	8002656 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026e4:	e049      	b.n	800277a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	f003 0310 	and.w	r3, r3, #16
 80026f0:	2b10      	cmp	r3, #16
 80026f2:	d119      	bne.n	8002728 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f06f 0210 	mvn.w	r2, #16
 80026fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2220      	movs	r2, #32
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e030      	b.n	800278a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002728:	f7fe fc0c 	bl	8000f44 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	429a      	cmp	r2, r3
 8002736:	d302      	bcc.n	800273e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d11d      	bne.n	800277a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002748:	2b40      	cmp	r3, #64	@ 0x40
 800274a:	d016      	beq.n	800277a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2220      	movs	r2, #32
 8002756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002766:	f043 0220 	orr.w	r2, r3, #32
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e007      	b.n	800278a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002784:	2b40      	cmp	r3, #64	@ 0x40
 8002786:	d1ae      	bne.n	80026e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027a8:	d11b      	bne.n	80027e2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80027b2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2220      	movs	r2, #32
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	f043 0204 	orr.w	r2, r3, #4
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e267      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d075      	beq.n	80028fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800280e:	4b88      	ldr	r3, [pc, #544]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b04      	cmp	r3, #4
 8002818:	d00c      	beq.n	8002834 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800281a:	4b85      	ldr	r3, [pc, #532]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002822:	2b08      	cmp	r3, #8
 8002824:	d112      	bne.n	800284c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002826:	4b82      	ldr	r3, [pc, #520]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800282e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002832:	d10b      	bne.n	800284c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002834:	4b7e      	ldr	r3, [pc, #504]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d05b      	beq.n	80028f8 <HAL_RCC_OscConfig+0x108>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d157      	bne.n	80028f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e242      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002854:	d106      	bne.n	8002864 <HAL_RCC_OscConfig+0x74>
 8002856:	4b76      	ldr	r3, [pc, #472]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a75      	ldr	r2, [pc, #468]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 800285c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	e01d      	b.n	80028a0 <HAL_RCC_OscConfig+0xb0>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800286c:	d10c      	bne.n	8002888 <HAL_RCC_OscConfig+0x98>
 800286e:	4b70      	ldr	r3, [pc, #448]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a6f      	ldr	r2, [pc, #444]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002874:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	4b6d      	ldr	r3, [pc, #436]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a6c      	ldr	r2, [pc, #432]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	e00b      	b.n	80028a0 <HAL_RCC_OscConfig+0xb0>
 8002888:	4b69      	ldr	r3, [pc, #420]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a68      	ldr	r2, [pc, #416]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 800288e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	4b66      	ldr	r3, [pc, #408]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a65      	ldr	r2, [pc, #404]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 800289a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800289e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d013      	beq.n	80028d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a8:	f7fe fb4c 	bl	8000f44 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b0:	f7fe fb48 	bl	8000f44 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b64      	cmp	r3, #100	@ 0x64
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e207      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0xc0>
 80028ce:	e014      	b.n	80028fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d0:	f7fe fb38 	bl	8000f44 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d8:	f7fe fb34 	bl	8000f44 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b64      	cmp	r3, #100	@ 0x64
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e1f3      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ea:	4b51      	ldr	r3, [pc, #324]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0xe8>
 80028f6:	e000      	b.n	80028fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d063      	beq.n	80029ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002906:	4b4a      	ldr	r3, [pc, #296]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00b      	beq.n	800292a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002912:	4b47      	ldr	r3, [pc, #284]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800291a:	2b08      	cmp	r3, #8
 800291c:	d11c      	bne.n	8002958 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800291e:	4b44      	ldr	r3, [pc, #272]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d116      	bne.n	8002958 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800292a:	4b41      	ldr	r3, [pc, #260]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d005      	beq.n	8002942 <HAL_RCC_OscConfig+0x152>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d001      	beq.n	8002942 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e1c7      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002942:	4b3b      	ldr	r3, [pc, #236]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4937      	ldr	r1, [pc, #220]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002952:	4313      	orrs	r3, r2
 8002954:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002956:	e03a      	b.n	80029ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d020      	beq.n	80029a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002960:	4b34      	ldr	r3, [pc, #208]	@ (8002a34 <HAL_RCC_OscConfig+0x244>)
 8002962:	2201      	movs	r2, #1
 8002964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002966:	f7fe faed 	bl	8000f44 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800296e:	f7fe fae9 	bl	8000f44 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e1a8      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002980:	4b2b      	ldr	r3, [pc, #172]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298c:	4b28      	ldr	r3, [pc, #160]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4925      	ldr	r1, [pc, #148]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 800299c:	4313      	orrs	r3, r2
 800299e:	600b      	str	r3, [r1, #0]
 80029a0:	e015      	b.n	80029ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029a2:	4b24      	ldr	r3, [pc, #144]	@ (8002a34 <HAL_RCC_OscConfig+0x244>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7fe facc 	bl	8000f44 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b0:	f7fe fac8 	bl	8000f44 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e187      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d036      	beq.n	8002a48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d016      	beq.n	8002a10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e2:	4b15      	ldr	r3, [pc, #84]	@ (8002a38 <HAL_RCC_OscConfig+0x248>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e8:	f7fe faac 	bl	8000f44 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f0:	f7fe faa8 	bl	8000f44 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e167      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a02:	4b0b      	ldr	r3, [pc, #44]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002a04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0x200>
 8002a0e:	e01b      	b.n	8002a48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a10:	4b09      	ldr	r3, [pc, #36]	@ (8002a38 <HAL_RCC_OscConfig+0x248>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a16:	f7fe fa95 	bl	8000f44 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a1c:	e00e      	b.n	8002a3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a1e:	f7fe fa91 	bl	8000f44 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d907      	bls.n	8002a3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e150      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
 8002a30:	40023800 	.word	0x40023800
 8002a34:	42470000 	.word	0x42470000
 8002a38:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a3c:	4b88      	ldr	r3, [pc, #544]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002a3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1ea      	bne.n	8002a1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 8097 	beq.w	8002b84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a56:	2300      	movs	r3, #0
 8002a58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a5a:	4b81      	ldr	r3, [pc, #516]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10f      	bne.n	8002a86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	4b7d      	ldr	r3, [pc, #500]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6e:	4a7c      	ldr	r2, [pc, #496]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002a70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a74:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a76:	4b7a      	ldr	r3, [pc, #488]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a7e:	60bb      	str	r3, [r7, #8]
 8002a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a82:	2301      	movs	r3, #1
 8002a84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a86:	4b77      	ldr	r3, [pc, #476]	@ (8002c64 <HAL_RCC_OscConfig+0x474>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d118      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a92:	4b74      	ldr	r3, [pc, #464]	@ (8002c64 <HAL_RCC_OscConfig+0x474>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a73      	ldr	r2, [pc, #460]	@ (8002c64 <HAL_RCC_OscConfig+0x474>)
 8002a98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a9e:	f7fe fa51 	bl	8000f44 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa6:	f7fe fa4d 	bl	8000f44 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e10c      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab8:	4b6a      	ldr	r3, [pc, #424]	@ (8002c64 <HAL_RCC_OscConfig+0x474>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0f0      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d106      	bne.n	8002ada <HAL_RCC_OscConfig+0x2ea>
 8002acc:	4b64      	ldr	r3, [pc, #400]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad0:	4a63      	ldr	r2, [pc, #396]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ad8:	e01c      	b.n	8002b14 <HAL_RCC_OscConfig+0x324>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b05      	cmp	r3, #5
 8002ae0:	d10c      	bne.n	8002afc <HAL_RCC_OscConfig+0x30c>
 8002ae2:	4b5f      	ldr	r3, [pc, #380]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae6:	4a5e      	ldr	r2, [pc, #376]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	f043 0304 	orr.w	r3, r3, #4
 8002aec:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aee:	4b5c      	ldr	r3, [pc, #368]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af2:	4a5b      	ldr	r2, [pc, #364]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002afa:	e00b      	b.n	8002b14 <HAL_RCC_OscConfig+0x324>
 8002afc:	4b58      	ldr	r3, [pc, #352]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b00:	4a57      	ldr	r2, [pc, #348]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b02:	f023 0301 	bic.w	r3, r3, #1
 8002b06:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b08:	4b55      	ldr	r3, [pc, #340]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b0c:	4a54      	ldr	r2, [pc, #336]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b0e:	f023 0304 	bic.w	r3, r3, #4
 8002b12:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d015      	beq.n	8002b48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1c:	f7fe fa12 	bl	8000f44 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b22:	e00a      	b.n	8002b3a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b24:	f7fe fa0e 	bl	8000f44 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e0cb      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3a:	4b49      	ldr	r3, [pc, #292]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0ee      	beq.n	8002b24 <HAL_RCC_OscConfig+0x334>
 8002b46:	e014      	b.n	8002b72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b48:	f7fe f9fc 	bl	8000f44 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b4e:	e00a      	b.n	8002b66 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b50:	f7fe f9f8 	bl	8000f44 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e0b5      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b66:	4b3e      	ldr	r3, [pc, #248]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1ee      	bne.n	8002b50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d105      	bne.n	8002b84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b78:	4b39      	ldr	r3, [pc, #228]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7c:	4a38      	ldr	r2, [pc, #224]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b82:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 80a1 	beq.w	8002cd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b8e:	4b34      	ldr	r3, [pc, #208]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d05c      	beq.n	8002c54 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d141      	bne.n	8002c26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba2:	4b31      	ldr	r3, [pc, #196]	@ (8002c68 <HAL_RCC_OscConfig+0x478>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba8:	f7fe f9cc 	bl	8000f44 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb0:	f7fe f9c8 	bl	8000f44 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e087      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc2:	4b27      	ldr	r3, [pc, #156]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69da      	ldr	r2, [r3, #28]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bdc:	019b      	lsls	r3, r3, #6
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be4:	085b      	lsrs	r3, r3, #1
 8002be6:	3b01      	subs	r3, #1
 8002be8:	041b      	lsls	r3, r3, #16
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf0:	061b      	lsls	r3, r3, #24
 8002bf2:	491b      	ldr	r1, [pc, #108]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c68 <HAL_RCC_OscConfig+0x478>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfe:	f7fe f9a1 	bl	8000f44 <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c06:	f7fe f99d 	bl	8000f44 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e05c      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c18:	4b11      	ldr	r3, [pc, #68]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0f0      	beq.n	8002c06 <HAL_RCC_OscConfig+0x416>
 8002c24:	e054      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c26:	4b10      	ldr	r3, [pc, #64]	@ (8002c68 <HAL_RCC_OscConfig+0x478>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2c:	f7fe f98a 	bl	8000f44 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c34:	f7fe f986 	bl	8000f44 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e045      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c46:	4b06      	ldr	r3, [pc, #24]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f0      	bne.n	8002c34 <HAL_RCC_OscConfig+0x444>
 8002c52:	e03d      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d107      	bne.n	8002c6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e038      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40007000 	.word	0x40007000
 8002c68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cdc <HAL_RCC_OscConfig+0x4ec>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d028      	beq.n	8002ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d121      	bne.n	8002ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d11a      	bne.n	8002ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ca2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d111      	bne.n	8002ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb2:	085b      	lsrs	r3, r3, #1
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d107      	bne.n	8002ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d001      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e000      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40023800 	.word	0x40023800

08002ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0cc      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf4:	4b68      	ldr	r3, [pc, #416]	@ (8002e98 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d90c      	bls.n	8002d1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d02:	4b65      	ldr	r3, [pc, #404]	@ (8002e98 <HAL_RCC_ClockConfig+0x1b8>)
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0a:	4b63      	ldr	r3, [pc, #396]	@ (8002e98 <HAL_RCC_ClockConfig+0x1b8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0b8      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d020      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d34:	4b59      	ldr	r3, [pc, #356]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	4a58      	ldr	r2, [pc, #352]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d4c:	4b53      	ldr	r3, [pc, #332]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	4a52      	ldr	r2, [pc, #328]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d58:	4b50      	ldr	r3, [pc, #320]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	494d      	ldr	r1, [pc, #308]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d044      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d107      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7e:	4b47      	ldr	r3, [pc, #284]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d119      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e07f      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d003      	beq.n	8002d9e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	d107      	bne.n	8002dae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d109      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e06f      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dae:	4b3b      	ldr	r3, [pc, #236]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e067      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dbe:	4b37      	ldr	r3, [pc, #220]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f023 0203 	bic.w	r2, r3, #3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	4934      	ldr	r1, [pc, #208]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dd0:	f7fe f8b8 	bl	8000f44 <HAL_GetTick>
 8002dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd6:	e00a      	b.n	8002dee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd8:	f7fe f8b4 	bl	8000f44 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e04f      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dee:	4b2b      	ldr	r3, [pc, #172]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 020c 	and.w	r2, r3, #12
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d1eb      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e00:	4b25      	ldr	r3, [pc, #148]	@ (8002e98 <HAL_RCC_ClockConfig+0x1b8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d20c      	bcs.n	8002e28 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0e:	4b22      	ldr	r3, [pc, #136]	@ (8002e98 <HAL_RCC_ClockConfig+0x1b8>)
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e16:	4b20      	ldr	r3, [pc, #128]	@ (8002e98 <HAL_RCC_ClockConfig+0x1b8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d001      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e032      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d008      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e34:	4b19      	ldr	r3, [pc, #100]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4916      	ldr	r1, [pc, #88]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d009      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e52:	4b12      	ldr	r3, [pc, #72]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	490e      	ldr	r1, [pc, #56]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e66:	f000 f821 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	091b      	lsrs	r3, r3, #4
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	490a      	ldr	r1, [pc, #40]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e78:	5ccb      	ldrb	r3, [r1, r3]
 8002e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7e:	4a09      	ldr	r2, [pc, #36]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e82:	4b09      	ldr	r3, [pc, #36]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fe f818 	bl	8000ebc <HAL_InitTick>

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40023c00 	.word	0x40023c00
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	080066e0 	.word	0x080066e0
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	20000004 	.word	0x20000004

08002eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb0:	b094      	sub	sp, #80	@ 0x50
 8002eb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ec4:	4b79      	ldr	r3, [pc, #484]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 030c 	and.w	r3, r3, #12
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d00d      	beq.n	8002eec <HAL_RCC_GetSysClockFreq+0x40>
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	f200 80e1 	bhi.w	8003098 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x34>
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d003      	beq.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ede:	e0db      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ee0:	4b73      	ldr	r3, [pc, #460]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ee4:	e0db      	b.n	800309e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ee6:	4b73      	ldr	r3, [pc, #460]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002eea:	e0d8      	b.n	800309e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eec:	4b6f      	ldr	r3, [pc, #444]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ef4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ef6:	4b6d      	ldr	r3, [pc, #436]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d063      	beq.n	8002fca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f02:	4b6a      	ldr	r3, [pc, #424]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	099b      	lsrs	r3, r3, #6
 8002f08:	2200      	movs	r2, #0
 8002f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f14:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f16:	2300      	movs	r3, #0
 8002f18:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f1e:	4622      	mov	r2, r4
 8002f20:	462b      	mov	r3, r5
 8002f22:	f04f 0000 	mov.w	r0, #0
 8002f26:	f04f 0100 	mov.w	r1, #0
 8002f2a:	0159      	lsls	r1, r3, #5
 8002f2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f30:	0150      	lsls	r0, r2, #5
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4621      	mov	r1, r4
 8002f38:	1a51      	subs	r1, r2, r1
 8002f3a:	6139      	str	r1, [r7, #16]
 8002f3c:	4629      	mov	r1, r5
 8002f3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	f04f 0300 	mov.w	r3, #0
 8002f4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f50:	4659      	mov	r1, fp
 8002f52:	018b      	lsls	r3, r1, #6
 8002f54:	4651      	mov	r1, sl
 8002f56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f5a:	4651      	mov	r1, sl
 8002f5c:	018a      	lsls	r2, r1, #6
 8002f5e:	4651      	mov	r1, sl
 8002f60:	ebb2 0801 	subs.w	r8, r2, r1
 8002f64:	4659      	mov	r1, fp
 8002f66:	eb63 0901 	sbc.w	r9, r3, r1
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f7e:	4690      	mov	r8, r2
 8002f80:	4699      	mov	r9, r3
 8002f82:	4623      	mov	r3, r4
 8002f84:	eb18 0303 	adds.w	r3, r8, r3
 8002f88:	60bb      	str	r3, [r7, #8]
 8002f8a:	462b      	mov	r3, r5
 8002f8c:	eb49 0303 	adc.w	r3, r9, r3
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f9e:	4629      	mov	r1, r5
 8002fa0:	024b      	lsls	r3, r1, #9
 8002fa2:	4621      	mov	r1, r4
 8002fa4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fa8:	4621      	mov	r1, r4
 8002faa:	024a      	lsls	r2, r1, #9
 8002fac:	4610      	mov	r0, r2
 8002fae:	4619      	mov	r1, r3
 8002fb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002fbc:	f7fd f958 	bl	8000270 <__aeabi_uldivmod>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fc8:	e058      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fca:	4b38      	ldr	r3, [pc, #224]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	099b      	lsrs	r3, r3, #6
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fda:	623b      	str	r3, [r7, #32]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fe0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fe4:	4642      	mov	r2, r8
 8002fe6:	464b      	mov	r3, r9
 8002fe8:	f04f 0000 	mov.w	r0, #0
 8002fec:	f04f 0100 	mov.w	r1, #0
 8002ff0:	0159      	lsls	r1, r3, #5
 8002ff2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ff6:	0150      	lsls	r0, r2, #5
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4641      	mov	r1, r8
 8002ffe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003002:	4649      	mov	r1, r9
 8003004:	eb63 0b01 	sbc.w	fp, r3, r1
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003014:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003018:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800301c:	ebb2 040a 	subs.w	r4, r2, sl
 8003020:	eb63 050b 	sbc.w	r5, r3, fp
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	00eb      	lsls	r3, r5, #3
 800302e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003032:	00e2      	lsls	r2, r4, #3
 8003034:	4614      	mov	r4, r2
 8003036:	461d      	mov	r5, r3
 8003038:	4643      	mov	r3, r8
 800303a:	18e3      	adds	r3, r4, r3
 800303c:	603b      	str	r3, [r7, #0]
 800303e:	464b      	mov	r3, r9
 8003040:	eb45 0303 	adc.w	r3, r5, r3
 8003044:	607b      	str	r3, [r7, #4]
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	f04f 0300 	mov.w	r3, #0
 800304e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003052:	4629      	mov	r1, r5
 8003054:	028b      	lsls	r3, r1, #10
 8003056:	4621      	mov	r1, r4
 8003058:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800305c:	4621      	mov	r1, r4
 800305e:	028a      	lsls	r2, r1, #10
 8003060:	4610      	mov	r0, r2
 8003062:	4619      	mov	r1, r3
 8003064:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003066:	2200      	movs	r2, #0
 8003068:	61bb      	str	r3, [r7, #24]
 800306a:	61fa      	str	r2, [r7, #28]
 800306c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003070:	f7fd f8fe 	bl	8000270 <__aeabi_uldivmod>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4613      	mov	r3, r2
 800307a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800307c:	4b0b      	ldr	r3, [pc, #44]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x200>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	0c1b      	lsrs	r3, r3, #16
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	3301      	adds	r3, #1
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800308c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800308e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003090:	fbb2 f3f3 	udiv	r3, r2, r3
 8003094:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003096:	e002      	b.n	800309e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003098:	4b05      	ldr	r3, [pc, #20]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800309a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800309c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800309e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3750      	adds	r7, #80	@ 0x50
 80030a4:	46bd      	mov	sp, r7
 80030a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030aa:	bf00      	nop
 80030ac:	40023800 	.word	0x40023800
 80030b0:	00f42400 	.word	0x00f42400
 80030b4:	007a1200 	.word	0x007a1200

080030b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030bc:	4b03      	ldr	r3, [pc, #12]	@ (80030cc <HAL_RCC_GetHCLKFreq+0x14>)
 80030be:	681b      	ldr	r3, [r3, #0]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	20000000 	.word	0x20000000

080030d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030d4:	f7ff fff0 	bl	80030b8 <HAL_RCC_GetHCLKFreq>
 80030d8:	4602      	mov	r2, r0
 80030da:	4b05      	ldr	r3, [pc, #20]	@ (80030f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	0a9b      	lsrs	r3, r3, #10
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	4903      	ldr	r1, [pc, #12]	@ (80030f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030e6:	5ccb      	ldrb	r3, [r1, r3]
 80030e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40023800 	.word	0x40023800
 80030f4:	080066f0 	.word	0x080066f0

080030f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030fc:	f7ff ffdc 	bl	80030b8 <HAL_RCC_GetHCLKFreq>
 8003100:	4602      	mov	r2, r0
 8003102:	4b05      	ldr	r3, [pc, #20]	@ (8003118 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	0b5b      	lsrs	r3, r3, #13
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	4903      	ldr	r1, [pc, #12]	@ (800311c <HAL_RCC_GetPCLK2Freq+0x24>)
 800310e:	5ccb      	ldrb	r3, [r1, r3]
 8003110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003114:	4618      	mov	r0, r3
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40023800 	.word	0x40023800
 800311c:	080066f0 	.word	0x080066f0

08003120 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e042      	b.n	80031b8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d106      	bne.n	800314c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7fd fd5c 	bl	8000c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2224      	movs	r2, #36	@ 0x24
 8003150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003162:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f973 	bl	8003450 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003178:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695a      	ldr	r2, [r3, #20]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003188:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003198:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08a      	sub	sp, #40	@ 0x28
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	4613      	mov	r3, r2
 80031ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b20      	cmp	r3, #32
 80031de:	d175      	bne.n	80032cc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d002      	beq.n	80031ec <HAL_UART_Transmit+0x2c>
 80031e6:	88fb      	ldrh	r3, [r7, #6]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e06e      	b.n	80032ce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2221      	movs	r2, #33	@ 0x21
 80031fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031fe:	f7fd fea1 	bl	8000f44 <HAL_GetTick>
 8003202:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	88fa      	ldrh	r2, [r7, #6]
 8003208:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	88fa      	ldrh	r2, [r7, #6]
 800320e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003218:	d108      	bne.n	800322c <HAL_UART_Transmit+0x6c>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d104      	bne.n	800322c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003222:	2300      	movs	r3, #0
 8003224:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	61bb      	str	r3, [r7, #24]
 800322a:	e003      	b.n	8003234 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003230:	2300      	movs	r3, #0
 8003232:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003234:	e02e      	b.n	8003294 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2200      	movs	r2, #0
 800323e:	2180      	movs	r1, #128	@ 0x80
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 f848 	bl	80032d6 <UART_WaitOnFlagUntilTimeout>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2220      	movs	r2, #32
 8003250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e03a      	b.n	80032ce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10b      	bne.n	8003276 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	461a      	mov	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800326c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	3302      	adds	r3, #2
 8003272:	61bb      	str	r3, [r7, #24]
 8003274:	e007      	b.n	8003286 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	781a      	ldrb	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	3301      	adds	r3, #1
 8003284:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800328a:	b29b      	uxth	r3, r3
 800328c:	3b01      	subs	r3, #1
 800328e:	b29a      	uxth	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003298:	b29b      	uxth	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1cb      	bne.n	8003236 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	2200      	movs	r2, #0
 80032a6:	2140      	movs	r1, #64	@ 0x40
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 f814 	bl	80032d6 <UART_WaitOnFlagUntilTimeout>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e006      	b.n	80032ce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	e000      	b.n	80032ce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80032cc:	2302      	movs	r3, #2
  }
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3720      	adds	r7, #32
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b086      	sub	sp, #24
 80032da:	af00      	add	r7, sp, #0
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	603b      	str	r3, [r7, #0]
 80032e2:	4613      	mov	r3, r2
 80032e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032e6:	e03b      	b.n	8003360 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ee:	d037      	beq.n	8003360 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f0:	f7fd fe28 	bl	8000f44 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	6a3a      	ldr	r2, [r7, #32]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d302      	bcc.n	8003306 <UART_WaitOnFlagUntilTimeout+0x30>
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e03a      	b.n	8003380 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	d023      	beq.n	8003360 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2b80      	cmp	r3, #128	@ 0x80
 800331c:	d020      	beq.n	8003360 <UART_WaitOnFlagUntilTimeout+0x8a>
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2b40      	cmp	r3, #64	@ 0x40
 8003322:	d01d      	beq.n	8003360 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b08      	cmp	r3, #8
 8003330:	d116      	bne.n	8003360 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003332:	2300      	movs	r3, #0
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	617b      	str	r3, [r7, #20]
 8003346:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 f81d 	bl	8003388 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2208      	movs	r2, #8
 8003352:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e00f      	b.n	8003380 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	4013      	ands	r3, r2
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	429a      	cmp	r2, r3
 800336e:	bf0c      	ite	eq
 8003370:	2301      	moveq	r3, #1
 8003372:	2300      	movne	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	461a      	mov	r2, r3
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	429a      	cmp	r2, r3
 800337c:	d0b4      	beq.n	80032e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003388:	b480      	push	{r7}
 800338a:	b095      	sub	sp, #84	@ 0x54
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	330c      	adds	r3, #12
 8003396:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800339a:	e853 3f00 	ldrex	r3, [r3]
 800339e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80033a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	330c      	adds	r3, #12
 80033ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80033b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80033b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033b8:	e841 2300 	strex	r3, r2, [r1]
 80033bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80033be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1e5      	bne.n	8003390 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3314      	adds	r3, #20
 80033ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	e853 3f00 	ldrex	r3, [r3]
 80033d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f023 0301 	bic.w	r3, r3, #1
 80033da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	3314      	adds	r3, #20
 80033e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033ec:	e841 2300 	strex	r3, r2, [r1]
 80033f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1e5      	bne.n	80033c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d119      	bne.n	8003434 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	330c      	adds	r3, #12
 8003406:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	e853 3f00 	ldrex	r3, [r3]
 800340e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	f023 0310 	bic.w	r3, r3, #16
 8003416:	647b      	str	r3, [r7, #68]	@ 0x44
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	330c      	adds	r3, #12
 800341e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003420:	61ba      	str	r2, [r7, #24]
 8003422:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003424:	6979      	ldr	r1, [r7, #20]
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	e841 2300 	strex	r3, r2, [r1]
 800342c:	613b      	str	r3, [r7, #16]
   return(result);
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1e5      	bne.n	8003400 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2220      	movs	r2, #32
 8003438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003442:	bf00      	nop
 8003444:	3754      	adds	r7, #84	@ 0x54
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
	...

08003450 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003454:	b0c0      	sub	sp, #256	@ 0x100
 8003456:	af00      	add	r7, sp, #0
 8003458:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800346c:	68d9      	ldr	r1, [r3, #12]
 800346e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	ea40 0301 	orr.w	r3, r0, r1
 8003478:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800347a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	431a      	orrs	r2, r3
 8003488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	431a      	orrs	r2, r3
 8003490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800349c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80034a8:	f021 010c 	bic.w	r1, r1, #12
 80034ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80034b6:	430b      	orrs	r3, r1
 80034b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80034c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ca:	6999      	ldr	r1, [r3, #24]
 80034cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	ea40 0301 	orr.w	r3, r0, r1
 80034d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	4b8f      	ldr	r3, [pc, #572]	@ (800371c <UART_SetConfig+0x2cc>)
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d005      	beq.n	80034f0 <UART_SetConfig+0xa0>
 80034e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4b8d      	ldr	r3, [pc, #564]	@ (8003720 <UART_SetConfig+0x2d0>)
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d104      	bne.n	80034fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034f0:	f7ff fe02 	bl	80030f8 <HAL_RCC_GetPCLK2Freq>
 80034f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80034f8:	e003      	b.n	8003502 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034fa:	f7ff fde9 	bl	80030d0 <HAL_RCC_GetPCLK1Freq>
 80034fe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800350c:	f040 810c 	bne.w	8003728 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003510:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003514:	2200      	movs	r2, #0
 8003516:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800351a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800351e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003522:	4622      	mov	r2, r4
 8003524:	462b      	mov	r3, r5
 8003526:	1891      	adds	r1, r2, r2
 8003528:	65b9      	str	r1, [r7, #88]	@ 0x58
 800352a:	415b      	adcs	r3, r3
 800352c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800352e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003532:	4621      	mov	r1, r4
 8003534:	eb12 0801 	adds.w	r8, r2, r1
 8003538:	4629      	mov	r1, r5
 800353a:	eb43 0901 	adc.w	r9, r3, r1
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800354a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800354e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003552:	4690      	mov	r8, r2
 8003554:	4699      	mov	r9, r3
 8003556:	4623      	mov	r3, r4
 8003558:	eb18 0303 	adds.w	r3, r8, r3
 800355c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003560:	462b      	mov	r3, r5
 8003562:	eb49 0303 	adc.w	r3, r9, r3
 8003566:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800356a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003576:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800357a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800357e:	460b      	mov	r3, r1
 8003580:	18db      	adds	r3, r3, r3
 8003582:	653b      	str	r3, [r7, #80]	@ 0x50
 8003584:	4613      	mov	r3, r2
 8003586:	eb42 0303 	adc.w	r3, r2, r3
 800358a:	657b      	str	r3, [r7, #84]	@ 0x54
 800358c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003590:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003594:	f7fc fe6c 	bl	8000270 <__aeabi_uldivmod>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4b61      	ldr	r3, [pc, #388]	@ (8003724 <UART_SetConfig+0x2d4>)
 800359e:	fba3 2302 	umull	r2, r3, r3, r2
 80035a2:	095b      	lsrs	r3, r3, #5
 80035a4:	011c      	lsls	r4, r3, #4
 80035a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035aa:	2200      	movs	r2, #0
 80035ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80035b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80035b8:	4642      	mov	r2, r8
 80035ba:	464b      	mov	r3, r9
 80035bc:	1891      	adds	r1, r2, r2
 80035be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80035c0:	415b      	adcs	r3, r3
 80035c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80035c8:	4641      	mov	r1, r8
 80035ca:	eb12 0a01 	adds.w	sl, r2, r1
 80035ce:	4649      	mov	r1, r9
 80035d0:	eb43 0b01 	adc.w	fp, r3, r1
 80035d4:	f04f 0200 	mov.w	r2, #0
 80035d8:	f04f 0300 	mov.w	r3, #0
 80035dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035e8:	4692      	mov	sl, r2
 80035ea:	469b      	mov	fp, r3
 80035ec:	4643      	mov	r3, r8
 80035ee:	eb1a 0303 	adds.w	r3, sl, r3
 80035f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035f6:	464b      	mov	r3, r9
 80035f8:	eb4b 0303 	adc.w	r3, fp, r3
 80035fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800360c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003610:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003614:	460b      	mov	r3, r1
 8003616:	18db      	adds	r3, r3, r3
 8003618:	643b      	str	r3, [r7, #64]	@ 0x40
 800361a:	4613      	mov	r3, r2
 800361c:	eb42 0303 	adc.w	r3, r2, r3
 8003620:	647b      	str	r3, [r7, #68]	@ 0x44
 8003622:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003626:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800362a:	f7fc fe21 	bl	8000270 <__aeabi_uldivmod>
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	4611      	mov	r1, r2
 8003634:	4b3b      	ldr	r3, [pc, #236]	@ (8003724 <UART_SetConfig+0x2d4>)
 8003636:	fba3 2301 	umull	r2, r3, r3, r1
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	2264      	movs	r2, #100	@ 0x64
 800363e:	fb02 f303 	mul.w	r3, r2, r3
 8003642:	1acb      	subs	r3, r1, r3
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800364a:	4b36      	ldr	r3, [pc, #216]	@ (8003724 <UART_SetConfig+0x2d4>)
 800364c:	fba3 2302 	umull	r2, r3, r3, r2
 8003650:	095b      	lsrs	r3, r3, #5
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003658:	441c      	add	r4, r3
 800365a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800365e:	2200      	movs	r2, #0
 8003660:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003664:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003668:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800366c:	4642      	mov	r2, r8
 800366e:	464b      	mov	r3, r9
 8003670:	1891      	adds	r1, r2, r2
 8003672:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003674:	415b      	adcs	r3, r3
 8003676:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003678:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800367c:	4641      	mov	r1, r8
 800367e:	1851      	adds	r1, r2, r1
 8003680:	6339      	str	r1, [r7, #48]	@ 0x30
 8003682:	4649      	mov	r1, r9
 8003684:	414b      	adcs	r3, r1
 8003686:	637b      	str	r3, [r7, #52]	@ 0x34
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003694:	4659      	mov	r1, fp
 8003696:	00cb      	lsls	r3, r1, #3
 8003698:	4651      	mov	r1, sl
 800369a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800369e:	4651      	mov	r1, sl
 80036a0:	00ca      	lsls	r2, r1, #3
 80036a2:	4610      	mov	r0, r2
 80036a4:	4619      	mov	r1, r3
 80036a6:	4603      	mov	r3, r0
 80036a8:	4642      	mov	r2, r8
 80036aa:	189b      	adds	r3, r3, r2
 80036ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036b0:	464b      	mov	r3, r9
 80036b2:	460a      	mov	r2, r1
 80036b4:	eb42 0303 	adc.w	r3, r2, r3
 80036b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80036c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80036cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80036d0:	460b      	mov	r3, r1
 80036d2:	18db      	adds	r3, r3, r3
 80036d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036d6:	4613      	mov	r3, r2
 80036d8:	eb42 0303 	adc.w	r3, r2, r3
 80036dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80036e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80036e6:	f7fc fdc3 	bl	8000270 <__aeabi_uldivmod>
 80036ea:	4602      	mov	r2, r0
 80036ec:	460b      	mov	r3, r1
 80036ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003724 <UART_SetConfig+0x2d4>)
 80036f0:	fba3 1302 	umull	r1, r3, r3, r2
 80036f4:	095b      	lsrs	r3, r3, #5
 80036f6:	2164      	movs	r1, #100	@ 0x64
 80036f8:	fb01 f303 	mul.w	r3, r1, r3
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	3332      	adds	r3, #50	@ 0x32
 8003702:	4a08      	ldr	r2, [pc, #32]	@ (8003724 <UART_SetConfig+0x2d4>)
 8003704:	fba2 2303 	umull	r2, r3, r2, r3
 8003708:	095b      	lsrs	r3, r3, #5
 800370a:	f003 0207 	and.w	r2, r3, #7
 800370e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4422      	add	r2, r4
 8003716:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003718:	e106      	b.n	8003928 <UART_SetConfig+0x4d8>
 800371a:	bf00      	nop
 800371c:	40011000 	.word	0x40011000
 8003720:	40011400 	.word	0x40011400
 8003724:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003728:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800372c:	2200      	movs	r2, #0
 800372e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003732:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003736:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800373a:	4642      	mov	r2, r8
 800373c:	464b      	mov	r3, r9
 800373e:	1891      	adds	r1, r2, r2
 8003740:	6239      	str	r1, [r7, #32]
 8003742:	415b      	adcs	r3, r3
 8003744:	627b      	str	r3, [r7, #36]	@ 0x24
 8003746:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800374a:	4641      	mov	r1, r8
 800374c:	1854      	adds	r4, r2, r1
 800374e:	4649      	mov	r1, r9
 8003750:	eb43 0501 	adc.w	r5, r3, r1
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	00eb      	lsls	r3, r5, #3
 800375e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003762:	00e2      	lsls	r2, r4, #3
 8003764:	4614      	mov	r4, r2
 8003766:	461d      	mov	r5, r3
 8003768:	4643      	mov	r3, r8
 800376a:	18e3      	adds	r3, r4, r3
 800376c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003770:	464b      	mov	r3, r9
 8003772:	eb45 0303 	adc.w	r3, r5, r3
 8003776:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800377a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003786:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003796:	4629      	mov	r1, r5
 8003798:	008b      	lsls	r3, r1, #2
 800379a:	4621      	mov	r1, r4
 800379c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037a0:	4621      	mov	r1, r4
 80037a2:	008a      	lsls	r2, r1, #2
 80037a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80037a8:	f7fc fd62 	bl	8000270 <__aeabi_uldivmod>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	4b60      	ldr	r3, [pc, #384]	@ (8003934 <UART_SetConfig+0x4e4>)
 80037b2:	fba3 2302 	umull	r2, r3, r3, r2
 80037b6:	095b      	lsrs	r3, r3, #5
 80037b8:	011c      	lsls	r4, r3, #4
 80037ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037be:	2200      	movs	r2, #0
 80037c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80037c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80037c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80037cc:	4642      	mov	r2, r8
 80037ce:	464b      	mov	r3, r9
 80037d0:	1891      	adds	r1, r2, r2
 80037d2:	61b9      	str	r1, [r7, #24]
 80037d4:	415b      	adcs	r3, r3
 80037d6:	61fb      	str	r3, [r7, #28]
 80037d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037dc:	4641      	mov	r1, r8
 80037de:	1851      	adds	r1, r2, r1
 80037e0:	6139      	str	r1, [r7, #16]
 80037e2:	4649      	mov	r1, r9
 80037e4:	414b      	adcs	r3, r1
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037f4:	4659      	mov	r1, fp
 80037f6:	00cb      	lsls	r3, r1, #3
 80037f8:	4651      	mov	r1, sl
 80037fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037fe:	4651      	mov	r1, sl
 8003800:	00ca      	lsls	r2, r1, #3
 8003802:	4610      	mov	r0, r2
 8003804:	4619      	mov	r1, r3
 8003806:	4603      	mov	r3, r0
 8003808:	4642      	mov	r2, r8
 800380a:	189b      	adds	r3, r3, r2
 800380c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003810:	464b      	mov	r3, r9
 8003812:	460a      	mov	r2, r1
 8003814:	eb42 0303 	adc.w	r3, r2, r3
 8003818:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800381c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003826:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003834:	4649      	mov	r1, r9
 8003836:	008b      	lsls	r3, r1, #2
 8003838:	4641      	mov	r1, r8
 800383a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800383e:	4641      	mov	r1, r8
 8003840:	008a      	lsls	r2, r1, #2
 8003842:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003846:	f7fc fd13 	bl	8000270 <__aeabi_uldivmod>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	4611      	mov	r1, r2
 8003850:	4b38      	ldr	r3, [pc, #224]	@ (8003934 <UART_SetConfig+0x4e4>)
 8003852:	fba3 2301 	umull	r2, r3, r3, r1
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	2264      	movs	r2, #100	@ 0x64
 800385a:	fb02 f303 	mul.w	r3, r2, r3
 800385e:	1acb      	subs	r3, r1, r3
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	3332      	adds	r3, #50	@ 0x32
 8003864:	4a33      	ldr	r2, [pc, #204]	@ (8003934 <UART_SetConfig+0x4e4>)
 8003866:	fba2 2303 	umull	r2, r3, r2, r3
 800386a:	095b      	lsrs	r3, r3, #5
 800386c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003870:	441c      	add	r4, r3
 8003872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003876:	2200      	movs	r2, #0
 8003878:	673b      	str	r3, [r7, #112]	@ 0x70
 800387a:	677a      	str	r2, [r7, #116]	@ 0x74
 800387c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003880:	4642      	mov	r2, r8
 8003882:	464b      	mov	r3, r9
 8003884:	1891      	adds	r1, r2, r2
 8003886:	60b9      	str	r1, [r7, #8]
 8003888:	415b      	adcs	r3, r3
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003890:	4641      	mov	r1, r8
 8003892:	1851      	adds	r1, r2, r1
 8003894:	6039      	str	r1, [r7, #0]
 8003896:	4649      	mov	r1, r9
 8003898:	414b      	adcs	r3, r1
 800389a:	607b      	str	r3, [r7, #4]
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038a8:	4659      	mov	r1, fp
 80038aa:	00cb      	lsls	r3, r1, #3
 80038ac:	4651      	mov	r1, sl
 80038ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038b2:	4651      	mov	r1, sl
 80038b4:	00ca      	lsls	r2, r1, #3
 80038b6:	4610      	mov	r0, r2
 80038b8:	4619      	mov	r1, r3
 80038ba:	4603      	mov	r3, r0
 80038bc:	4642      	mov	r2, r8
 80038be:	189b      	adds	r3, r3, r2
 80038c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038c2:	464b      	mov	r3, r9
 80038c4:	460a      	mov	r2, r1
 80038c6:	eb42 0303 	adc.w	r3, r2, r3
 80038ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80038cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80038d6:	667a      	str	r2, [r7, #100]	@ 0x64
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80038e4:	4649      	mov	r1, r9
 80038e6:	008b      	lsls	r3, r1, #2
 80038e8:	4641      	mov	r1, r8
 80038ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038ee:	4641      	mov	r1, r8
 80038f0:	008a      	lsls	r2, r1, #2
 80038f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80038f6:	f7fc fcbb 	bl	8000270 <__aeabi_uldivmod>
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003934 <UART_SetConfig+0x4e4>)
 8003900:	fba3 1302 	umull	r1, r3, r3, r2
 8003904:	095b      	lsrs	r3, r3, #5
 8003906:	2164      	movs	r1, #100	@ 0x64
 8003908:	fb01 f303 	mul.w	r3, r1, r3
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	3332      	adds	r3, #50	@ 0x32
 8003912:	4a08      	ldr	r2, [pc, #32]	@ (8003934 <UART_SetConfig+0x4e4>)
 8003914:	fba2 2303 	umull	r2, r3, r2, r3
 8003918:	095b      	lsrs	r3, r3, #5
 800391a:	f003 020f 	and.w	r2, r3, #15
 800391e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4422      	add	r2, r4
 8003926:	609a      	str	r2, [r3, #8]
}
 8003928:	bf00      	nop
 800392a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800392e:	46bd      	mov	sp, r7
 8003930:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003934:	51eb851f 	.word	0x51eb851f

08003938 <_vl53l5cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	4608      	mov	r0, r1
 8003942:	4611      	mov	r1, r2
 8003944:	461a      	mov	r2, r3
 8003946:	4603      	mov	r3, r0
 8003948:	70fb      	strb	r3, [r7, #3]
 800394a:	460b      	mov	r3, r1
 800394c:	70bb      	strb	r3, [r7, #2]
 800394e:	4613      	mov	r3, r2
 8003950:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 8003956:	2300      	movs	r3, #0
 8003958:	73bb      	strb	r3, [r7, #14]

	do {
		status |= VL53L5CX_RdMulti(&(p_dev->platform), address,
 800395a:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
		status |= VL53L5CX_RdMulti(&(p_dev->platform), address,
 8003962:	78fb      	ldrb	r3, [r7, #3]
 8003964:	8839      	ldrh	r1, [r7, #0]
 8003966:	f7fd f867 	bl	8000a38 <VL53L5CX_RdMulti>
 800396a:	4603      	mov	r3, r0
 800396c:	461a      	mov	r2, r3
 800396e:	7bfb      	ldrb	r3, [r7, #15]
 8003970:	4313      	orrs	r3, r2
 8003972:	73fb      	strb	r3, [r7, #15]
		status |= VL53L5CX_WaitMs(&(p_dev->platform), 10);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	210a      	movs	r1, #10
 8003978:	4618      	mov	r0, r3
 800397a:	f7fd f8c5 	bl	8000b08 <VL53L5CX_WaitMs>
 800397e:	4603      	mov	r3, r0
 8003980:	461a      	mov	r2, r3
 8003982:	7bfb      	ldrb	r3, [r7, #15]
 8003984:	4313      	orrs	r3, r2
 8003986:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 8003988:	7bbb      	ldrb	r3, [r7, #14]
 800398a:	2bc7      	cmp	r3, #199	@ 0xc7
 800398c:	d904      	bls.n	8003998 <_vl53l5cx_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53L5CX_STATUS_TIMEOUT_ERROR;
 800398e:	7bfb      	ldrb	r3, [r7, #15]
 8003990:	f043 0301 	orr.w	r3, r3, #1
 8003994:	73fb      	strb	r3, [r7, #15]
			break;
 8003996:	e01a      	b.n	80039ce <_vl53l5cx_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 8003998:	78fb      	ldrb	r3, [r7, #3]
 800399a:	2b03      	cmp	r3, #3
 800399c:	d909      	bls.n	80039b2 <_vl53l5cx_poll_for_answer+0x7a>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 3502 	ldrb.w	r3, [r3, #1282]	@ 0x502
 80039a4:	2b7e      	cmp	r3, #126	@ 0x7e
 80039a6:	d904      	bls.n	80039b2 <_vl53l5cx_poll_for_answer+0x7a>
		{
			status |= VL53L5CX_MCU_ERROR;
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
 80039aa:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80039ae:	73fb      	strb	r3, [r7, #15]
			break;
 80039b0:	e00d      	b.n	80039ce <_vl53l5cx_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 80039b2:	7bbb      	ldrb	r3, [r7, #14]
 80039b4:	3301      	adds	r3, #1
 80039b6:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 80039b8:	78bb      	ldrb	r3, [r7, #2]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	4413      	add	r3, r2
 80039be:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 80039c2:	7e3b      	ldrb	r3, [r7, #24]
 80039c4:	4013      	ands	r3, r2
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	7f3a      	ldrb	r2, [r7, #28]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d1c5      	bne.n	800395a <_vl53l5cx_poll_for_answer+0x22>

	return status;
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <_vl53l5cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l5cx_poll_for_mcu_boot(
              VL53L5CX_Configuration      *p_dev)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L5CX_STATUS_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	81bb      	strh	r3, [r7, #12]

   do {
		status |= VL53L5CX_RdByte(&(p_dev->platform), 0x06, &go2_status0);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f107 020b 	add.w	r2, r7, #11
 80039ee:	2106      	movs	r1, #6
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fc ffa5 	bl	8000940 <VL53L5CX_RdByte>
 80039f6:	4603      	mov	r3, r0
 80039f8:	461a      	mov	r2, r3
 80039fa:	7bfb      	ldrb	r3, [r7, #15]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 8003a00:	7afb      	ldrb	r3, [r7, #11]
 8003a02:	b25b      	sxtb	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	da10      	bge.n	8003a2a <_vl53l5cx_poll_for_mcu_boot+0x52>
			status |= VL53L5CX_RdByte(&(p_dev->platform), 0x07, &go2_status1);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f107 020a 	add.w	r2, r7, #10
 8003a0e:	2107      	movs	r1, #7
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fc ff95 	bl	8000940 <VL53L5CX_RdByte>
 8003a16:	4603      	mov	r3, r0
 8003a18:	461a      	mov	r2, r3
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	73fb      	strb	r3, [r7, #15]
			status |= go2_status1;
 8003a20:	7aba      	ldrb	r2, [r7, #10]
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	73fb      	strb	r3, [r7, #15]
			break;
 8003a28:	e012      	b.n	8003a50 <_vl53l5cx_poll_for_mcu_boot+0x78>
		}
		(void)VL53L5CX_WaitMs(&(p_dev->platform), 1);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fd f86a 	bl	8000b08 <VL53L5CX_WaitMs>
		timeout++;
 8003a34:	89bb      	ldrh	r3, [r7, #12]
 8003a36:	3301      	adds	r3, #1
 8003a38:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 8003a3a:	7afb      	ldrb	r3, [r7, #11]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d104      	bne.n	8003a4e <_vl53l5cx_poll_for_mcu_boot+0x76>
			break;
		}

	}while (timeout < (uint16_t)500);
 8003a44:	89bb      	ldrh	r3, [r7, #12]
 8003a46:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003a4a:	d3cd      	bcc.n	80039e8 <_vl53l5cx_poll_for_mcu_boot+0x10>
 8003a4c:	e000      	b.n	8003a50 <_vl53l5cx_poll_for_mcu_boot+0x78>
			break;
 8003a4e:	bf00      	nop

   return status;
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <_vl53l5cx_send_offset_data>:
 */

static uint8_t _vl53l5cx_send_offset_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b0ea      	sub	sp, #424	@ 0x1a8
 8003a60:	af02      	add	r7, sp, #8
 8003a62:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003a66:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003a6a:	6018      	str	r0, [r3, #0]
 8003a6c:	460a      	mov	r2, r1
 8003a6e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003a72:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8003a76:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 8003a7e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003a82:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003a86:	4ad9      	ldr	r2, [pc, #868]	@ (8003dec <_vl53l5cx_send_offset_data+0x390>)
 8003a88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a8c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 8003a90:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003a94:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003a98:	4ad5      	ldr	r2, [pc, #852]	@ (8003df0 <_vl53l5cx_send_offset_data+0x394>)
 8003a9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a9e:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 8003aa2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003aa6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f503 60a0 	add.w	r0, r3, #1280	@ 0x500
               p_dev->offset_data, VL53L5CX_OFFSET_BUFFER_SIZE);
 8003ab0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003ab4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3310      	adds	r3, #16
	(void)memcpy(p_dev->temp_buffer,
 8003abc:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	f001 fffc 	bl	8005abe <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4){
 8003ac6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003aca:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b10      	cmp	r3, #16
 8003ad2:	f040 8122 	bne.w	8003d1a <_vl53l5cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 8003ad6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003ada:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 8003ae4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003ae8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003aec:	cb03      	ldmia	r3!, {r0, r1}
 8003aee:	6010      	str	r0, [r2, #0]
 8003af0:	6051      	str	r1, [r2, #4]
		VL53L5CX_SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 8003af2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003af6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b00:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fc ffc9 	bl	8000a9c <VL53L5CX_SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 8003b0a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003b0e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f203 513c 	addw	r1, r3, #1340	@ 0x53c
 8003b18:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8003b1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b20:	4618      	mov	r0, r3
 8003b22:	f001 ffcc 	bl	8005abe <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 8003b26:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003b2a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f503 61c8 	add.w	r1, r3, #1600	@ 0x640
 8003b34:	f107 0318 	add.w	r3, r7, #24
 8003b38:	2280      	movs	r2, #128	@ 0x80
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f001 ffbf 	bl	8005abe <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 8003b40:	2300      	movs	r3, #0
 8003b42:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 8003b46:	e0ac      	b.n	8003ca2 <_vl53l5cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 8003b4e:	e09c      	b.n	8003c8a <_vl53l5cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 8003b50:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8003b54:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	005a      	lsls	r2, r3, #1
 8003b5e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003b62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 8003b6a:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8003b6e:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	440b      	add	r3, r1
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	1c59      	adds	r1, r3, #1
 8003b7a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003b7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003b86:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 8003b88:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8003b8c:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	440b      	add	r3, r1
 8003b94:	3304      	adds	r3, #4
 8003b96:	0059      	lsls	r1, r3, #1
 8003b98:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003b9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ba0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003ba4:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 8003ba6:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8003baa:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	440b      	add	r3, r1
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	f103 0109 	add.w	r1, r3, #9
 8003bb8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003bbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003bc0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003bc4:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8003bc6:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8003bca:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8003bce:	0092      	lsls	r2, r2, #2
 8003bd0:	440a      	add	r2, r1
                                  /(uint32_t)4;
 8003bd2:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8003bd4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003bd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 8003be0:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8003be4:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	4413      	add	r3, r2
 8003bec:	005a      	lsls	r2, r3, #1
 8003bee:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003bf2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003bf6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003bfa:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 8003bfc:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8003c00:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	4413      	add	r3, r2
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003c10:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003c14:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003c18:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 8003c1a:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8003c1e:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8003c22:	00d2      	lsls	r2, r2, #3
 8003c24:	440a      	add	r2, r1
 8003c26:	3204      	adds	r2, #4
 8003c28:	0051      	lsls	r1, r2, #1
 8003c2a:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8003c2e:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8003c32:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8003c36:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8003c38:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8003c3c:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8003c40:	00d2      	lsls	r2, r2, #3
 8003c42:	440a      	add	r2, r1
 8003c44:	0052      	lsls	r2, r2, #1
 8003c46:	f102 0109 	add.w	r1, r2, #9
 8003c4a:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8003c4e:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8003c52:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8003c56:	4413      	add	r3, r2
                                  /(int16_t)4;
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	da00      	bge.n	8003c5e <_vl53l5cx_send_offset_data+0x202>
 8003c5c:	3303      	adds	r3, #3
 8003c5e:	109b      	asrs	r3, r3, #2
 8003c60:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 8003c62:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8003c66:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	441a      	add	r2, r3
 8003c6e:	b209      	sxth	r1, r1
 8003c70:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003c74:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003c78:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 8003c7c:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	3301      	adds	r3, #1
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 8003c8a:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	f77f af5e 	ble.w	8003b50 <_vl53l5cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 8003c94:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 8003ca2:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	f77f af4e 	ble.w	8003b48 <_vl53l5cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 8003cac:	f107 0318 	add.w	r3, r7, #24
 8003cb0:	3320      	adds	r3, #32
 8003cb2:	2260      	movs	r2, #96	@ 0x60
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f001 fe86 	bl	80059c8 <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 8003cbc:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8003cc0:	3340      	adds	r3, #64	@ 0x40
 8003cc2:	22c0      	movs	r2, #192	@ 0xc0
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f001 fe7e 	bl	80059c8 <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 8003ccc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003cd0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f203 533c 	addw	r3, r3, #1340	@ 0x53c
 8003cda:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8003cde:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f001 feeb 	bl	8005abe <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 8003ce8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003cec:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 8003cf6:	f107 0118 	add.w	r1, r7, #24
 8003cfa:	2280      	movs	r2, #128	@ 0x80
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f001 fede 	bl	8005abe <memcpy>
		range_grid, sizeof(range_grid));
            VL53L5CX_SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 8003d02:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003d06:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d10:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fc fec1 	bl	8000a9c <VL53L5CX_SwapBuffer>
	}

	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 8003d20:	e01b      	b.n	8003d5a <_vl53l5cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 8003d22:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8003d26:	f103 0208 	add.w	r2, r3, #8
 8003d2a:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8003d2e:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 8003d32:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 8003d36:	6809      	ldr	r1, [r1, #0]
 8003d38:	440a      	add	r2, r1
 8003d3a:	f892 1500 	ldrb.w	r1, [r2, #1280]	@ 0x500
 8003d3e:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8003d42:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 8003d46:	6812      	ldr	r2, [r2, #0]
 8003d48:	4413      	add	r3, r2
 8003d4a:	460a      	mov	r2, r1
 8003d4c:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8003d50:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8003d54:	3301      	adds	r3, #1
 8003d56:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 8003d5a:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8003d5e:	f5b3 7ff2 	cmp.w	r3, #484	@ 0x1e4
 8003d62:	d3de      	bcc.n	8003d22 <_vl53l5cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 8003d64:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003d68:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f503 62dc 	add.w	r2, r3, #1760	@ 0x6e0
 8003d72:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003d76:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003d7a:	cb03      	ldmia	r3!, {r0, r1}
 8003d7c:	6010      	str	r0, [r2, #0]
 8003d7e:	6051      	str	r1, [r2, #4]
	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 8003d80:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003d84:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003d88:	6818      	ldr	r0, [r3, #0]
 8003d8a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003d8e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 8003d98:	f44f 73f4 	mov.w	r3, #488	@ 0x1e8
 8003d9c:	f642 6118 	movw	r1, #11800	@ 0x2e18
 8003da0:	f7fc fe2a 	bl	80009f8 <VL53L5CX_WrMulti>
 8003da4:	4603      	mov	r3, r0
 8003da6:	461a      	mov	r2, r3
 8003da8:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8003db2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003db6:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 8003dba:	2303      	movs	r3, #3
 8003dbc:	9301      	str	r3, [sp, #4]
 8003dbe:	23ff      	movs	r3, #255	@ 0xff
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	2104      	movs	r1, #4
 8003dca:	6800      	ldr	r0, [r0, #0]
 8003dcc:	f7ff fdb4 	bl	8003938 <_vl53l5cx_poll_for_answer>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8003dde:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	08006674 	.word	0x08006674
 8003df0:	0800667c 	.word	0x0800667c

08003df4 <_vl53l5cx_send_xtalk_data>:
 */

static uint8_t _vl53l5cx_send_xtalk_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b0ca      	sub	sp, #296	@ 0x128
 8003df8:	af02      	add	r7, sp, #8
 8003dfa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003dfe:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003e02:	6018      	str	r0, [r3, #0]
 8003e04:	460a      	mov	r2, r1
 8003e06:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003e0a:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8003e0e:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8003e10:	2300      	movs	r3, #0
 8003e12:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 8003e16:	4a9a      	ldr	r2, [pc, #616]	@ (8004080 <_vl53l5cx_send_xtalk_data+0x28c>)
 8003e18:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8003e1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e20:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 8003e24:	4a97      	ldr	r2, [pc, #604]	@ (8004084 <_vl53l5cx_send_xtalk_data+0x290>)
 8003e26:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003e2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e2e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 8003e32:	4b95      	ldr	r3, [pc, #596]	@ (8004088 <_vl53l5cx_send_xtalk_data+0x294>)
 8003e34:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8003e38:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003e3c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f503 60a0 	add.w	r0, r3, #1280	@ 0x500
 8003e46:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003e4a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003e54:	f44f 7242 	mov.w	r2, #776	@ 0x308
 8003e58:	4619      	mov	r1, r3
 8003e5a:	f001 fe30 	bl	8005abe <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4)
 8003e5e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003e62:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b10      	cmp	r3, #16
 8003e6a:	f040 80d2 	bne.w	8004012 <_vl53l5cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 8003e6e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003e72:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8003e82:	cb03      	ldmia	r3!, {r0, r1}
 8003e84:	6010      	str	r0, [r2, #0]
 8003e86:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 8003e88:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003e8c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
 8003e96:	461a      	mov	r2, r3
 8003e98:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003e9c:	cb03      	ldmia	r3!, {r0, r1}
 8003e9e:	6010      	str	r0, [r2, #0]
 8003ea0:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		VL53L5CX_SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 8003ea2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003ea6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eb0:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fc fdf1 	bl	8000a9c <VL53L5CX_SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 8003eba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003ebe:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f203 5134 	addw	r1, r3, #1332	@ 0x534
 8003ec8:	f107 0308 	add.w	r3, r7, #8
 8003ecc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f001 fdf4 	bl	8005abe <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8003edc:	e05d      	b.n	8003f9a <_vl53l5cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8003ede:	2300      	movs	r3, #0
 8003ee0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8003ee4:	e04e      	b.n	8003f84 <_vl53l5cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 8003ee6:	f997 211f 	ldrsb.w	r2, [r7, #287]	@ 0x11f
 8003eea:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	4413      	add	r3, r2
 8003ef2:	005a      	lsls	r2, r3, #1
 8003ef4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003ef8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003efc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 8003f00:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8003f04:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	440b      	add	r3, r1
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	1c59      	adds	r1, r3, #1
 8003f10:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003f14:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003f18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003f1c:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 8003f1e:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8003f22:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	440b      	add	r3, r1
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	0059      	lsls	r1, r3, #1
 8003f2e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003f32:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003f36:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003f3a:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8003f3c:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8003f40:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	440b      	add	r3, r1
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	f103 0109 	add.w	r1, r3, #9
 8003f4e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003f52:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003f56:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003f5a:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8003f5c:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8003f60:	f997 211e 	ldrsb.w	r2, [r7, #286]	@ 0x11e
 8003f64:	0092      	lsls	r2, r2, #2
 8003f66:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8003f68:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8003f6a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003f6e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 8003f76:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8003f84:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	ddac      	ble.n	8003ee6 <_vl53l5cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 8003f8c:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	3301      	adds	r3, #1
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8003f9a:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	dd9d      	ble.n	8003ede <_vl53l5cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 8003fa2:	f107 0308 	add.w	r3, r7, #8
 8003fa6:	3340      	adds	r3, #64	@ 0x40
 8003fa8:	22c0      	movs	r2, #192	@ 0xc0
 8003faa:	2100      	movs	r1, #0
 8003fac:	4618      	mov	r0, r3
 8003fae:	f001 fd0b 	bl	80059c8 <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 8003fb2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003fb6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f203 5334 	addw	r3, r3, #1332	@ 0x534
 8003fc0:	f107 0108 	add.w	r1, r7, #8
 8003fc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f001 fd78 	bl	8005abe <memcpy>
                  signal_grid, sizeof(signal_grid));
	    VL53L5CX_SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 8003fce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003fd2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fdc:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fc fd5b 	bl	8000a9c <VL53L5CX_SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 8003fe6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003fea:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 8003ff4:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8003ff8:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 8003ffa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003ffe:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f503 63af 	add.w	r3, r3, #1400	@ 0x578
 8004008:	2204      	movs	r2, #4
 800400a:	2100      	movs	r1, #0
 800400c:	4618      	mov	r0, r3
 800400e:	f001 fcdb 	bl	80059c8 <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2cf8,
 8004012:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004016:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800401a:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 800401c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004020:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2cf8,
 800402a:	f44f 7342 	mov.w	r3, #776	@ 0x308
 800402e:	f642 41f8 	movw	r1, #11512	@ 0x2cf8
 8004032:	f7fc fce1 	bl	80009f8 <VL53L5CX_WrMulti>
 8004036:	4603      	mov	r3, r0
 8004038:	461a      	mov	r2, r3
 800403a:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800403e:	4313      	orrs	r3, r2
 8004040:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8004044:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004048:	f5a3 708e 	sub.w	r0, r3, #284	@ 0x11c
 800404c:	2303      	movs	r3, #3
 800404e:	9301      	str	r3, [sp, #4]
 8004050:	23ff      	movs	r3, #255	@ 0xff
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8004058:	2201      	movs	r2, #1
 800405a:	2104      	movs	r1, #4
 800405c:	6800      	ldr	r0, [r0, #0]
 800405e:	f7ff fc6b 	bl	8003938 <_vl53l5cx_poll_for_answer>
 8004062:	4603      	mov	r3, r0
 8004064:	461a      	mov	r2, r3
 8004066:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800406a:	4313      	orrs	r3, r2
 800406c:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8004070:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
}
 8004074:	4618      	mov	r0, r3
 8004076:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	08006684 	.word	0x08006684
 8004084:	0800668c 	.word	0x0800668c
 8004088:	0001fca0 	.word	0x0001fca0

0800408c <vl53l5cx_is_alive>:

uint8_t vl53l5cx_is_alive(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_is_alive)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	73fb      	strb	r3, [r7, #15]
	uint8_t device_id, revision_id;

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fc fc80 	bl	80009a8 <VL53L5CX_WrByte>
 80040a8:	4603      	mov	r3, r0
 80040aa:	461a      	mov	r2, r3
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	73fb      	strb	r3, [r7, #15]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0, &device_id);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f107 020e 	add.w	r2, r7, #14
 80040b8:	2100      	movs	r1, #0
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fc fc40 	bl	8000940 <VL53L5CX_RdByte>
 80040c0:	4603      	mov	r3, r0
 80040c2:	461a      	mov	r2, r3
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	73fb      	strb	r3, [r7, #15]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 1, &revision_id);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f107 020d 	add.w	r2, r7, #13
 80040d0:	2101      	movs	r1, #1
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fc fc34 	bl	8000940 <VL53L5CX_RdByte>
 80040d8:	4603      	mov	r3, r0
 80040da:	461a      	mov	r2, r3
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
 80040de:	4313      	orrs	r3, r2
 80040e0:	73fb      	strb	r3, [r7, #15]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2202      	movs	r2, #2
 80040e6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fc fc5c 	bl	80009a8 <VL53L5CX_WrByte>
 80040f0:	4603      	mov	r3, r0
 80040f2:	461a      	mov	r2, r3
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	73fb      	strb	r3, [r7, #15]

	if((device_id == (uint8_t)0xF0) && (revision_id == (uint8_t)0x02))
 80040fa:	7bbb      	ldrb	r3, [r7, #14]
 80040fc:	2bf0      	cmp	r3, #240	@ 0xf0
 80040fe:	d106      	bne.n	800410e <vl53l5cx_is_alive+0x82>
 8004100:	7b7b      	ldrb	r3, [r7, #13]
 8004102:	2b02      	cmp	r3, #2
 8004104:	d103      	bne.n	800410e <vl53l5cx_is_alive+0x82>
	{
		*p_is_alive = 1;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2201      	movs	r2, #1
 800410a:	701a      	strb	r2, [r3, #0]
 800410c:	e002      	b.n	8004114 <vl53l5cx_is_alive+0x88>
	}
	else
	{
		*p_is_alive = 0;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2200      	movs	r2, #0
 8004112:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8004114:	7bfb      	ldrb	r3, [r7, #15]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <vl53l5cx_init>:

uint8_t vl53l5cx_init(
		VL53L5CX_Configuration		*p_dev)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08a      	sub	sp, #40	@ 0x28
 8004124:	af04      	add	r7, sp, #16
 8004126:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L5CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 800412c:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8004130:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 8004132:	2301      	movs	r3, #1
 8004134:	60fb      	str	r3, [r7, #12]

	p_dev->default_xtalk = (uint8_t*)VL53L5CX_DEFAULT_XTALK;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a80      	ldr	r2, [pc, #512]	@ (800433c <vl53l5cx_init+0x21c>)
 800413a:	60da      	str	r2, [r3, #12]
	p_dev->default_configuration = (uint8_t*)VL53L5CX_DEFAULT_CONFIGURATION;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a80      	ldr	r2, [pc, #512]	@ (8004340 <vl53l5cx_init+0x220>)
 8004140:	609a      	str	r2, [r3, #8]
	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2aac 	strb.w	r2, [r3, #2732]	@ 0xaac

	/* SW reboot sequence */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004152:	4618      	mov	r0, r3
 8004154:	f7fc fc28 	bl	80009a8 <VL53L5CX_WrByte>
 8004158:	4603      	mov	r3, r0
 800415a:	461a      	mov	r2, r3
 800415c:	7dfb      	ldrb	r3, [r7, #23]
 800415e:	4313      	orrs	r3, r2
 8004160:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0009, 0x04);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2204      	movs	r2, #4
 8004166:	2109      	movs	r1, #9
 8004168:	4618      	mov	r0, r3
 800416a:	f7fc fc1d 	bl	80009a8 <VL53L5CX_WrByte>
 800416e:	4603      	mov	r3, r0
 8004170:	461a      	mov	r2, r3
 8004172:	7dfb      	ldrb	r3, [r7, #23]
 8004174:	4313      	orrs	r3, r2
 8004176:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2240      	movs	r2, #64	@ 0x40
 800417c:	210f      	movs	r1, #15
 800417e:	4618      	mov	r0, r3
 8004180:	f7fc fc12 	bl	80009a8 <VL53L5CX_WrByte>
 8004184:	4603      	mov	r3, r0
 8004186:	461a      	mov	r2, r3
 8004188:	7dfb      	ldrb	r3, [r7, #23]
 800418a:	4313      	orrs	r3, r2
 800418c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000A, 0x03);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2203      	movs	r2, #3
 8004192:	210a      	movs	r1, #10
 8004194:	4618      	mov	r0, r3
 8004196:	f7fc fc07 	bl	80009a8 <VL53L5CX_WrByte>
 800419a:	4603      	mov	r3, r0
 800419c:	461a      	mov	r2, r3
 800419e:	7dfb      	ldrb	r3, [r7, #23]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f107 0216 	add.w	r2, r7, #22
 80041aa:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fc fbc6 	bl	8000940 <VL53L5CX_RdByte>
 80041b4:	4603      	mov	r3, r0
 80041b6:	461a      	mov	r2, r3
 80041b8:	7dfb      	ldrb	r3, [r7, #23]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000C, 0x01);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	210c      	movs	r1, #12
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7fc fbef 	bl	80009a8 <VL53L5CX_WrByte>
 80041ca:	4603      	mov	r3, r0
 80041cc:	461a      	mov	r2, r3
 80041ce:	7dfb      	ldrb	r3, [r7, #23]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	75fb      	strb	r3, [r7, #23]

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0101, 0x00);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f240 1101 	movw	r1, #257	@ 0x101
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fc fbe3 	bl	80009a8 <VL53L5CX_WrByte>
 80041e2:	4603      	mov	r3, r0
 80041e4:	461a      	mov	r2, r3
 80041e6:	7dfb      	ldrb	r3, [r7, #23]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0102, 0x00);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fc fbd7 	bl	80009a8 <VL53L5CX_WrByte>
 80041fa:	4603      	mov	r3, r0
 80041fc:	461a      	mov	r2, r3
 80041fe:	7dfb      	ldrb	r3, [r7, #23]
 8004200:	4313      	orrs	r3, r2
 8004202:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 800420c:	4618      	mov	r0, r3
 800420e:	f7fc fbcb 	bl	80009a8 <VL53L5CX_WrByte>
 8004212:	4603      	mov	r3, r0
 8004214:	461a      	mov	r2, r3
 8004216:	7dfb      	ldrb	r3, [r7, #23]
 8004218:	4313      	orrs	r3, r2
 800421a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f244 0102 	movw	r1, #16386	@ 0x4002
 8004224:	4618      	mov	r0, r3
 8004226:	f7fc fbbf 	bl	80009a8 <VL53L5CX_WrByte>
 800422a:	4603      	mov	r3, r0
 800422c:	461a      	mov	r2, r3
 800422e:	7dfb      	ldrb	r3, [r7, #23]
 8004230:	4313      	orrs	r3, r2
 8004232:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f244 0102 	movw	r1, #16386	@ 0x4002
 800423c:	4618      	mov	r0, r3
 800423e:	f7fc fbb3 	bl	80009a8 <VL53L5CX_WrByte>
 8004242:	4603      	mov	r3, r0
 8004244:	461a      	mov	r2, r3
 8004246:	7dfb      	ldrb	r3, [r7, #23]
 8004248:	4313      	orrs	r3, r2
 800424a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2203      	movs	r2, #3
 8004250:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8004254:	4618      	mov	r0, r3
 8004256:	f7fc fba7 	bl	80009a8 <VL53L5CX_WrByte>
 800425a:	4603      	mov	r3, r0
 800425c:	461a      	mov	r2, r3
 800425e:	7dfb      	ldrb	r3, [r7, #23]
 8004260:	4313      	orrs	r3, r2
 8004262:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0103, 0x01);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f240 1103 	movw	r1, #259	@ 0x103
 800426c:	4618      	mov	r0, r3
 800426e:	f7fc fb9b 	bl	80009a8 <VL53L5CX_WrByte>
 8004272:	4603      	mov	r3, r0
 8004274:	461a      	mov	r2, r3
 8004276:	7dfb      	ldrb	r3, [r7, #23]
 8004278:	4313      	orrs	r3, r2
 800427a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000C, 0x00);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	210c      	movs	r1, #12
 8004282:	4618      	mov	r0, r3
 8004284:	f7fc fb90 	bl	80009a8 <VL53L5CX_WrByte>
 8004288:	4603      	mov	r3, r0
 800428a:	461a      	mov	r2, r3
 800428c:	7dfb      	ldrb	r3, [r7, #23]
 800428e:	4313      	orrs	r3, r2
 8004290:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000F, 0x43);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2243      	movs	r2, #67	@ 0x43
 8004296:	210f      	movs	r1, #15
 8004298:	4618      	mov	r0, r3
 800429a:	f7fc fb85 	bl	80009a8 <VL53L5CX_WrByte>
 800429e:	4603      	mov	r3, r0
 80042a0:	461a      	mov	r2, r3
 80042a2:	7dfb      	ldrb	r3, [r7, #23]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WaitMs(&(p_dev->platform), 1);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2101      	movs	r1, #1
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7fc fc2b 	bl	8000b08 <VL53L5CX_WaitMs>
 80042b2:	4603      	mov	r3, r0
 80042b4:	461a      	mov	r2, r3
 80042b6:	7dfb      	ldrb	r3, [r7, #23]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	75fb      	strb	r3, [r7, #23]

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2240      	movs	r2, #64	@ 0x40
 80042c0:	210f      	movs	r1, #15
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7fc fb70 	bl	80009a8 <VL53L5CX_WrByte>
 80042c8:	4603      	mov	r3, r0
 80042ca:	461a      	mov	r2, r3
 80042cc:	7dfb      	ldrb	r3, [r7, #23]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000A, 0x01);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	210a      	movs	r1, #10
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fc fb65 	bl	80009a8 <VL53L5CX_WrByte>
 80042de:	4603      	mov	r3, r0
 80042e0:	461a      	mov	r2, r3
 80042e2:	7dfb      	ldrb	r3, [r7, #23]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WaitMs(&(p_dev->platform), 100);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2164      	movs	r1, #100	@ 0x64
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fc fc0b 	bl	8000b08 <VL53L5CX_WaitMs>
 80042f2:	4603      	mov	r3, r0
 80042f4:	461a      	mov	r2, r3
 80042f6:	7dfb      	ldrb	r3, [r7, #23]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004304:	4618      	mov	r0, r3
 8004306:	f7fc fb4f 	bl	80009a8 <VL53L5CX_WrByte>
 800430a:	4603      	mov	r3, r0
 800430c:	461a      	mov	r2, r3
 800430e:	7dfb      	ldrb	r3, [r7, #23]
 8004310:	4313      	orrs	r3, r2
 8004312:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 8004314:	2301      	movs	r3, #1
 8004316:	9301      	str	r3, [sp, #4]
 8004318:	23ff      	movs	r3, #255	@ 0xff
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	2306      	movs	r3, #6
 800431e:	2200      	movs	r2, #0
 8004320:	2101      	movs	r1, #1
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7ff fb08 	bl	8003938 <_vl53l5cx_poll_for_answer>
 8004328:	4603      	mov	r3, r0
 800432a:	461a      	mov	r2, r3
 800432c:	7dfb      	ldrb	r3, [r7, #23]
 800432e:	4313      	orrs	r3, r2
 8004330:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8004332:	7dfb      	ldrb	r3, [r7, #23]
 8004334:	2b00      	cmp	r3, #0
 8004336:	f040 8354 	bne.w	80049e2 <vl53l5cx_init+0x8c2>
 800433a:	e003      	b.n	8004344 <vl53l5cx_init+0x224>
 800433c:	0801bac4 	.word	0x0801bac4
 8004340:	0801b6f8 	.word	0x0801b6f8
		goto exit;
	}

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000E, 0x01);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	210e      	movs	r1, #14
 800434a:	4618      	mov	r0, r3
 800434c:	f7fc fb2c 	bl	80009a8 <VL53L5CX_WrByte>
 8004350:	4603      	mov	r3, r0
 8004352:	461a      	mov	r2, r3
 8004354:	7dfb      	ldrb	r3, [r7, #23]
 8004356:	4313      	orrs	r3, r2
 8004358:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2202      	movs	r2, #2
 800435e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004362:	4618      	mov	r0, r3
 8004364:	f7fc fb20 	bl	80009a8 <VL53L5CX_WrByte>
 8004368:	4603      	mov	r3, r0
 800436a:	461a      	mov	r2, r3
 800436c:	7dfb      	ldrb	r3, [r7, #23]
 800436e:	4313      	orrs	r3, r2
 8004370:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x03, 0x0D);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	220d      	movs	r2, #13
 8004376:	2103      	movs	r1, #3
 8004378:	4618      	mov	r0, r3
 800437a:	f7fc fb15 	bl	80009a8 <VL53L5CX_WrByte>
 800437e:	4603      	mov	r3, r0
 8004380:	461a      	mov	r2, r3
 8004382:	7dfb      	ldrb	r3, [r7, #23]
 8004384:	4313      	orrs	r3, r2
 8004386:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004390:	4618      	mov	r0, r3
 8004392:	f7fc fb09 	bl	80009a8 <VL53L5CX_WrByte>
 8004396:	4603      	mov	r3, r0
 8004398:	461a      	mov	r2, r3
 800439a:	7dfb      	ldrb	r3, [r7, #23]
 800439c:	4313      	orrs	r3, r2
 800439e:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 80043a0:	2310      	movs	r3, #16
 80043a2:	9301      	str	r3, [sp, #4]
 80043a4:	2310      	movs	r3, #16
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	2321      	movs	r3, #33	@ 0x21
 80043aa:	2200      	movs	r2, #0
 80043ac:	2101      	movs	r1, #1
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7ff fac2 	bl	8003938 <_vl53l5cx_poll_for_answer>
 80043b4:	4603      	mov	r3, r0
 80043b6:	461a      	mov	r2, r3
 80043b8:	7dfb      	ldrb	r3, [r7, #23]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fc faee 	bl	80009a8 <VL53L5CX_WrByte>
 80043cc:	4603      	mov	r3, r0
 80043ce:	461a      	mov	r2, r3
 80043d0:	7dfb      	ldrb	r3, [r7, #23]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f107 0216 	add.w	r2, r7, #22
 80043dc:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fc faad 	bl	8000940 <VL53L5CX_RdByte>
 80043e6:	4603      	mov	r3, r0
 80043e8:	461a      	mov	r2, r3
 80043ea:	7dfb      	ldrb	r3, [r7, #23]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	210c      	movs	r1, #12
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fc fad6 	bl	80009a8 <VL53L5CX_WrByte>
 80043fc:	4603      	mov	r3, r0
 80043fe:	461a      	mov	r2, r3
 8004400:	7dfb      	ldrb	r3, [r7, #23]
 8004402:	4313      	orrs	r3, r2
 8004404:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800440e:	4618      	mov	r0, r3
 8004410:	f7fc faca 	bl	80009a8 <VL53L5CX_WrByte>
 8004414:	4603      	mov	r3, r0
 8004416:	461a      	mov	r2, r3
 8004418:	7dfb      	ldrb	r3, [r7, #23]
 800441a:	4313      	orrs	r3, r2
 800441c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x101, 0x00);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f240 1101 	movw	r1, #257	@ 0x101
 8004426:	4618      	mov	r0, r3
 8004428:	f7fc fabe 	bl	80009a8 <VL53L5CX_WrByte>
 800442c:	4603      	mov	r3, r0
 800442e:	461a      	mov	r2, r3
 8004430:	7dfb      	ldrb	r3, [r7, #23]
 8004432:	4313      	orrs	r3, r2
 8004434:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x102, 0x00);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800443e:	4618      	mov	r0, r3
 8004440:	f7fc fab2 	bl	80009a8 <VL53L5CX_WrByte>
 8004444:	4603      	mov	r3, r0
 8004446:	461a      	mov	r2, r3
 8004448:	7dfb      	ldrb	r3, [r7, #23]
 800444a:	4313      	orrs	r3, r2
 800444c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8004456:	4618      	mov	r0, r3
 8004458:	f7fc faa6 	bl	80009a8 <VL53L5CX_WrByte>
 800445c:	4603      	mov	r3, r0
 800445e:	461a      	mov	r2, r3
 8004460:	7dfb      	ldrb	r3, [r7, #23]
 8004462:	4313      	orrs	r3, r2
 8004464:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f244 0102 	movw	r1, #16386	@ 0x4002
 800446e:	4618      	mov	r0, r3
 8004470:	f7fc fa9a 	bl	80009a8 <VL53L5CX_WrByte>
 8004474:	4603      	mov	r3, r0
 8004476:	461a      	mov	r2, r3
 8004478:	7dfb      	ldrb	r3, [r7, #23]
 800447a:	4313      	orrs	r3, r2
 800447c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f244 0102 	movw	r1, #16386	@ 0x4002
 8004486:	4618      	mov	r0, r3
 8004488:	f7fc fa8e 	bl	80009a8 <VL53L5CX_WrByte>
 800448c:	4603      	mov	r3, r0
 800448e:	461a      	mov	r2, r3
 8004490:	7dfb      	ldrb	r3, [r7, #23]
 8004492:	4313      	orrs	r3, r2
 8004494:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2203      	movs	r2, #3
 800449a:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fc fa82 	bl	80009a8 <VL53L5CX_WrByte>
 80044a4:	4603      	mov	r3, r0
 80044a6:	461a      	mov	r2, r3
 80044a8:	7dfb      	ldrb	r3, [r7, #23]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x103, 0x01);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f240 1103 	movw	r1, #259	@ 0x103
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fc fa76 	bl	80009a8 <VL53L5CX_WrByte>
 80044bc:	4603      	mov	r3, r0
 80044be:	461a      	mov	r2, r3
 80044c0:	7dfb      	ldrb	r3, [r7, #23]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x400F, 0x00);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f244 010f 	movw	r1, #16399	@ 0x400f
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fc fa6a 	bl	80009a8 <VL53L5CX_WrByte>
 80044d4:	4603      	mov	r3, r0
 80044d6:	461a      	mov	r2, r3
 80044d8:	7dfb      	ldrb	r3, [r7, #23]
 80044da:	4313      	orrs	r3, r2
 80044dc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21A, 0x43);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2243      	movs	r2, #67	@ 0x43
 80044e2:	f240 211a 	movw	r1, #538	@ 0x21a
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fc fa5e 	bl	80009a8 <VL53L5CX_WrByte>
 80044ec:	4603      	mov	r3, r0
 80044ee:	461a      	mov	r2, r3
 80044f0:	7dfb      	ldrb	r3, [r7, #23]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21A, 0x03);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2203      	movs	r2, #3
 80044fa:	f240 211a 	movw	r1, #538	@ 0x21a
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fc fa52 	bl	80009a8 <VL53L5CX_WrByte>
 8004504:	4603      	mov	r3, r0
 8004506:	461a      	mov	r2, r3
 8004508:	7dfb      	ldrb	r3, [r7, #23]
 800450a:	4313      	orrs	r3, r2
 800450c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21A, 0x01);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	f240 211a 	movw	r1, #538	@ 0x21a
 8004516:	4618      	mov	r0, r3
 8004518:	f7fc fa46 	bl	80009a8 <VL53L5CX_WrByte>
 800451c:	4603      	mov	r3, r0
 800451e:	461a      	mov	r2, r3
 8004520:	7dfb      	ldrb	r3, [r7, #23]
 8004522:	4313      	orrs	r3, r2
 8004524:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21A, 0x00);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f240 211a 	movw	r1, #538	@ 0x21a
 800452e:	4618      	mov	r0, r3
 8004530:	f7fc fa3a 	bl	80009a8 <VL53L5CX_WrByte>
 8004534:	4603      	mov	r3, r0
 8004536:	461a      	mov	r2, r3
 8004538:	7dfb      	ldrb	r3, [r7, #23]
 800453a:	4313      	orrs	r3, r2
 800453c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x219, 0x00);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f240 2119 	movw	r1, #537	@ 0x219
 8004546:	4618      	mov	r0, r3
 8004548:	f7fc fa2e 	bl	80009a8 <VL53L5CX_WrByte>
 800454c:	4603      	mov	r3, r0
 800454e:	461a      	mov	r2, r3
 8004550:	7dfb      	ldrb	r3, [r7, #23]
 8004552:	4313      	orrs	r3, r2
 8004554:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21B, 0x00);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f240 211b 	movw	r1, #539	@ 0x21b
 800455e:	4618      	mov	r0, r3
 8004560:	f7fc fa22 	bl	80009a8 <VL53L5CX_WrByte>
 8004564:	4603      	mov	r3, r0
 8004566:	461a      	mov	r2, r3
 8004568:	7dfb      	ldrb	r3, [r7, #23]
 800456a:	4313      	orrs	r3, r2
 800456c:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004576:	4618      	mov	r0, r3
 8004578:	f7fc fa16 	bl	80009a8 <VL53L5CX_WrByte>
 800457c:	4603      	mov	r3, r0
 800457e:	461a      	mov	r2, r3
 8004580:	7dfb      	ldrb	r3, [r7, #23]
 8004582:	4313      	orrs	r3, r2
 8004584:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f107 0216 	add.w	r2, r7, #22
 800458c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004590:	4618      	mov	r0, r3
 8004592:	f7fc f9d5 	bl	8000940 <VL53L5CX_RdByte>
 8004596:	4603      	mov	r3, r0
 8004598:	461a      	mov	r2, r3
 800459a:	7dfb      	ldrb	r3, [r7, #23]
 800459c:	4313      	orrs	r3, r2
 800459e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0C, 0x00);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	210c      	movs	r1, #12
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fc f9fe 	bl	80009a8 <VL53L5CX_WrByte>
 80045ac:	4603      	mov	r3, r0
 80045ae:	461a      	mov	r2, r3
 80045b0:	7dfb      	ldrb	r3, [r7, #23]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fc f9f2 	bl	80009a8 <VL53L5CX_WrByte>
 80045c4:	4603      	mov	r3, r0
 80045c6:	461a      	mov	r2, r3
 80045c8:	7dfb      	ldrb	r3, [r7, #23]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x20, 0x07);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2207      	movs	r2, #7
 80045d2:	2120      	movs	r1, #32
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fc f9e7 	bl	80009a8 <VL53L5CX_WrByte>
 80045da:	4603      	mov	r3, r0
 80045dc:	461a      	mov	r2, r3
 80045de:	7dfb      	ldrb	r3, [r7, #23]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x20, 0x06);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2206      	movs	r2, #6
 80045e8:	2120      	movs	r1, #32
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fc f9dc 	bl	80009a8 <VL53L5CX_WrByte>
 80045f0:	4603      	mov	r3, r0
 80045f2:	461a      	mov	r2, r3
 80045f4:	7dfb      	ldrb	r3, [r7, #23]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L5 */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x09);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2209      	movs	r2, #9
 80045fe:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004602:	4618      	mov	r0, r3
 8004604:	f7fc f9d0 	bl	80009a8 <VL53L5CX_WrByte>
 8004608:	4603      	mov	r3, r0
 800460a:	461a      	mov	r2, r3
 800460c:	7dfb      	ldrb	r3, [r7, #23]
 800460e:	4313      	orrs	r3, r2
 8004610:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrMulti(&(p_dev->platform),0,
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004618:	4ae1      	ldr	r2, [pc, #900]	@ (80049a0 <vl53l5cx_init+0x880>)
 800461a:	2100      	movs	r1, #0
 800461c:	f7fc f9ec 	bl	80009f8 <VL53L5CX_WrMulti>
 8004620:	4603      	mov	r3, r0
 8004622:	461a      	mov	r2, r3
 8004624:	7dfb      	ldrb	r3, [r7, #23]
 8004626:	4313      	orrs	r3, r2
 8004628:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0],0x8000);
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	220a      	movs	r2, #10
 800462e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004632:	4618      	mov	r0, r3
 8004634:	f7fc f9b8 	bl	80009a8 <VL53L5CX_WrByte>
 8004638:	4603      	mov	r3, r0
 800463a:	461a      	mov	r2, r3
 800463c:	7dfb      	ldrb	r3, [r7, #23]
 800463e:	4313      	orrs	r3, r2
 8004640:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrMulti(&(p_dev->platform),0,
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004648:	4ad6      	ldr	r2, [pc, #856]	@ (80049a4 <vl53l5cx_init+0x884>)
 800464a:	2100      	movs	r1, #0
 800464c:	f7fc f9d4 	bl	80009f8 <VL53L5CX_WrMulti>
 8004650:	4603      	mov	r3, r0
 8004652:	461a      	mov	r2, r3
 8004654:	7dfb      	ldrb	r3, [r7, #23]
 8004656:	4313      	orrs	r3, r2
 8004658:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x8000],0x8000);
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	220b      	movs	r2, #11
 800465e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004662:	4618      	mov	r0, r3
 8004664:	f7fc f9a0 	bl	80009a8 <VL53L5CX_WrByte>
 8004668:	4603      	mov	r3, r0
 800466a:	461a      	mov	r2, r3
 800466c:	7dfb      	ldrb	r3, [r7, #23]
 800466e:	4313      	orrs	r3, r2
 8004670:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrMulti(&(p_dev->platform),0,
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8004678:	4acb      	ldr	r2, [pc, #812]	@ (80049a8 <vl53l5cx_init+0x888>)
 800467a:	2100      	movs	r1, #0
 800467c:	f7fc f9bc 	bl	80009f8 <VL53L5CX_WrMulti>
 8004680:	4603      	mov	r3, r0
 8004682:	461a      	mov	r2, r3
 8004684:	7dfb      	ldrb	r3, [r7, #23]
 8004686:	4313      	orrs	r3, r2
 8004688:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x10000],0x5000);
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004692:	4618      	mov	r0, r3
 8004694:	f7fc f988 	bl	80009a8 <VL53L5CX_WrByte>
 8004698:	4603      	mov	r3, r0
 800469a:	461a      	mov	r2, r3
 800469c:	7dfb      	ldrb	r3, [r7, #23]
 800469e:	4313      	orrs	r3, r2
 80046a0:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2202      	movs	r2, #2
 80046a6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fc f97c 	bl	80009a8 <VL53L5CX_WrByte>
 80046b0:	4603      	mov	r3, r0
 80046b2:	461a      	mov	r2, r3
 80046b4:	7dfb      	ldrb	r3, [r7, #23]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x03, 0x0D);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	220d      	movs	r2, #13
 80046be:	2103      	movs	r1, #3
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fc f971 	bl	80009a8 <VL53L5CX_WrByte>
 80046c6:	4603      	mov	r3, r0
 80046c8:	461a      	mov	r2, r3
 80046ca:	7dfb      	ldrb	r3, [r7, #23]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80046d8:	4618      	mov	r0, r3
 80046da:	f7fc f965 	bl	80009a8 <VL53L5CX_WrByte>
 80046de:	4603      	mov	r3, r0
 80046e0:	461a      	mov	r2, r3
 80046e2:	7dfb      	ldrb	r3, [r7, #23]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 80046e8:	2310      	movs	r3, #16
 80046ea:	9301      	str	r3, [sp, #4]
 80046ec:	2310      	movs	r3, #16
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	2321      	movs	r3, #33	@ 0x21
 80046f2:	2200      	movs	r2, #0
 80046f4:	2101      	movs	r1, #1
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7ff f91e 	bl	8003938 <_vl53l5cx_poll_for_answer>
 80046fc:	4603      	mov	r3, r0
 80046fe:	461a      	mov	r2, r3
 8004700:	7dfb      	ldrb	r3, [r7, #23]
 8004702:	4313      	orrs	r3, r2
 8004704:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8004706:	7dfb      	ldrb	r3, [r7, #23]
 8004708:	2b00      	cmp	r3, #0
 800470a:	f040 816c 	bne.w	80049e6 <vl53l5cx_init+0x8c6>
		goto exit;
	}

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004716:	4618      	mov	r0, r3
 8004718:	f7fc f946 	bl	80009a8 <VL53L5CX_WrByte>
 800471c:	4603      	mov	r3, r0
 800471e:	461a      	mov	r2, r3
 8004720:	7dfb      	ldrb	r3, [r7, #23]
 8004722:	4313      	orrs	r3, r2
 8004724:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f107 0216 	add.w	r2, r7, #22
 800472c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004730:	4618      	mov	r0, r3
 8004732:	f7fc f905 	bl	8000940 <VL53L5CX_RdByte>
 8004736:	4603      	mov	r3, r0
 8004738:	461a      	mov	r2, r3
 800473a:	7dfb      	ldrb	r3, [r7, #23]
 800473c:	4313      	orrs	r3, r2
 800473e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	210c      	movs	r1, #12
 8004746:	4618      	mov	r0, r3
 8004748:	f7fc f92e 	bl	80009a8 <VL53L5CX_WrByte>
 800474c:	4603      	mov	r3, r0
 800474e:	461a      	mov	r2, r3
 8004750:	7dfb      	ldrb	r3, [r7, #23]
 8004752:	4313      	orrs	r3, r2
 8004754:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800475e:	4618      	mov	r0, r3
 8004760:	f7fc f922 	bl	80009a8 <VL53L5CX_WrByte>
 8004764:	4603      	mov	r3, r0
 8004766:	461a      	mov	r2, r3
 8004768:	7dfb      	ldrb	r3, [r7, #23]
 800476a:	4313      	orrs	r3, r2
 800476c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x114, 0x00);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8004776:	4618      	mov	r0, r3
 8004778:	f7fc f916 	bl	80009a8 <VL53L5CX_WrByte>
 800477c:	4603      	mov	r3, r0
 800477e:	461a      	mov	r2, r3
 8004780:	7dfb      	ldrb	r3, [r7, #23]
 8004782:	4313      	orrs	r3, r2
 8004784:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x115, 0x00);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f240 1115 	movw	r1, #277	@ 0x115
 800478e:	4618      	mov	r0, r3
 8004790:	f7fc f90a 	bl	80009a8 <VL53L5CX_WrByte>
 8004794:	4603      	mov	r3, r0
 8004796:	461a      	mov	r2, r3
 8004798:	7dfb      	ldrb	r3, [r7, #23]
 800479a:	4313      	orrs	r3, r2
 800479c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x116, 0x42);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2242      	movs	r2, #66	@ 0x42
 80047a2:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fc f8fe 	bl	80009a8 <VL53L5CX_WrByte>
 80047ac:	4603      	mov	r3, r0
 80047ae:	461a      	mov	r2, r3
 80047b0:	7dfb      	ldrb	r3, [r7, #23]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x117, 0x00);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f240 1117 	movw	r1, #279	@ 0x117
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fc f8f2 	bl	80009a8 <VL53L5CX_WrByte>
 80047c4:	4603      	mov	r3, r0
 80047c6:	461a      	mov	r2, r3
 80047c8:	7dfb      	ldrb	r3, [r7, #23]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0B, 0x00);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	210b      	movs	r1, #11
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fc f8e7 	bl	80009a8 <VL53L5CX_WrByte>
 80047da:	4603      	mov	r3, r0
 80047dc:	461a      	mov	r2, r3
 80047de:	7dfb      	ldrb	r3, [r7, #23]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f107 0216 	add.w	r2, r7, #22
 80047ea:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fc f8a6 	bl	8000940 <VL53L5CX_RdByte>
 80047f4:	4603      	mov	r3, r0
 80047f6:	461a      	mov	r2, r3
 80047f8:	7dfb      	ldrb	r3, [r7, #23]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0C, 0x00);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	210c      	movs	r1, #12
 8004804:	4618      	mov	r0, r3
 8004806:	f7fc f8cf 	bl	80009a8 <VL53L5CX_WrByte>
 800480a:	4603      	mov	r3, r0
 800480c:	461a      	mov	r2, r3
 800480e:	7dfb      	ldrb	r3, [r7, #23]
 8004810:	4313      	orrs	r3, r2
 8004812:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0B, 0x01);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	210b      	movs	r1, #11
 800481a:	4618      	mov	r0, r3
 800481c:	f7fc f8c4 	bl	80009a8 <VL53L5CX_WrByte>
 8004820:	4603      	mov	r3, r0
 8004822:	461a      	mov	r2, r3
 8004824:	7dfb      	ldrb	r3, [r7, #23]
 8004826:	4313      	orrs	r3, r2
 8004828:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_mcu_boot(p_dev);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7ff f8d4 	bl	80039d8 <_vl53l5cx_poll_for_mcu_boot>
 8004830:	4603      	mov	r3, r0
 8004832:	461a      	mov	r2, r3
 8004834:	7dfb      	ldrb	r3, [r7, #23]
 8004836:	4313      	orrs	r3, r2
 8004838:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 800483a:	7dfb      	ldrb	r3, [r7, #23]
 800483c:	2b00      	cmp	r3, #0
 800483e:	f040 80d4 	bne.w	80049ea <vl53l5cx_init+0x8ca>
		goto exit;
	}

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2202      	movs	r2, #2
 8004846:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800484a:	4618      	mov	r0, r3
 800484c:	f7fc f8ac 	bl	80009a8 <VL53L5CX_WrByte>
 8004850:	4603      	mov	r3, r0
 8004852:	461a      	mov	r2, r3
 8004854:	7dfb      	ldrb	r3, [r7, #23]
 8004856:	4313      	orrs	r3, r2
 8004858:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2fd8,
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	2328      	movs	r3, #40	@ 0x28
 800485e:	4a53      	ldr	r2, [pc, #332]	@ (80049ac <vl53l5cx_init+0x88c>)
 8004860:	f642 71d8 	movw	r1, #12248	@ 0x2fd8
 8004864:	f7fc f8c8 	bl	80009f8 <VL53L5CX_WrMulti>
 8004868:	4603      	mov	r3, r0
 800486a:	461a      	mov	r2, r3
 800486c:	7dfb      	ldrb	r3, [r7, #23]
 800486e:	4313      	orrs	r3, r2
 8004870:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L5CX_GET_NVM_CMD, sizeof(VL53L5CX_GET_NVM_CMD));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 0,
 8004872:	2302      	movs	r3, #2
 8004874:	9301      	str	r3, [sp, #4]
 8004876:	23ff      	movs	r3, #255	@ 0xff
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 800487e:	2200      	movs	r2, #0
 8004880:	2104      	movs	r1, #4
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7ff f858 	bl	8003938 <_vl53l5cx_poll_for_answer>
 8004888:	4603      	mov	r3, r0
 800488a:	461a      	mov	r2, r3
 800488c:	7dfb      	ldrb	r3, [r7, #23]
 800488e:	4313      	orrs	r3, r2
 8004890:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 2);
	status |= VL53L5CX_RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8004892:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L5CX_NVM_DATA_SIZE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= VL53L5CX_RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 800489a:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
 800489e:	f642 4104 	movw	r1, #11268	@ 0x2c04
 80048a2:	f7fc f8c9 	bl	8000a38 <VL53L5CX_RdMulti>
 80048a6:	4603      	mov	r3, r0
 80048a8:	461a      	mov	r2, r3
 80048aa:	7dfb      	ldrb	r3, [r7, #23]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f103 0010 	add.w	r0, r3, #16
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048bc:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80048c0:	4619      	mov	r1, r3
 80048c2:	f001 f8fc 	bl	8005abe <memcpy>
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l5cx_send_offset_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 80048c6:	2110      	movs	r1, #16
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7ff f8c7 	bl	8003a5c <_vl53l5cx_send_offset_data>
 80048ce:	4603      	mov	r3, r0
 80048d0:	461a      	mov	r2, r3
 80048d2:	7dfb      	ldrb	r3, [r7, #23]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L5CX_DEFAULT_XTALK,
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80048de:	4a34      	ldr	r2, [pc, #208]	@ (80049b0 <vl53l5cx_init+0x890>)
 80048e0:	4618      	mov	r0, r3
 80048e2:	4611      	mov	r1, r2
 80048e4:	f44f 7342 	mov.w	r3, #776	@ 0x308
 80048e8:	461a      	mov	r2, r3
 80048ea:	f001 f8e8 	bl	8005abe <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);
	status |= _vl53l5cx_send_xtalk_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 80048ee:	2110      	movs	r1, #16
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7ff fa7f 	bl	8003df4 <_vl53l5cx_send_xtalk_data>
 80048f6:	4603      	mov	r3, r0
 80048f8:	461a      	mov	r2, r3
 80048fa:	7dfb      	ldrb	r3, [r7, #23]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L5CX firmware */
	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2c34,
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689a      	ldr	r2, [r3, #8]
 8004906:	f44f 7373 	mov.w	r3, #972	@ 0x3cc
 800490a:	f642 4134 	movw	r1, #11316	@ 0x2c34
 800490e:	f7fc f873 	bl	80009f8 <VL53L5CX_WrMulti>
 8004912:	4603      	mov	r3, r0
 8004914:	461a      	mov	r2, r3
 8004916:	7dfb      	ldrb	r3, [r7, #23]
 8004918:	4313      	orrs	r3, r2
 800491a:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L5CX_DEFAULT_CONFIGURATION));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 800491c:	2303      	movs	r3, #3
 800491e:	9301      	str	r3, [sp, #4]
 8004920:	23ff      	movs	r3, #255	@ 0xff
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8004928:	2201      	movs	r2, #1
 800492a:	2104      	movs	r1, #4
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f7ff f803 	bl	8003938 <_vl53l5cx_poll_for_answer>
 8004932:	4603      	mov	r3, r0
 8004934:	461a      	mov	r2, r3
 8004936:	7dfb      	ldrb	r3, [r7, #23]
 8004938:	4313      	orrs	r3, r2
 800493a:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 800493c:	f107 0110 	add.w	r1, r7, #16
 8004940:	2304      	movs	r3, #4
 8004942:	f64d 3280 	movw	r2, #56192	@ 0xdb80
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 fd62 	bl	8005410 <vl53l5cx_dci_write_data>
 800494c:	4603      	mov	r3, r0
 800494e:	461a      	mov	r2, r3
 8004950:	7dfb      	ldrb	r3, [r7, #23]
 8004952:	4313      	orrs	r3, r2
 8004954:	75fb      	strb	r3, [r7, #23]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L5CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8004956:	f107 010c 	add.w	r1, r7, #12
 800495a:	2304      	movs	r3, #4
 800495c:	f64d 1264 	movw	r2, #55652	@ 0xd964
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 fd55 	bl	8005410 <vl53l5cx_dci_write_data>
 8004966:	4603      	mov	r3, r0
 8004968:	461a      	mov	r2, r3
 800496a:	7dfb      	ldrb	r3, [r7, #23]
 800496c:	4313      	orrs	r3, r2
 800496e:	75fb      	strb	r3, [r7, #23]
			VL53L5CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

	tmp = (uint8_t)1;
 8004970:	2301      	movs	r3, #1
 8004972:	75bb      	strb	r3, [r7, #22]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 800497a:	2326      	movs	r3, #38	@ 0x26
 800497c:	9302      	str	r3, [sp, #8]
 800497e:	2301      	movs	r3, #1
 8004980:	9301      	str	r3, [sp, #4]
 8004982:	f107 0316 	add.w	r3, r7, #22
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	2328      	movs	r3, #40	@ 0x28
 800498a:	f24e 1208 	movw	r2, #57608	@ 0xe108
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 fddc 	bl	800554c <vl53l5cx_dci_replace_data>
 8004994:	4603      	mov	r3, r0
 8004996:	461a      	mov	r2, r3
 8004998:	7dfb      	ldrb	r3, [r7, #23]
 800499a:	4313      	orrs	r3, r2
 800499c:	e00a      	b.n	80049b4 <vl53l5cx_init+0x894>
 800499e:	bf00      	nop
 80049a0:	080066f8 	.word	0x080066f8
 80049a4:	0800e6f8 	.word	0x0800e6f8
 80049a8:	080166f8 	.word	0x080166f8
 80049ac:	0801bdcc 	.word	0x0801bdcc
 80049b0:	0801bac4 	.word	0x0801bac4
 80049b4:	75fb      	strb	r3, [r7, #23]
			VL53L5CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x26);
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 80049bc:	2325      	movs	r3, #37	@ 0x25
 80049be:	9302      	str	r3, [sp, #8]
 80049c0:	2301      	movs	r3, #1
 80049c2:	9301      	str	r3, [sp, #4]
 80049c4:	f107 0316 	add.w	r3, r7, #22
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	2328      	movs	r3, #40	@ 0x28
 80049cc:	f24e 1208 	movw	r2, #57608	@ 0xe108
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fdbb 	bl	800554c <vl53l5cx_dci_replace_data>
 80049d6:	4603      	mov	r3, r0
 80049d8:	461a      	mov	r2, r3
 80049da:	7dfb      	ldrb	r3, [r7, #23]
 80049dc:	4313      	orrs	r3, r2
 80049de:	75fb      	strb	r3, [r7, #23]
 80049e0:	e004      	b.n	80049ec <vl53l5cx_init+0x8cc>
		goto exit;
 80049e2:	bf00      	nop
 80049e4:	e002      	b.n	80049ec <vl53l5cx_init+0x8cc>
		goto exit;
 80049e6:	bf00      	nop
 80049e8:	e000      	b.n	80049ec <vl53l5cx_init+0x8cc>
		goto exit;
 80049ea:	bf00      	nop
			VL53L5CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x25);

exit:
	return status;
 80049ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop

080049f8 <vl53l5cx_start_ranging>:
	return status;
}

uint8_t vl53l5cx_start_ranging(
		VL53L5CX_Configuration		*p_dev)
{
 80049f8:	b5b0      	push	{r4, r5, r7, lr}
 80049fa:	b09c      	sub	sp, #112	@ 0x70
 80049fc:	af02      	add	r7, sp, #8
 80049fe:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L5CX_STATUS_OK;
 8004a00:	2300      	movs	r3, #0
 8004a02:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 8004a06:	2300      	movs	r3, #0
 8004a08:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	657b      	str	r3, [r7, #84]	@ 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 8004a0e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004a12:	64fb      	str	r3, [r7, #76]	@ 0x4c

	status |= vl53l5cx_get_resolution(p_dev, &resolution);
 8004a14:	f107 035b 	add.w	r3, r7, #91	@ 0x5b
 8004a18:	4619      	mov	r1, r3
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fbd0 	bl	80051c0 <vl53l5cx_get_resolution>
 8004a20:	4603      	mov	r3, r0
 8004a22:	461a      	mov	r2, r3
 8004a24:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	p_dev->data_read_size = 0;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	605a      	str	r2, [r3, #4]
	p_dev->streamcount = 255;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	22ff      	movs	r2, #255	@ 0xff
 8004a38:	709a      	strb	r2, [r3, #2]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 8004a3a:	4baa      	ldr	r3, [pc, #680]	@ (8004ce4 <vl53l5cx_start_ranging+0x2ec>)
 8004a3c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8004a40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L5CX_START_BH,
 8004a46:	4ba8      	ldr	r3, [pc, #672]	@ (8004ce8 <vl53l5cx_start_ranging+0x2f0>)
 8004a48:	f107 040c 	add.w	r4, r7, #12
 8004a4c:	461d      	mov	r5, r3
 8004a4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a56:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004a5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L5CX_TARGET_STATUS_BH,
		VL53L5CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 8004a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a60:	3308      	adds	r3, #8
 8004a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
 8004a64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a66:	3310      	adds	r3, #16
 8004a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 8004a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a6c:	3320      	adds	r3, #32
 8004a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 8004a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a72:	3340      	adds	r3, #64	@ 0x40
 8004a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
 8004a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a78:	3380      	adds	r3, #128	@ 0x80
 8004a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 8004a7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a7e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 8004a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a86:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 8004a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 8004a94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004aa0:	e073      	b.n	8004b8a <vl53l5cx_start_ranging+0x192>
	{
		if ((output[i] == (uint8_t)0) 
 8004aa2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	3368      	adds	r3, #104	@ 0x68
 8004aa8:	443b      	add	r3, r7
 8004aaa:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d067      	beq.n	8004b82 <vl53l5cx_start_ranging+0x18a>
                    || ((output_bh_enable[i/(uint32_t)32]
 8004ab2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	3368      	adds	r3, #104	@ 0x68
 8004aba:	443b      	add	r3, r7
 8004abc:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 8004ac0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ac2:	f003 031f 	and.w	r3, r3, #31
 8004ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aca:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d057      	beq.n	8004b82 <vl53l5cx_start_ranging+0x18a>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 8004ad2:	f107 020c 	add.w	r2, r7, #12
 8004ad6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4413      	add	r3, r2
 8004adc:	65fb      	str	r3, [r7, #92]	@ 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 8004ade:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d03a      	beq.n	8004b62 <vl53l5cx_start_ranging+0x16a>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 8004aec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b0c      	cmp	r3, #12
 8004af8:	d833      	bhi.n	8004b62 <vl53l5cx_start_ranging+0x16a>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 8004afa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004afc:	885b      	ldrh	r3, [r3, #2]
 8004afe:	f245 42cf 	movw	r2, #21711	@ 0x54cf
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d910      	bls.n	8004b28 <vl53l5cx_start_ranging+0x130>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 8004b06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b08:	885b      	ldrh	r3, [r3, #2]
 8004b0a:	f645 028f 	movw	r2, #22671	@ 0x588f
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d80a      	bhi.n	8004b28 <vl53l5cx_start_ranging+0x130>
			{
				bh_ptr->size = resolution;
 8004b12:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004b16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b1a:	b299      	uxth	r1, r3
 8004b1c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004b1e:	8813      	ldrh	r3, [r2, #0]
 8004b20:	f361 130f 	bfi	r3, r1, #4, #12
 8004b24:	8013      	strh	r3, [r2, #0]
 8004b26:	e009      	b.n	8004b3c <vl53l5cx_start_ranging+0x144>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 8004b28:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b30:	b299      	uxth	r1, r3
 8004b32:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004b34:	8813      	ldrh	r3, [r2, #0]
 8004b36:	f361 130f 	bfi	r3, r1, #4, #12
 8004b3a:	8013      	strh	r3, [r2, #0]
                                  * (uint16_t)VL53L5CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004b42:	7812      	ldrb	r2, [r2, #0]
 8004b44:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8004b48:	b2d2      	uxtb	r2, r2
 8004b4a:	4611      	mov	r1, r2
 8004b4c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004b4e:	8812      	ldrh	r2, [r2, #0]
 8004b50:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8004b54:	b292      	uxth	r2, r2
 8004b56:	fb01 f202 	mul.w	r2, r1, r2
 8004b5a:	441a      	add	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	605a      	str	r2, [r3, #4]
 8004b60:	e009      	b.n	8004b76 <vl53l5cx_start_ranging+0x17e>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004b68:	8812      	ldrh	r2, [r2, #0]
 8004b6a:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8004b6e:	b292      	uxth	r2, r2
 8004b70:	441a      	add	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	605a      	str	r2, [r3, #4]
		}
		p_dev->data_read_size += (uint32_t)4;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	1d1a      	adds	r2, r3, #4
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	605a      	str	r2, [r3, #4]
 8004b80:	e000      	b.n	8004b84 <vl53l5cx_start_ranging+0x18c>
			continue;
 8004b82:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8004b84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b86:	3301      	adds	r3, #1
 8004b88:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b8c:	2b0b      	cmp	r3, #11
 8004b8e:	d988      	bls.n	8004aa2 <vl53l5cx_start_ranging+0xaa>
	}
	p_dev->data_read_size += (uint32_t)24;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f103 0218 	add.w	r2, r3, #24
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	605a      	str	r2, [r3, #4]

	status |= vl53l5cx_dci_write_data(p_dev,
 8004b9c:	f107 010c 	add.w	r1, r7, #12
 8004ba0:	2330      	movs	r3, #48	@ 0x30
 8004ba2:	f64d 1280 	movw	r2, #55680	@ 0xd980
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 fc32 	bl	8005410 <vl53l5cx_dci_write_data>
 8004bac:	4603      	mov	r3, r0
 8004bae:	461a      	mov	r2, r3
 8004bb0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output), VL53L5CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	653b      	str	r3, [r7, #80]	@ 0x50
	header_config[1] = i + (uint32_t)1;
 8004bc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	657b      	str	r3, [r7, #84]	@ 0x54

	status |= vl53l5cx_dci_write_data(p_dev,
 8004bc6:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8004bca:	2308      	movs	r3, #8
 8004bcc:	f64d 1268 	movw	r2, #55656	@ 0xd968
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 fc1d 	bl	8005410 <vl53l5cx_dci_write_data>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	461a      	mov	r2, r3
 8004bda:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004bde:	4313      	orrs	r3, r2
 8004be0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(header_config), VL53L5CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l5cx_dci_write_data(p_dev,
 8004be4:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8004be8:	2310      	movs	r3, #16
 8004bea:	f64d 1270 	movw	r2, #55664	@ 0xd970
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fc0e 	bl	8005410 <vl53l5cx_dci_write_data>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output_bh_enable), VL53L5CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fb fecc 	bl	80009a8 <VL53L5CX_WrByte>
 8004c10:	4603      	mov	r3, r0
 8004c12:	461a      	mov	r2, r3
 8004c14:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x09, 0x05);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2205      	movs	r2, #5
 8004c22:	2109      	movs	r1, #9
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7fb febf 	bl	80009a8 <VL53L5CX_WrByte>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fb feb1 	bl	80009a8 <VL53L5CX_WrByte>
 8004c46:	4603      	mov	r3, r0
 8004c48:	461a      	mov	r2, r3
 8004c4a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	/* Start ranging session */
	status |= VL53L5CX_WrMulti(&(p_dev->platform), VL53L5CX_UI_CMD_END -
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8004c5a:	2304      	movs	r3, #4
 8004c5c:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 8004c60:	f7fb feca 	bl	80009f8 <VL53L5CX_WrMulti>
 8004c64:	4603      	mov	r3, r0
 8004c66:	461a      	mov	r2, r3
 8004c68:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8004c72:	2303      	movs	r3, #3
 8004c74:	9301      	str	r3, [sp, #4]
 8004c76:	23ff      	movs	r3, #255	@ 0xff
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8004c7e:	2201      	movs	r2, #1
 8004c80:	2104      	movs	r1, #4
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7fe fe58 	bl	8003938 <_vl53l5cx_poll_for_answer>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004c90:	4313      	orrs	r3, r2
 8004c92:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l5cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
	status |= vl53l5cx_dci_read_data(p_dev,
 8004c9c:	230c      	movs	r3, #12
 8004c9e:	f245 4240 	movw	r2, #21568	@ 0x5440
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 fb2a 	bl	80052fc <vl53l5cx_dci_read_data>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	461a      	mov	r2, r3
 8004cac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
	if(tmp != p_dev->data_read_size)
 8004cc4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8004cc8:	461a      	mov	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d002      	beq.n	8004cd8 <vl53l5cx_start_ranging+0x2e0>
	{
		status |= VL53L5CX_STATUS_ERROR;
 8004cd2:	23ff      	movs	r3, #255	@ 0xff
 8004cd4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	}

	return status;
 8004cd8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3768      	adds	r7, #104	@ 0x68
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8004ce4:	08006694 	.word	0x08006694
 8004ce8:	080066a4 	.word	0x080066a4

08004cec <vl53l5cx_check_data_ready>:
}

uint8_t vl53l5cx_check_data_ready(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	73fb      	strb	r3, [r7, #15]

	status |= VL53L5CX_RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 8004d02:	2304      	movs	r3, #4
 8004d04:	2100      	movs	r1, #0
 8004d06:	f7fb fe97 	bl	8000a38 <VL53L5CX_RdMulti>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	7bfb      	ldrb	r3, [r7, #15]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	789b      	ldrb	r3, [r3, #2]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d020      	beq.n	8004d64 <vl53l5cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8004d28:	2bff      	cmp	r3, #255	@ 0xff
 8004d2a:	d01b      	beq.n	8004d64 <vl53l5cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 3501 	ldrb.w	r3, [r3, #1281]	@ 0x501
 8004d32:	2b05      	cmp	r3, #5
 8004d34:	d116      	bne.n	8004d64 <vl53l5cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 3502 	ldrb.w	r3, [r3, #1282]	@ 0x502
 8004d3c:	f003 0305 	and.w	r3, r3, #5
 8004d40:	2b05      	cmp	r3, #5
 8004d42:	d10f      	bne.n	8004d64 <vl53l5cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 3503 	ldrb.w	r3, [r3, #1283]	@ 0x503
 8004d4a:	f003 0310 	and.w	r3, r3, #16
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d008      	beq.n	8004d64 <vl53l5cx_check_data_ready+0x78>
			)
	{
		*p_isReady = (uint8_t)1;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2201      	movs	r2, #1
 8004d56:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	709a      	strb	r2, [r3, #2]
 8004d62:	e00e      	b.n	8004d82 <vl53l5cx_check_data_ready+0x96>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 3503 	ldrb.w	r3, [r3, #1283]	@ 0x503
 8004d6a:	b25b      	sxtb	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	da05      	bge.n	8004d7c <vl53l5cx_check_data_ready+0x90>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 2502 	ldrb.w	r2, [r3, #1282]	@ 0x502
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	73fb      	strb	r3, [r7, #15]
        }

		*p_isReady = 0;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8004d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <vl53l5cx_get_ranging_data>:

uint8_t vl53l5cx_get_ranging_data(
		VL53L5CX_Configuration		*p_dev,
		VL53L5CX_ResultsData		*p_results)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b088      	sub	sp, #32
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	77fb      	strb	r3, [r7, #31]
	union Block_header *bh_ptr;
	uint16_t header_id, footer_id;
	uint32_t i, j, msize;

	status |= VL53L5CX_RdMulti(&(p_dev->platform), 0x0,
 8004d9a:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= VL53L5CX_RdMulti(&(p_dev->platform), 0x0,
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2100      	movs	r1, #0
 8004da8:	f7fb fe46 	bl	8000a38 <VL53L5CX_RdMulti>
 8004dac:	4603      	mov	r3, r0
 8004dae:	461a      	mov	r2, r3
 8004db0:	7ffb      	ldrb	r3, [r7, #31]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	709a      	strb	r2, [r3, #2]
	VL53L5CX_SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	4619      	mov	r1, r3
 8004dce:	4610      	mov	r0, r2
 8004dd0:	f7fb fe64 	bl	8000a9c <VL53L5CX_SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i 
 8004dd4:	2310      	movs	r3, #16
 8004dd6:	61bb      	str	r3, [r7, #24]
 8004dd8:	e10e      	b.n	8004ff8 <vl53l5cx_get_ranging_data+0x26c>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	4413      	add	r3, r2
 8004de4:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > (uint32_t)0x1) 
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d915      	bls.n	8004e20 <vl53l5cx_get_ranging_data+0x94>
                    && (bh_ptr->type < (uint32_t)0xd))
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b0c      	cmp	r3, #12
 8004e00:	d80e      	bhi.n	8004e20 <vl53l5cx_get_ranging_data+0x94>
		{
			msize = bh_ptr->type * bh_ptr->size;
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	fb02 f303 	mul.w	r3, r2, r3
 8004e1c:	613b      	str	r3, [r7, #16]
 8004e1e:	e005      	b.n	8004e2c <vl53l5cx_get_ranging_data+0xa0>
		}
		else
		{
			msize = bh_ptr->size;
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	885b      	ldrh	r3, [r3, #2]
 8004e30:	f24e 0284 	movw	r2, #57476	@ 0xe084
 8004e34:	4293      	cmp	r3, r2
 8004e36:	f000 80bb 	beq.w	8004fb0 <vl53l5cx_get_ranging_data+0x224>
 8004e3a:	f24e 0284 	movw	r2, #57476	@ 0xe084
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	f300 80d2 	bgt.w	8004fe8 <vl53l5cx_get_ranging_data+0x25c>
 8004e44:	f24e 0244 	movw	r2, #57412	@ 0xe044
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	f000 80a3 	beq.w	8004f94 <vl53l5cx_get_ranging_data+0x208>
 8004e4e:	f24e 0244 	movw	r2, #57412	@ 0xe044
 8004e52:	4293      	cmp	r3, r2
 8004e54:	f300 80c8 	bgt.w	8004fe8 <vl53l5cx_get_ranging_data+0x25c>
 8004e58:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	f000 808b 	beq.w	8004f78 <vl53l5cx_get_ranging_data+0x1ec>
 8004e62:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 8004e66:	4293      	cmp	r3, r2
 8004e68:	f300 80be 	bgt.w	8004fe8 <vl53l5cx_get_ranging_data+0x25c>
 8004e6c:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d073      	beq.n	8004f5c <vl53l5cx_get_ranging_data+0x1d0>
 8004e74:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	f300 80b5 	bgt.w	8004fe8 <vl53l5cx_get_ranging_data+0x25c>
 8004e7e:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d05c      	beq.n	8004f40 <vl53l5cx_get_ranging_data+0x1b4>
 8004e86:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	f300 80ac 	bgt.w	8004fe8 <vl53l5cx_get_ranging_data+0x25c>
 8004e90:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d045      	beq.n	8004f24 <vl53l5cx_get_ranging_data+0x198>
 8004e98:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	f300 80a3 	bgt.w	8004fe8 <vl53l5cx_get_ranging_data+0x25c>
 8004ea2:	f64d 0258 	movw	r2, #55384	@ 0xd858
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	f000 8090 	beq.w	8004fcc <vl53l5cx_get_ranging_data+0x240>
 8004eac:	f64d 0258 	movw	r2, #55384	@ 0xd858
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	f300 8099 	bgt.w	8004fe8 <vl53l5cx_get_ranging_data+0x25c>
 8004eb6:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d024      	beq.n	8004f08 <vl53l5cx_get_ranging_data+0x17c>
 8004ebe:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	f300 8090 	bgt.w	8004fe8 <vl53l5cx_get_ranging_data+0x25c>
 8004ec8:	f245 42b4 	movw	r2, #21684	@ 0x54b4
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d004      	beq.n	8004eda <vl53l5cx_get_ranging_data+0x14e>
 8004ed0:	f245 42d0 	movw	r2, #21712	@ 0x54d0
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d00a      	beq.n	8004eee <vl53l5cx_get_ranging_data+0x162>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 8004ed8:	e086      	b.n	8004fe8 <vl53l5cx_get_ranging_data+0x25c>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	330c      	adds	r3, #12
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8004ee6:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	701a      	strb	r2, [r3, #0]
				break;
 8004eec:	e07d      	b.n	8004fea <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->ambient_per_spad,
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	4619      	mov	r1, r3
 8004f02:	f000 fddc 	bl	8005abe <memcpy>
				break;
 8004f06:	e070      	b.n	8004fea <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_spads_enabled,
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	3304      	adds	r3, #4
 8004f12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_spads_enabled,
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	f000 fdce 	bl	8005abe <memcpy>
				break;
 8004f22:	e062      	b.n	8004fea <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_target_detected,
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	f503 7082 	add.w	r0, r3, #260	@ 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	f000 fdc0 	bl	8005abe <memcpy>
				break;
 8004f3e:	e054      	b.n	8004fea <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->signal_per_spad,
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	f503 7011 	add.w	r0, r3, #580	@ 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	3304      	adds	r3, #4
 8004f4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	4619      	mov	r1, r3
 8004f56:	f000 fdb2 	bl	8005abe <memcpy>
				break;
 8004f5a:	e046      	b.n	8004fea <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->range_sigma_mm,
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	f503 7051 	add.w	r0, r3, #836	@ 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	3304      	adds	r3, #4
 8004f66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	4413      	add	r3, r2
				(void)memcpy(p_results->range_sigma_mm,
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	4619      	mov	r1, r3
 8004f72:	f000 fda4 	bl	8005abe <memcpy>
				break;
 8004f76:	e038      	b.n	8004fea <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->distance_mm,
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	f503 7071 	add.w	r0, r3, #964	@ 0x3c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	3304      	adds	r3, #4
 8004f82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	f000 fd96 	bl	8005abe <memcpy>
				break;
 8004f92:	e02a      	b.n	8004fea <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->reflectance,
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	f203 4044 	addw	r0, r3, #1092	@ 0x444
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4619      	mov	r1, r3
 8004faa:	f000 fd88 	bl	8005abe <memcpy>
				break;
 8004fae:	e01c      	b.n	8004fea <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->target_status,
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	f203 4084 	addw	r0, r3, #1156	@ 0x484
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	3304      	adds	r3, #4
 8004fba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	f000 fd7a 	bl	8005abe <memcpy>
				break;
 8004fca:	e00e      	b.n	8004fea <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(&p_results->motion_indicator,
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	f203 40c4 	addw	r0, r3, #1220	@ 0x4c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	3304      	adds	r3, #4
 8004fd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	f000 fd6c 	bl	8005abe <memcpy>
				break;
 8004fe6:	e000      	b.n	8004fea <vl53l5cx_get_ranging_data+0x25e>
				break;
 8004fe8:	bf00      	nop
		}
		i += msize;
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	4413      	add	r3, r2
 8004ff0:	61bb      	str	r3, [r7, #24]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	61bb      	str	r3, [r7, #24]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	f4ff aeeb 	bcc.w	8004dda <vl53l5cx_get_ranging_data+0x4e>

#ifndef VL53L5CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8005004:	2300      	movs	r3, #0
 8005006:	61bb      	str	r3, [r7, #24]
 8005008:	e00d      	b.n	8005026 <vl53l5cx_get_ranging_data+0x29a>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	0ada      	lsrs	r2, r3, #11
 8005016:	6839      	ldr	r1, [r7, #0]
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	3301      	adds	r3, #1
 8005024:	61bb      	str	r3, [r7, #24]
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	2b3f      	cmp	r3, #63	@ 0x3f
 800502a:	d9ee      	bls.n	800500a <vl53l5cx_get_ranging_data+0x27e>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 800502c:	2300      	movs	r3, #0
 800502e:	61bb      	str	r3, [r7, #24]
 8005030:	e056      	b.n	80050e0 <vl53l5cx_get_ranging_data+0x354>
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 800503a:	005b      	lsls	r3, r3, #1
 800503c:	4413      	add	r3, r2
 800503e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	da00      	bge.n	8005048 <vl53l5cx_get_ranging_data+0x2bc>
 8005046:	3303      	adds	r3, #3
 8005048:	109b      	asrs	r3, r3, #2
 800504a:	b219      	sxth	r1, r3
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	4413      	add	r3, r2
 8005058:	460a      	mov	r2, r1
 800505a:	809a      	strh	r2, [r3, #4]
		if(p_results->distance_mm[i] < 0)
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	4413      	add	r3, r2
 8005068:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	da07      	bge.n	8005080 <vl53l5cx_get_ranging_data+0x2f4>
		{
			p_results->distance_mm[i] = 0;
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	4413      	add	r3, r2
 800507c:	2200      	movs	r2, #0
 800507e:	809a      	strh	r2, [r3, #4]
		}
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	4413      	add	r3, r2
 8005086:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	085b      	lsrs	r3, r3, #1
 800508e:	b2d9      	uxtb	r1, r3
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	4413      	add	r3, r2
 8005096:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 800509a:	460a      	mov	r2, r1
 800509c:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	4413      	add	r3, r2
 80050aa:	889b      	ldrh	r3, [r3, #4]
 80050ac:	09db      	lsrs	r3, r3, #7
 80050ae:	b299      	uxth	r1, r3
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	4413      	add	r3, r2
 80050bc:	460a      	mov	r2, r1
 80050be:	809a      	strh	r2, [r3, #4]
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	3390      	adds	r3, #144	@ 0x90
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	0ada      	lsrs	r2, r3, #11
 80050ce:	6839      	ldr	r1, [r7, #0]
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	3390      	adds	r3, #144	@ 0x90
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	440b      	add	r3, r1
 80050d8:	605a      	str	r2, [r3, #4]
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	3301      	adds	r3, #1
 80050de:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80050e4:	d9a5      	bls.n	8005032 <vl53l5cx_get_ranging_data+0x2a6>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 80050e6:	2300      	movs	r3, #0
 80050e8:	61bb      	str	r3, [r7, #24]
 80050ea:	e01b      	b.n	8005124 <vl53l5cx_get_ranging_data+0x398>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d110      	bne.n	800511e <vl53l5cx_get_ranging_data+0x392>
			for(j = 0; j < (uint32_t)
 80050fc:	2300      	movs	r3, #0
 80050fe:	617b      	str	r3, [r7, #20]
 8005100:	e00a      	b.n	8005118 <vl53l5cx_get_ranging_data+0x38c>
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L5CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	4413      	add	r3, r2
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	4413      	add	r3, r2
 800510c:	22ff      	movs	r2, #255	@ 0xff
 800510e:	f883 2484 	strb.w	r2, [r3, #1156]	@ 0x484
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	3301      	adds	r3, #1
 8005116:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0f1      	beq.n	8005102 <vl53l5cx_get_ranging_data+0x376>
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	3301      	adds	r3, #1
 8005122:	61bb      	str	r3, [r7, #24]
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	2b3f      	cmp	r3, #63	@ 0x3f
 8005128:	d9e0      	bls.n	80050ec <vl53l5cx_get_ranging_data+0x360>
		}
	}
#endif

#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 800512a:	2300      	movs	r3, #0
 800512c:	61bb      	str	r3, [r7, #24]
 800512e:	e014      	b.n	800515a <vl53l5cx_get_ranging_data+0x3ce>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4413      	add	r3, r2
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	4a1f      	ldr	r2, [pc, #124]	@ (80051bc <vl53l5cx_get_ranging_data+0x430>)
 8005140:	fba2 2303 	umull	r2, r3, r2, r3
 8005144:	0bda      	lsrs	r2, r3, #15
 8005146:	6839      	ldr	r1, [r7, #0]
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	440b      	add	r3, r1
 8005152:	609a      	str	r2, [r3, #8]
	for(i = 0; i < (uint32_t)32; i++)
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	3301      	adds	r3, #1
 8005158:	61bb      	str	r3, [r7, #24]
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	2b1f      	cmp	r3, #31
 800515e:	d9e7      	bls.n	8005130 <vl53l5cx_get_ranging_data+0x3a4>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 3508 	ldrb.w	r3, [r3, #1288]	@ 0x508
 8005166:	021b      	lsls	r3, r3, #8
 8005168:	81fb      	strh	r3, [r7, #14]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 3509 	ldrb.w	r3, [r3, #1289]	@ 0x509
 8005170:	461a      	mov	r2, r3
 8005172:	89fb      	ldrh	r3, [r7, #14]
 8005174:	4313      	orrs	r3, r2
 8005176:	81fb      	strh	r3, [r7, #14]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
		- (uint32_t)4]) << 8) & 0xFF00U;
 800517c:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	4413      	add	r3, r2
 8005182:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8005186:	021b      	lsls	r3, r3, #8
 8005188:	81bb      	strh	r3, [r7, #12]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
		- (uint32_t)3])) & 0xFFU;
 800518e:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	4413      	add	r3, r2
 8005194:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8005198:	461a      	mov	r2, r3
 800519a:	89bb      	ldrh	r3, [r7, #12]
 800519c:	4313      	orrs	r3, r2
 800519e:	81bb      	strh	r3, [r7, #12]

	if(header_id != footer_id)
 80051a0:	89fa      	ldrh	r2, [r7, #14]
 80051a2:	89bb      	ldrh	r3, [r7, #12]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d003      	beq.n	80051b0 <vl53l5cx_get_ranging_data+0x424>
	{
		status |= VL53L5CX_STATUS_CORRUPTED_FRAME;
 80051a8:	7ffb      	ldrb	r3, [r7, #31]
 80051aa:	f043 0302 	orr.w	r3, r3, #2
 80051ae:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 80051b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3720      	adds	r7, #32
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	80008001 	.word	0x80008001

080051c0 <vl53l5cx_get_resolution>:

uint8_t vl53l5cx_get_resolution(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 80051d4:	2308      	movs	r3, #8
 80051d6:	f245 4250 	movw	r2, #21584	@ 0x5450
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f88e 	bl	80052fc <vl53l5cx_dci_read_data>
 80051e0:	4603      	mov	r3, r0
 80051e2:	461a      	mov	r2, r3
 80051e4:	7bfb      	ldrb	r3, [r7, #15]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 3501 	ldrb.w	r3, [r3, #1281]	@ 0x501
 80051f6:	fb12 f303 	smulbb	r3, r2, r3
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	701a      	strb	r2, [r3, #0]

	return status;
 8005200:	7bfb      	ldrb	r3, [r7, #15]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <vl53l5cx_set_ranging_frequency_hz>:
}

uint8_t vl53l5cx_set_ranging_frequency_hz(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b088      	sub	sp, #32
 800520e:	af04      	add	r7, sp, #16
 8005210:	6078      	str	r0, [r7, #4]
 8005212:	460b      	mov	r3, r1
 8005214:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8005216:	2300      	movs	r3, #0
 8005218:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 8005220:	2301      	movs	r3, #1
 8005222:	9302      	str	r3, [sp, #8]
 8005224:	2301      	movs	r3, #1
 8005226:	9301      	str	r3, [sp, #4]
 8005228:	1cfb      	adds	r3, r7, #3
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	2304      	movs	r3, #4
 800522e:	f245 4258 	movw	r2, #21592	@ 0x5458
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f98a 	bl	800554c <vl53l5cx_dci_replace_data>
 8005238:	4603      	mov	r3, r0
 800523a:	461a      	mov	r2, r3
 800523c:	7bfb      	ldrb	r3, [r7, #15]
 800523e:	4313      	orrs	r3, r2
 8005240:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 8005242:	7bfb      	ldrb	r3, [r7, #15]
}
 8005244:	4618      	mov	r0, r3
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <vl53l5cx_set_ranging_mode>:
}

uint8_t vl53l5cx_set_ranging_mode(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	460b      	mov	r3, r1
 8005256:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8005258:	2300      	movs	r3, #0
 800525a:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 800525c:	2300      	movs	r3, #0
 800525e:	60bb      	str	r3, [r7, #8]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 8005266:	2308      	movs	r3, #8
 8005268:	f64a 5230 	movw	r2, #44336	@ 0xad30
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f845 	bl	80052fc <vl53l5cx_dci_read_data>
 8005272:	4603      	mov	r3, r0
 8005274:	461a      	mov	r2, r3
 8005276:	7bfb      	ldrb	r3, [r7, #15]
 8005278:	4313      	orrs	r3, r2
 800527a:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 800527c:	78fb      	ldrb	r3, [r7, #3]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d002      	beq.n	8005288 <vl53l5cx_set_ranging_mode+0x3c>
 8005282:	2b03      	cmp	r3, #3
 8005284:	d00b      	beq.n	800529e <vl53l5cx_set_ranging_mode+0x52>
 8005286:	e015      	b.n	80052b4 <vl53l5cx_set_ranging_mode+0x68>
	{
		case VL53L5CX_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2501 	strb.w	r2, [r3, #1281]	@ 0x501
			p_dev->temp_buffer[0x03] = 0x3;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2203      	movs	r2, #3
 8005294:	f883 2503 	strb.w	r2, [r3, #1283]	@ 0x503
			single_range = 0x00;
 8005298:	2300      	movs	r3, #0
 800529a:	60bb      	str	r3, [r7, #8]
			break;
 800529c:	e00d      	b.n	80052ba <vl53l5cx_set_ranging_mode+0x6e>

		case VL53L5CX_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2203      	movs	r2, #3
 80052a2:	f883 2501 	strb.w	r2, [r3, #1281]	@ 0x501
			p_dev->temp_buffer[0x03] = 0x2;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2202      	movs	r2, #2
 80052aa:	f883 2503 	strb.w	r2, [r3, #1283]	@ 0x503
			single_range = 0x01;
 80052ae:	2301      	movs	r3, #1
 80052b0:	60bb      	str	r3, [r7, #8]
			break;
 80052b2:	e002      	b.n	80052ba <vl53l5cx_set_ranging_mode+0x6e>

		default:
			status = VL53L5CX_STATUS_INVALID_PARAM;
 80052b4:	237f      	movs	r3, #127	@ 0x7f
 80052b6:	73fb      	strb	r3, [r7, #15]
			break;
 80052b8:	bf00      	nop
	}

	status |= vl53l5cx_dci_write_data(p_dev, p_dev->temp_buffer,
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 80052c0:	2308      	movs	r3, #8
 80052c2:	f64a 5230 	movw	r2, #44336	@ 0xad30
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f8a2 	bl	8005410 <vl53l5cx_dci_write_data>
 80052cc:	4603      	mov	r3, r0
 80052ce:	461a      	mov	r2, r3
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 80052d6:	f107 0108 	add.w	r1, r7, #8
 80052da:	2304      	movs	r3, #4
 80052dc:	f64d 1264 	movw	r2, #55652	@ 0xd964
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f895 	bl	8005410 <vl53l5cx_dci_write_data>
 80052e6:	4603      	mov	r3, r0
 80052e8:	461a      	mov	r2, r3
 80052ea:	7bfb      	ldrb	r3, [r7, #15]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_SINGLE_RANGE, 
                        (uint16_t)sizeof(single_range));

	return status;
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
	...

080052fc <vl53l5cx_dci_read_data>:
uint8_t vl53l5cx_dci_read_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b08c      	sub	sp, #48	@ 0x30
 8005300:	af02      	add	r7, sp, #8
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L5CX_STATUS_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 8005310:	887b      	ldrh	r3, [r7, #2]
 8005312:	330c      	adds	r3, #12
 8005314:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 8005316:	4a3d      	ldr	r2, [pc, #244]	@ (800540c <vl53l5cx_dci_read_data+0x110>)
 8005318:	f107 0314 	add.w	r3, r7, #20
 800531c:	ca07      	ldmia	r2, {r0, r1, r2}
 800531e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
 8005322:	887b      	ldrh	r3, [r7, #2]
 8005324:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8005328:	d903      	bls.n	8005332 <vl53l5cx_dci_read_data+0x36>
	{
		status |= VL53L5CX_STATUS_ERROR;
 800532a:	23ff      	movs	r3, #255	@ 0xff
 800532c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8005330:	e065      	b.n	80053fe <vl53l5cx_dci_read_data+0x102>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	0a1b      	lsrs	r3, r3, #8
 8005336:	b2db      	uxtb	r3, r3
 8005338:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	b2db      	uxtb	r3, r3
 800533e:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 8005340:	887b      	ldrh	r3, [r7, #2]
 8005342:	111b      	asrs	r3, r3, #4
 8005344:	b2db      	uxtb	r3, r3
 8005346:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8005348:	887b      	ldrh	r3, [r7, #2]
 800534a:	b2db      	uxtb	r3, r3
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	b2db      	uxtb	r3, r3
 8005350:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= VL53L5CX_WrMulti(&(p_dev->platform),
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f107 0214 	add.w	r2, r7, #20
 8005358:	230c      	movs	r3, #12
 800535a:	f642 71f4 	movw	r1, #12276	@ 0x2ff4
 800535e:	f7fb fb4b 	bl	80009f8 <VL53L5CX_WrMulti>
 8005362:	4603      	mov	r3, r0
 8005364:	461a      	mov	r2, r3
 8005366:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800536a:	4313      	orrs	r3, r2
 800536c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			(VL53L5CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8005370:	2303      	movs	r3, #3
 8005372:	9301      	str	r3, [sp, #4]
 8005374:	23ff      	movs	r3, #255	@ 0xff
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 800537c:	2201      	movs	r2, #1
 800537e:	2104      	movs	r1, #4
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f7fe fad9 	bl	8003938 <_vl53l5cx_poll_for_answer>
 8005386:	4603      	mov	r3, r0
 8005388:	461a      	mov	r2, r3
 800538a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800538e:	4313      	orrs	r3, r2
 8005390:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			VL53L5CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= VL53L5CX_RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8005394:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
		status |= VL53L5CX_RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	f642 4104 	movw	r1, #11268	@ 0x2c04
 80053a2:	f7fb fb49 	bl	8000a38 <VL53L5CX_RdMulti>
 80053a6:	4603      	mov	r3, r0
 80053a8:	461a      	mov	r2, r3
 80053aa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80053ae:	4313      	orrs	r3, r2
 80053b0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		VL53L5CX_SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 80053ba:	887b      	ldrh	r3, [r7, #2]
 80053bc:	330c      	adds	r3, #12
 80053be:	b29b      	uxth	r3, r3
 80053c0:	4619      	mov	r1, r3
 80053c2:	4610      	mov	r0, r2
 80053c4:	f7fb fb6a 	bl	8000a9c <VL53L5CX_SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 80053c8:	2300      	movs	r3, #0
 80053ca:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80053cc:	e011      	b.n	80053f2 <vl53l5cx_dci_read_data+0xf6>
			data[i] = p_dev->temp_buffer[i + 4];
 80053ce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80053d2:	1d1a      	adds	r2, r3, #4
 80053d4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	440b      	add	r3, r1
 80053dc:	68f9      	ldr	r1, [r7, #12]
 80053de:	440a      	add	r2, r1
 80053e0:	f892 2500 	ldrb.w	r2, [r2, #1280]	@ 0x500
 80053e4:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 80053e6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	3301      	adds	r3, #1
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80053f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80053f6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80053fa:	429a      	cmp	r2, r3
 80053fc:	dbe7      	blt.n	80053ce <vl53l5cx_dci_read_data+0xd2>
		}
	}

	return status;
 80053fe:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 8005402:	4618      	mov	r0, r3
 8005404:	3728      	adds	r7, #40	@ 0x28
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	080066d4 	.word	0x080066d4

08005410 <vl53l5cx_dci_write_data>:
uint8_t vl53l5cx_dci_write_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b08c      	sub	sp, #48	@ 0x30
 8005414:	af02      	add	r7, sp, #8
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
 800541c:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 8005424:	2300      	movs	r3, #0
 8005426:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8005428:	2300      	movs	r3, #0
 800542a:	753b      	strb	r3, [r7, #20]
 800542c:	2300      	movs	r3, #0
 800542e:	757b      	strb	r3, [r7, #21]
 8005430:	2300      	movs	r3, #0
 8005432:	75bb      	strb	r3, [r7, #22]
 8005434:	230f      	movs	r3, #15
 8005436:	75fb      	strb	r3, [r7, #23]
 8005438:	2305      	movs	r3, #5
 800543a:	763b      	strb	r3, [r7, #24]
 800543c:	2301      	movs	r3, #1
 800543e:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8005440:	887b      	ldrh	r3, [r7, #2]
 8005442:	3308      	adds	r3, #8
 8005444:	121b      	asrs	r3, r3, #8
 8005446:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8005448:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 800544a:	887b      	ldrh	r3, [r7, #2]
 800544c:	b2db      	uxtb	r3, r3
 800544e:	3308      	adds	r3, #8
 8005450:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8005452:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L5CX_UI_CMD_END - 
 8005454:	887b      	ldrh	r3, [r7, #2]
 8005456:	f5c3 533f 	rsb	r3, r3, #12224	@ 0x2fc0
 800545a:	3334      	adds	r3, #52	@ 0x34
 800545c:	847b      	strh	r3, [r7, #34]	@ 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 800545e:	887b      	ldrh	r3, [r7, #2]
 8005460:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8005464:	d903      	bls.n	800546e <vl53l5cx_dci_write_data+0x5e>
           > (uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L5CX_STATUS_ERROR;
 8005466:	23ff      	movs	r3, #255	@ 0xff
 8005468:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800546c:	e068      	b.n	8005540 <vl53l5cx_dci_write_data+0x130>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	0a1b      	lsrs	r3, r3, #8
 8005472:	b2db      	uxtb	r3, r3
 8005474:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	b2db      	uxtb	r3, r3
 800547a:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 800547c:	887b      	ldrh	r3, [r7, #2]
 800547e:	111b      	asrs	r3, r3, #4
 8005480:	b2db      	uxtb	r3, r3
 8005482:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8005484:	887b      	ldrh	r3, [r7, #2]
 8005486:	b2db      	uxtb	r3, r3
 8005488:	011b      	lsls	r3, r3, #4
 800548a:	b2db      	uxtb	r3, r3
 800548c:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		VL53L5CX_SwapBuffer(data, data_size);
 800548e:	887b      	ldrh	r3, [r7, #2]
 8005490:	4619      	mov	r1, r3
 8005492:	68b8      	ldr	r0, [r7, #8]
 8005494:	f7fb fb02 	bl	8000a9c <VL53L5CX_SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8005498:	887b      	ldrh	r3, [r7, #2]
 800549a:	3b01      	subs	r3, #1
 800549c:	b29b      	uxth	r3, r3
 800549e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80054a0:	e012      	b.n	80054c8 <vl53l5cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 80054a2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	441a      	add	r2, r3
 80054aa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80054ae:	3304      	adds	r3, #4
 80054b0:	7811      	ldrb	r1, [r2, #0]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	4413      	add	r3, r2
 80054b6:	460a      	mov	r2, r1
 80054b8:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 80054bc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	3b01      	subs	r3, #1
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80054c8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	dae8      	bge.n	80054a2 <vl53l5cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054d6:	69fa      	ldr	r2, [r7, #28]
 80054d8:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 80054da:	887b      	ldrh	r3, [r7, #2]
 80054dc:	3304      	adds	r3, #4
 80054de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	4413      	add	r3, r2
 80054e6:	461a      	mov	r2, r3
 80054e8:	f107 0314 	add.w	r3, r7, #20
 80054ec:	cb03      	ldmia	r3!, {r0, r1}
 80054ee:	6010      	str	r0, [r2, #0]
 80054f0:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= VL53L5CX_WrMulti(&(p_dev->platform),address,
 80054f2:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 80054fa:	887b      	ldrh	r3, [r7, #2]
		status |= VL53L5CX_WrMulti(&(p_dev->platform),address,
 80054fc:	330c      	adds	r3, #12
 80054fe:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8005500:	f7fb fa7a 	bl	80009f8 <VL53L5CX_WrMulti>
 8005504:	4603      	mov	r3, r0
 8005506:	461a      	mov	r2, r3
 8005508:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800550c:	4313      	orrs	r3, r2
 800550e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8005512:	2303      	movs	r3, #3
 8005514:	9301      	str	r3, [sp, #4]
 8005516:	23ff      	movs	r3, #255	@ 0xff
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 800551e:	2201      	movs	r2, #1
 8005520:	2104      	movs	r1, #4
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f7fe fa08 	bl	8003938 <_vl53l5cx_poll_for_answer>
 8005528:	4603      	mov	r3, r0
 800552a:	461a      	mov	r2, r3
 800552c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005530:	4313      	orrs	r3, r2
 8005532:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

		VL53L5CX_SwapBuffer(data, data_size);
 8005536:	887b      	ldrh	r3, [r7, #2]
 8005538:	4619      	mov	r1, r3
 800553a:	68b8      	ldr	r0, [r7, #8]
 800553c:	f7fb faae 	bl	8000a9c <VL53L5CX_SwapBuffer>
	}

	return status;
 8005540:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005544:	4618      	mov	r0, r3
 8005546:	3728      	adds	r7, #40	@ 0x28
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <vl53l5cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	75fb      	strb	r3, [r7, #23]

	status |= vl53l5cx_dci_read_data(p_dev, data, index, data_size);
 800555e:	887b      	ldrh	r3, [r7, #2]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	68b9      	ldr	r1, [r7, #8]
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f7ff fec9 	bl	80052fc <vl53l5cx_dci_read_data>
 800556a:	4603      	mov	r3, r0
 800556c:	461a      	mov	r2, r3
 800556e:	7dfb      	ldrb	r3, [r7, #23]
 8005570:	4313      	orrs	r3, r2
 8005572:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8005574:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	4413      	add	r3, r2
 800557a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800557c:	6a39      	ldr	r1, [r7, #32]
 800557e:	4618      	mov	r0, r3
 8005580:	f000 fa9d 	bl	8005abe <memcpy>
	status |= vl53l5cx_dci_write_data(p_dev, data, index, data_size);
 8005584:	887b      	ldrh	r3, [r7, #2]
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	68b9      	ldr	r1, [r7, #8]
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f7ff ff40 	bl	8005410 <vl53l5cx_dci_write_data>
 8005590:	4603      	mov	r3, r0
 8005592:	461a      	mov	r2, r3
 8005594:	7dfb      	ldrb	r3, [r7, #23]
 8005596:	4313      	orrs	r3, r2
 8005598:	75fb      	strb	r3, [r7, #23]

	return status;
 800559a:	7dfb      	ldrb	r3, [r7, #23]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3718      	adds	r7, #24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <std>:
 80055a4:	2300      	movs	r3, #0
 80055a6:	b510      	push	{r4, lr}
 80055a8:	4604      	mov	r4, r0
 80055aa:	e9c0 3300 	strd	r3, r3, [r0]
 80055ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055b2:	6083      	str	r3, [r0, #8]
 80055b4:	8181      	strh	r1, [r0, #12]
 80055b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80055b8:	81c2      	strh	r2, [r0, #14]
 80055ba:	6183      	str	r3, [r0, #24]
 80055bc:	4619      	mov	r1, r3
 80055be:	2208      	movs	r2, #8
 80055c0:	305c      	adds	r0, #92	@ 0x5c
 80055c2:	f000 fa01 	bl	80059c8 <memset>
 80055c6:	4b0d      	ldr	r3, [pc, #52]	@ (80055fc <std+0x58>)
 80055c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80055ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005600 <std+0x5c>)
 80055cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80055ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005604 <std+0x60>)
 80055d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80055d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005608 <std+0x64>)
 80055d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80055d6:	4b0d      	ldr	r3, [pc, #52]	@ (800560c <std+0x68>)
 80055d8:	6224      	str	r4, [r4, #32]
 80055da:	429c      	cmp	r4, r3
 80055dc:	d006      	beq.n	80055ec <std+0x48>
 80055de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80055e2:	4294      	cmp	r4, r2
 80055e4:	d002      	beq.n	80055ec <std+0x48>
 80055e6:	33d0      	adds	r3, #208	@ 0xd0
 80055e8:	429c      	cmp	r4, r3
 80055ea:	d105      	bne.n	80055f8 <std+0x54>
 80055ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80055f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055f4:	f000 ba60 	b.w	8005ab8 <__retarget_lock_init_recursive>
 80055f8:	bd10      	pop	{r4, pc}
 80055fa:	bf00      	nop
 80055fc:	08005819 	.word	0x08005819
 8005600:	0800583b 	.word	0x0800583b
 8005604:	08005873 	.word	0x08005873
 8005608:	08005897 	.word	0x08005897
 800560c:	20001134 	.word	0x20001134

08005610 <stdio_exit_handler>:
 8005610:	4a02      	ldr	r2, [pc, #8]	@ (800561c <stdio_exit_handler+0xc>)
 8005612:	4903      	ldr	r1, [pc, #12]	@ (8005620 <stdio_exit_handler+0x10>)
 8005614:	4803      	ldr	r0, [pc, #12]	@ (8005624 <stdio_exit_handler+0x14>)
 8005616:	f000 b869 	b.w	80056ec <_fwalk_sglue>
 800561a:	bf00      	nop
 800561c:	2000000c 	.word	0x2000000c
 8005620:	08006375 	.word	0x08006375
 8005624:	2000001c 	.word	0x2000001c

08005628 <cleanup_stdio>:
 8005628:	6841      	ldr	r1, [r0, #4]
 800562a:	4b0c      	ldr	r3, [pc, #48]	@ (800565c <cleanup_stdio+0x34>)
 800562c:	4299      	cmp	r1, r3
 800562e:	b510      	push	{r4, lr}
 8005630:	4604      	mov	r4, r0
 8005632:	d001      	beq.n	8005638 <cleanup_stdio+0x10>
 8005634:	f000 fe9e 	bl	8006374 <_fflush_r>
 8005638:	68a1      	ldr	r1, [r4, #8]
 800563a:	4b09      	ldr	r3, [pc, #36]	@ (8005660 <cleanup_stdio+0x38>)
 800563c:	4299      	cmp	r1, r3
 800563e:	d002      	beq.n	8005646 <cleanup_stdio+0x1e>
 8005640:	4620      	mov	r0, r4
 8005642:	f000 fe97 	bl	8006374 <_fflush_r>
 8005646:	68e1      	ldr	r1, [r4, #12]
 8005648:	4b06      	ldr	r3, [pc, #24]	@ (8005664 <cleanup_stdio+0x3c>)
 800564a:	4299      	cmp	r1, r3
 800564c:	d004      	beq.n	8005658 <cleanup_stdio+0x30>
 800564e:	4620      	mov	r0, r4
 8005650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005654:	f000 be8e 	b.w	8006374 <_fflush_r>
 8005658:	bd10      	pop	{r4, pc}
 800565a:	bf00      	nop
 800565c:	20001134 	.word	0x20001134
 8005660:	2000119c 	.word	0x2000119c
 8005664:	20001204 	.word	0x20001204

08005668 <global_stdio_init.part.0>:
 8005668:	b510      	push	{r4, lr}
 800566a:	4b0b      	ldr	r3, [pc, #44]	@ (8005698 <global_stdio_init.part.0+0x30>)
 800566c:	4c0b      	ldr	r4, [pc, #44]	@ (800569c <global_stdio_init.part.0+0x34>)
 800566e:	4a0c      	ldr	r2, [pc, #48]	@ (80056a0 <global_stdio_init.part.0+0x38>)
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	4620      	mov	r0, r4
 8005674:	2200      	movs	r2, #0
 8005676:	2104      	movs	r1, #4
 8005678:	f7ff ff94 	bl	80055a4 <std>
 800567c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005680:	2201      	movs	r2, #1
 8005682:	2109      	movs	r1, #9
 8005684:	f7ff ff8e 	bl	80055a4 <std>
 8005688:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800568c:	2202      	movs	r2, #2
 800568e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005692:	2112      	movs	r1, #18
 8005694:	f7ff bf86 	b.w	80055a4 <std>
 8005698:	2000126c 	.word	0x2000126c
 800569c:	20001134 	.word	0x20001134
 80056a0:	08005611 	.word	0x08005611

080056a4 <__sfp_lock_acquire>:
 80056a4:	4801      	ldr	r0, [pc, #4]	@ (80056ac <__sfp_lock_acquire+0x8>)
 80056a6:	f000 ba08 	b.w	8005aba <__retarget_lock_acquire_recursive>
 80056aa:	bf00      	nop
 80056ac:	20001275 	.word	0x20001275

080056b0 <__sfp_lock_release>:
 80056b0:	4801      	ldr	r0, [pc, #4]	@ (80056b8 <__sfp_lock_release+0x8>)
 80056b2:	f000 ba03 	b.w	8005abc <__retarget_lock_release_recursive>
 80056b6:	bf00      	nop
 80056b8:	20001275 	.word	0x20001275

080056bc <__sinit>:
 80056bc:	b510      	push	{r4, lr}
 80056be:	4604      	mov	r4, r0
 80056c0:	f7ff fff0 	bl	80056a4 <__sfp_lock_acquire>
 80056c4:	6a23      	ldr	r3, [r4, #32]
 80056c6:	b11b      	cbz	r3, 80056d0 <__sinit+0x14>
 80056c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056cc:	f7ff bff0 	b.w	80056b0 <__sfp_lock_release>
 80056d0:	4b04      	ldr	r3, [pc, #16]	@ (80056e4 <__sinit+0x28>)
 80056d2:	6223      	str	r3, [r4, #32]
 80056d4:	4b04      	ldr	r3, [pc, #16]	@ (80056e8 <__sinit+0x2c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1f5      	bne.n	80056c8 <__sinit+0xc>
 80056dc:	f7ff ffc4 	bl	8005668 <global_stdio_init.part.0>
 80056e0:	e7f2      	b.n	80056c8 <__sinit+0xc>
 80056e2:	bf00      	nop
 80056e4:	08005629 	.word	0x08005629
 80056e8:	2000126c 	.word	0x2000126c

080056ec <_fwalk_sglue>:
 80056ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056f0:	4607      	mov	r7, r0
 80056f2:	4688      	mov	r8, r1
 80056f4:	4614      	mov	r4, r2
 80056f6:	2600      	movs	r6, #0
 80056f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056fc:	f1b9 0901 	subs.w	r9, r9, #1
 8005700:	d505      	bpl.n	800570e <_fwalk_sglue+0x22>
 8005702:	6824      	ldr	r4, [r4, #0]
 8005704:	2c00      	cmp	r4, #0
 8005706:	d1f7      	bne.n	80056f8 <_fwalk_sglue+0xc>
 8005708:	4630      	mov	r0, r6
 800570a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800570e:	89ab      	ldrh	r3, [r5, #12]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d907      	bls.n	8005724 <_fwalk_sglue+0x38>
 8005714:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005718:	3301      	adds	r3, #1
 800571a:	d003      	beq.n	8005724 <_fwalk_sglue+0x38>
 800571c:	4629      	mov	r1, r5
 800571e:	4638      	mov	r0, r7
 8005720:	47c0      	blx	r8
 8005722:	4306      	orrs	r6, r0
 8005724:	3568      	adds	r5, #104	@ 0x68
 8005726:	e7e9      	b.n	80056fc <_fwalk_sglue+0x10>

08005728 <iprintf>:
 8005728:	b40f      	push	{r0, r1, r2, r3}
 800572a:	b507      	push	{r0, r1, r2, lr}
 800572c:	4906      	ldr	r1, [pc, #24]	@ (8005748 <iprintf+0x20>)
 800572e:	ab04      	add	r3, sp, #16
 8005730:	6808      	ldr	r0, [r1, #0]
 8005732:	f853 2b04 	ldr.w	r2, [r3], #4
 8005736:	6881      	ldr	r1, [r0, #8]
 8005738:	9301      	str	r3, [sp, #4]
 800573a:	f000 faf1 	bl	8005d20 <_vfiprintf_r>
 800573e:	b003      	add	sp, #12
 8005740:	f85d eb04 	ldr.w	lr, [sp], #4
 8005744:	b004      	add	sp, #16
 8005746:	4770      	bx	lr
 8005748:	20000018 	.word	0x20000018

0800574c <putchar>:
 800574c:	4b02      	ldr	r3, [pc, #8]	@ (8005758 <putchar+0xc>)
 800574e:	4601      	mov	r1, r0
 8005750:	6818      	ldr	r0, [r3, #0]
 8005752:	6882      	ldr	r2, [r0, #8]
 8005754:	f000 be98 	b.w	8006488 <_putc_r>
 8005758:	20000018 	.word	0x20000018

0800575c <_puts_r>:
 800575c:	6a03      	ldr	r3, [r0, #32]
 800575e:	b570      	push	{r4, r5, r6, lr}
 8005760:	6884      	ldr	r4, [r0, #8]
 8005762:	4605      	mov	r5, r0
 8005764:	460e      	mov	r6, r1
 8005766:	b90b      	cbnz	r3, 800576c <_puts_r+0x10>
 8005768:	f7ff ffa8 	bl	80056bc <__sinit>
 800576c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800576e:	07db      	lsls	r3, r3, #31
 8005770:	d405      	bmi.n	800577e <_puts_r+0x22>
 8005772:	89a3      	ldrh	r3, [r4, #12]
 8005774:	0598      	lsls	r0, r3, #22
 8005776:	d402      	bmi.n	800577e <_puts_r+0x22>
 8005778:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800577a:	f000 f99e 	bl	8005aba <__retarget_lock_acquire_recursive>
 800577e:	89a3      	ldrh	r3, [r4, #12]
 8005780:	0719      	lsls	r1, r3, #28
 8005782:	d502      	bpl.n	800578a <_puts_r+0x2e>
 8005784:	6923      	ldr	r3, [r4, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d135      	bne.n	80057f6 <_puts_r+0x9a>
 800578a:	4621      	mov	r1, r4
 800578c:	4628      	mov	r0, r5
 800578e:	f000 f8c5 	bl	800591c <__swsetup_r>
 8005792:	b380      	cbz	r0, 80057f6 <_puts_r+0x9a>
 8005794:	f04f 35ff 	mov.w	r5, #4294967295
 8005798:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800579a:	07da      	lsls	r2, r3, #31
 800579c:	d405      	bmi.n	80057aa <_puts_r+0x4e>
 800579e:	89a3      	ldrh	r3, [r4, #12]
 80057a0:	059b      	lsls	r3, r3, #22
 80057a2:	d402      	bmi.n	80057aa <_puts_r+0x4e>
 80057a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057a6:	f000 f989 	bl	8005abc <__retarget_lock_release_recursive>
 80057aa:	4628      	mov	r0, r5
 80057ac:	bd70      	pop	{r4, r5, r6, pc}
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	da04      	bge.n	80057bc <_puts_r+0x60>
 80057b2:	69a2      	ldr	r2, [r4, #24]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	dc17      	bgt.n	80057e8 <_puts_r+0x8c>
 80057b8:	290a      	cmp	r1, #10
 80057ba:	d015      	beq.n	80057e8 <_puts_r+0x8c>
 80057bc:	6823      	ldr	r3, [r4, #0]
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	6022      	str	r2, [r4, #0]
 80057c2:	7019      	strb	r1, [r3, #0]
 80057c4:	68a3      	ldr	r3, [r4, #8]
 80057c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80057ca:	3b01      	subs	r3, #1
 80057cc:	60a3      	str	r3, [r4, #8]
 80057ce:	2900      	cmp	r1, #0
 80057d0:	d1ed      	bne.n	80057ae <_puts_r+0x52>
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	da11      	bge.n	80057fa <_puts_r+0x9e>
 80057d6:	4622      	mov	r2, r4
 80057d8:	210a      	movs	r1, #10
 80057da:	4628      	mov	r0, r5
 80057dc:	f000 f85f 	bl	800589e <__swbuf_r>
 80057e0:	3001      	adds	r0, #1
 80057e2:	d0d7      	beq.n	8005794 <_puts_r+0x38>
 80057e4:	250a      	movs	r5, #10
 80057e6:	e7d7      	b.n	8005798 <_puts_r+0x3c>
 80057e8:	4622      	mov	r2, r4
 80057ea:	4628      	mov	r0, r5
 80057ec:	f000 f857 	bl	800589e <__swbuf_r>
 80057f0:	3001      	adds	r0, #1
 80057f2:	d1e7      	bne.n	80057c4 <_puts_r+0x68>
 80057f4:	e7ce      	b.n	8005794 <_puts_r+0x38>
 80057f6:	3e01      	subs	r6, #1
 80057f8:	e7e4      	b.n	80057c4 <_puts_r+0x68>
 80057fa:	6823      	ldr	r3, [r4, #0]
 80057fc:	1c5a      	adds	r2, r3, #1
 80057fe:	6022      	str	r2, [r4, #0]
 8005800:	220a      	movs	r2, #10
 8005802:	701a      	strb	r2, [r3, #0]
 8005804:	e7ee      	b.n	80057e4 <_puts_r+0x88>
	...

08005808 <puts>:
 8005808:	4b02      	ldr	r3, [pc, #8]	@ (8005814 <puts+0xc>)
 800580a:	4601      	mov	r1, r0
 800580c:	6818      	ldr	r0, [r3, #0]
 800580e:	f7ff bfa5 	b.w	800575c <_puts_r>
 8005812:	bf00      	nop
 8005814:	20000018 	.word	0x20000018

08005818 <__sread>:
 8005818:	b510      	push	{r4, lr}
 800581a:	460c      	mov	r4, r1
 800581c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005820:	f000 f8fc 	bl	8005a1c <_read_r>
 8005824:	2800      	cmp	r0, #0
 8005826:	bfab      	itete	ge
 8005828:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800582a:	89a3      	ldrhlt	r3, [r4, #12]
 800582c:	181b      	addge	r3, r3, r0
 800582e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005832:	bfac      	ite	ge
 8005834:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005836:	81a3      	strhlt	r3, [r4, #12]
 8005838:	bd10      	pop	{r4, pc}

0800583a <__swrite>:
 800583a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800583e:	461f      	mov	r7, r3
 8005840:	898b      	ldrh	r3, [r1, #12]
 8005842:	05db      	lsls	r3, r3, #23
 8005844:	4605      	mov	r5, r0
 8005846:	460c      	mov	r4, r1
 8005848:	4616      	mov	r6, r2
 800584a:	d505      	bpl.n	8005858 <__swrite+0x1e>
 800584c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005850:	2302      	movs	r3, #2
 8005852:	2200      	movs	r2, #0
 8005854:	f000 f8d0 	bl	80059f8 <_lseek_r>
 8005858:	89a3      	ldrh	r3, [r4, #12]
 800585a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800585e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005862:	81a3      	strh	r3, [r4, #12]
 8005864:	4632      	mov	r2, r6
 8005866:	463b      	mov	r3, r7
 8005868:	4628      	mov	r0, r5
 800586a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800586e:	f000 b8e7 	b.w	8005a40 <_write_r>

08005872 <__sseek>:
 8005872:	b510      	push	{r4, lr}
 8005874:	460c      	mov	r4, r1
 8005876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800587a:	f000 f8bd 	bl	80059f8 <_lseek_r>
 800587e:	1c43      	adds	r3, r0, #1
 8005880:	89a3      	ldrh	r3, [r4, #12]
 8005882:	bf15      	itete	ne
 8005884:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005886:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800588a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800588e:	81a3      	strheq	r3, [r4, #12]
 8005890:	bf18      	it	ne
 8005892:	81a3      	strhne	r3, [r4, #12]
 8005894:	bd10      	pop	{r4, pc}

08005896 <__sclose>:
 8005896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800589a:	f000 b89d 	b.w	80059d8 <_close_r>

0800589e <__swbuf_r>:
 800589e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a0:	460e      	mov	r6, r1
 80058a2:	4614      	mov	r4, r2
 80058a4:	4605      	mov	r5, r0
 80058a6:	b118      	cbz	r0, 80058b0 <__swbuf_r+0x12>
 80058a8:	6a03      	ldr	r3, [r0, #32]
 80058aa:	b90b      	cbnz	r3, 80058b0 <__swbuf_r+0x12>
 80058ac:	f7ff ff06 	bl	80056bc <__sinit>
 80058b0:	69a3      	ldr	r3, [r4, #24]
 80058b2:	60a3      	str	r3, [r4, #8]
 80058b4:	89a3      	ldrh	r3, [r4, #12]
 80058b6:	071a      	lsls	r2, r3, #28
 80058b8:	d501      	bpl.n	80058be <__swbuf_r+0x20>
 80058ba:	6923      	ldr	r3, [r4, #16]
 80058bc:	b943      	cbnz	r3, 80058d0 <__swbuf_r+0x32>
 80058be:	4621      	mov	r1, r4
 80058c0:	4628      	mov	r0, r5
 80058c2:	f000 f82b 	bl	800591c <__swsetup_r>
 80058c6:	b118      	cbz	r0, 80058d0 <__swbuf_r+0x32>
 80058c8:	f04f 37ff 	mov.w	r7, #4294967295
 80058cc:	4638      	mov	r0, r7
 80058ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058d0:	6823      	ldr	r3, [r4, #0]
 80058d2:	6922      	ldr	r2, [r4, #16]
 80058d4:	1a98      	subs	r0, r3, r2
 80058d6:	6963      	ldr	r3, [r4, #20]
 80058d8:	b2f6      	uxtb	r6, r6
 80058da:	4283      	cmp	r3, r0
 80058dc:	4637      	mov	r7, r6
 80058de:	dc05      	bgt.n	80058ec <__swbuf_r+0x4e>
 80058e0:	4621      	mov	r1, r4
 80058e2:	4628      	mov	r0, r5
 80058e4:	f000 fd46 	bl	8006374 <_fflush_r>
 80058e8:	2800      	cmp	r0, #0
 80058ea:	d1ed      	bne.n	80058c8 <__swbuf_r+0x2a>
 80058ec:	68a3      	ldr	r3, [r4, #8]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	60a3      	str	r3, [r4, #8]
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	6022      	str	r2, [r4, #0]
 80058f8:	701e      	strb	r6, [r3, #0]
 80058fa:	6962      	ldr	r2, [r4, #20]
 80058fc:	1c43      	adds	r3, r0, #1
 80058fe:	429a      	cmp	r2, r3
 8005900:	d004      	beq.n	800590c <__swbuf_r+0x6e>
 8005902:	89a3      	ldrh	r3, [r4, #12]
 8005904:	07db      	lsls	r3, r3, #31
 8005906:	d5e1      	bpl.n	80058cc <__swbuf_r+0x2e>
 8005908:	2e0a      	cmp	r6, #10
 800590a:	d1df      	bne.n	80058cc <__swbuf_r+0x2e>
 800590c:	4621      	mov	r1, r4
 800590e:	4628      	mov	r0, r5
 8005910:	f000 fd30 	bl	8006374 <_fflush_r>
 8005914:	2800      	cmp	r0, #0
 8005916:	d0d9      	beq.n	80058cc <__swbuf_r+0x2e>
 8005918:	e7d6      	b.n	80058c8 <__swbuf_r+0x2a>
	...

0800591c <__swsetup_r>:
 800591c:	b538      	push	{r3, r4, r5, lr}
 800591e:	4b29      	ldr	r3, [pc, #164]	@ (80059c4 <__swsetup_r+0xa8>)
 8005920:	4605      	mov	r5, r0
 8005922:	6818      	ldr	r0, [r3, #0]
 8005924:	460c      	mov	r4, r1
 8005926:	b118      	cbz	r0, 8005930 <__swsetup_r+0x14>
 8005928:	6a03      	ldr	r3, [r0, #32]
 800592a:	b90b      	cbnz	r3, 8005930 <__swsetup_r+0x14>
 800592c:	f7ff fec6 	bl	80056bc <__sinit>
 8005930:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005934:	0719      	lsls	r1, r3, #28
 8005936:	d422      	bmi.n	800597e <__swsetup_r+0x62>
 8005938:	06da      	lsls	r2, r3, #27
 800593a:	d407      	bmi.n	800594c <__swsetup_r+0x30>
 800593c:	2209      	movs	r2, #9
 800593e:	602a      	str	r2, [r5, #0]
 8005940:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005944:	81a3      	strh	r3, [r4, #12]
 8005946:	f04f 30ff 	mov.w	r0, #4294967295
 800594a:	e033      	b.n	80059b4 <__swsetup_r+0x98>
 800594c:	0758      	lsls	r0, r3, #29
 800594e:	d512      	bpl.n	8005976 <__swsetup_r+0x5a>
 8005950:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005952:	b141      	cbz	r1, 8005966 <__swsetup_r+0x4a>
 8005954:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005958:	4299      	cmp	r1, r3
 800595a:	d002      	beq.n	8005962 <__swsetup_r+0x46>
 800595c:	4628      	mov	r0, r5
 800595e:	f000 f8bd 	bl	8005adc <_free_r>
 8005962:	2300      	movs	r3, #0
 8005964:	6363      	str	r3, [r4, #52]	@ 0x34
 8005966:	89a3      	ldrh	r3, [r4, #12]
 8005968:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800596c:	81a3      	strh	r3, [r4, #12]
 800596e:	2300      	movs	r3, #0
 8005970:	6063      	str	r3, [r4, #4]
 8005972:	6923      	ldr	r3, [r4, #16]
 8005974:	6023      	str	r3, [r4, #0]
 8005976:	89a3      	ldrh	r3, [r4, #12]
 8005978:	f043 0308 	orr.w	r3, r3, #8
 800597c:	81a3      	strh	r3, [r4, #12]
 800597e:	6923      	ldr	r3, [r4, #16]
 8005980:	b94b      	cbnz	r3, 8005996 <__swsetup_r+0x7a>
 8005982:	89a3      	ldrh	r3, [r4, #12]
 8005984:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005988:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800598c:	d003      	beq.n	8005996 <__swsetup_r+0x7a>
 800598e:	4621      	mov	r1, r4
 8005990:	4628      	mov	r0, r5
 8005992:	f000 fd3d 	bl	8006410 <__smakebuf_r>
 8005996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800599a:	f013 0201 	ands.w	r2, r3, #1
 800599e:	d00a      	beq.n	80059b6 <__swsetup_r+0x9a>
 80059a0:	2200      	movs	r2, #0
 80059a2:	60a2      	str	r2, [r4, #8]
 80059a4:	6962      	ldr	r2, [r4, #20]
 80059a6:	4252      	negs	r2, r2
 80059a8:	61a2      	str	r2, [r4, #24]
 80059aa:	6922      	ldr	r2, [r4, #16]
 80059ac:	b942      	cbnz	r2, 80059c0 <__swsetup_r+0xa4>
 80059ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80059b2:	d1c5      	bne.n	8005940 <__swsetup_r+0x24>
 80059b4:	bd38      	pop	{r3, r4, r5, pc}
 80059b6:	0799      	lsls	r1, r3, #30
 80059b8:	bf58      	it	pl
 80059ba:	6962      	ldrpl	r2, [r4, #20]
 80059bc:	60a2      	str	r2, [r4, #8]
 80059be:	e7f4      	b.n	80059aa <__swsetup_r+0x8e>
 80059c0:	2000      	movs	r0, #0
 80059c2:	e7f7      	b.n	80059b4 <__swsetup_r+0x98>
 80059c4:	20000018 	.word	0x20000018

080059c8 <memset>:
 80059c8:	4402      	add	r2, r0
 80059ca:	4603      	mov	r3, r0
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d100      	bne.n	80059d2 <memset+0xa>
 80059d0:	4770      	bx	lr
 80059d2:	f803 1b01 	strb.w	r1, [r3], #1
 80059d6:	e7f9      	b.n	80059cc <memset+0x4>

080059d8 <_close_r>:
 80059d8:	b538      	push	{r3, r4, r5, lr}
 80059da:	4d06      	ldr	r5, [pc, #24]	@ (80059f4 <_close_r+0x1c>)
 80059dc:	2300      	movs	r3, #0
 80059de:	4604      	mov	r4, r0
 80059e0:	4608      	mov	r0, r1
 80059e2:	602b      	str	r3, [r5, #0]
 80059e4:	f7fb f9a2 	bl	8000d2c <_close>
 80059e8:	1c43      	adds	r3, r0, #1
 80059ea:	d102      	bne.n	80059f2 <_close_r+0x1a>
 80059ec:	682b      	ldr	r3, [r5, #0]
 80059ee:	b103      	cbz	r3, 80059f2 <_close_r+0x1a>
 80059f0:	6023      	str	r3, [r4, #0]
 80059f2:	bd38      	pop	{r3, r4, r5, pc}
 80059f4:	20001270 	.word	0x20001270

080059f8 <_lseek_r>:
 80059f8:	b538      	push	{r3, r4, r5, lr}
 80059fa:	4d07      	ldr	r5, [pc, #28]	@ (8005a18 <_lseek_r+0x20>)
 80059fc:	4604      	mov	r4, r0
 80059fe:	4608      	mov	r0, r1
 8005a00:	4611      	mov	r1, r2
 8005a02:	2200      	movs	r2, #0
 8005a04:	602a      	str	r2, [r5, #0]
 8005a06:	461a      	mov	r2, r3
 8005a08:	f7fb f9b7 	bl	8000d7a <_lseek>
 8005a0c:	1c43      	adds	r3, r0, #1
 8005a0e:	d102      	bne.n	8005a16 <_lseek_r+0x1e>
 8005a10:	682b      	ldr	r3, [r5, #0]
 8005a12:	b103      	cbz	r3, 8005a16 <_lseek_r+0x1e>
 8005a14:	6023      	str	r3, [r4, #0]
 8005a16:	bd38      	pop	{r3, r4, r5, pc}
 8005a18:	20001270 	.word	0x20001270

08005a1c <_read_r>:
 8005a1c:	b538      	push	{r3, r4, r5, lr}
 8005a1e:	4d07      	ldr	r5, [pc, #28]	@ (8005a3c <_read_r+0x20>)
 8005a20:	4604      	mov	r4, r0
 8005a22:	4608      	mov	r0, r1
 8005a24:	4611      	mov	r1, r2
 8005a26:	2200      	movs	r2, #0
 8005a28:	602a      	str	r2, [r5, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f7fb f961 	bl	8000cf2 <_read>
 8005a30:	1c43      	adds	r3, r0, #1
 8005a32:	d102      	bne.n	8005a3a <_read_r+0x1e>
 8005a34:	682b      	ldr	r3, [r5, #0]
 8005a36:	b103      	cbz	r3, 8005a3a <_read_r+0x1e>
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	bd38      	pop	{r3, r4, r5, pc}
 8005a3c:	20001270 	.word	0x20001270

08005a40 <_write_r>:
 8005a40:	b538      	push	{r3, r4, r5, lr}
 8005a42:	4d07      	ldr	r5, [pc, #28]	@ (8005a60 <_write_r+0x20>)
 8005a44:	4604      	mov	r4, r0
 8005a46:	4608      	mov	r0, r1
 8005a48:	4611      	mov	r1, r2
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	602a      	str	r2, [r5, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	f7fa fd86 	bl	8000560 <_write>
 8005a54:	1c43      	adds	r3, r0, #1
 8005a56:	d102      	bne.n	8005a5e <_write_r+0x1e>
 8005a58:	682b      	ldr	r3, [r5, #0]
 8005a5a:	b103      	cbz	r3, 8005a5e <_write_r+0x1e>
 8005a5c:	6023      	str	r3, [r4, #0]
 8005a5e:	bd38      	pop	{r3, r4, r5, pc}
 8005a60:	20001270 	.word	0x20001270

08005a64 <__errno>:
 8005a64:	4b01      	ldr	r3, [pc, #4]	@ (8005a6c <__errno+0x8>)
 8005a66:	6818      	ldr	r0, [r3, #0]
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	20000018 	.word	0x20000018

08005a70 <__libc_init_array>:
 8005a70:	b570      	push	{r4, r5, r6, lr}
 8005a72:	4d0d      	ldr	r5, [pc, #52]	@ (8005aa8 <__libc_init_array+0x38>)
 8005a74:	4c0d      	ldr	r4, [pc, #52]	@ (8005aac <__libc_init_array+0x3c>)
 8005a76:	1b64      	subs	r4, r4, r5
 8005a78:	10a4      	asrs	r4, r4, #2
 8005a7a:	2600      	movs	r6, #0
 8005a7c:	42a6      	cmp	r6, r4
 8005a7e:	d109      	bne.n	8005a94 <__libc_init_array+0x24>
 8005a80:	4d0b      	ldr	r5, [pc, #44]	@ (8005ab0 <__libc_init_array+0x40>)
 8005a82:	4c0c      	ldr	r4, [pc, #48]	@ (8005ab4 <__libc_init_array+0x44>)
 8005a84:	f000 fd66 	bl	8006554 <_init>
 8005a88:	1b64      	subs	r4, r4, r5
 8005a8a:	10a4      	asrs	r4, r4, #2
 8005a8c:	2600      	movs	r6, #0
 8005a8e:	42a6      	cmp	r6, r4
 8005a90:	d105      	bne.n	8005a9e <__libc_init_array+0x2e>
 8005a92:	bd70      	pop	{r4, r5, r6, pc}
 8005a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a98:	4798      	blx	r3
 8005a9a:	3601      	adds	r6, #1
 8005a9c:	e7ee      	b.n	8005a7c <__libc_init_array+0xc>
 8005a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aa2:	4798      	blx	r3
 8005aa4:	3601      	adds	r6, #1
 8005aa6:	e7f2      	b.n	8005a8e <__libc_init_array+0x1e>
 8005aa8:	0801be30 	.word	0x0801be30
 8005aac:	0801be30 	.word	0x0801be30
 8005ab0:	0801be30 	.word	0x0801be30
 8005ab4:	0801be34 	.word	0x0801be34

08005ab8 <__retarget_lock_init_recursive>:
 8005ab8:	4770      	bx	lr

08005aba <__retarget_lock_acquire_recursive>:
 8005aba:	4770      	bx	lr

08005abc <__retarget_lock_release_recursive>:
 8005abc:	4770      	bx	lr

08005abe <memcpy>:
 8005abe:	440a      	add	r2, r1
 8005ac0:	4291      	cmp	r1, r2
 8005ac2:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ac6:	d100      	bne.n	8005aca <memcpy+0xc>
 8005ac8:	4770      	bx	lr
 8005aca:	b510      	push	{r4, lr}
 8005acc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ad0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ad4:	4291      	cmp	r1, r2
 8005ad6:	d1f9      	bne.n	8005acc <memcpy+0xe>
 8005ad8:	bd10      	pop	{r4, pc}
	...

08005adc <_free_r>:
 8005adc:	b538      	push	{r3, r4, r5, lr}
 8005ade:	4605      	mov	r5, r0
 8005ae0:	2900      	cmp	r1, #0
 8005ae2:	d041      	beq.n	8005b68 <_free_r+0x8c>
 8005ae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ae8:	1f0c      	subs	r4, r1, #4
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	bfb8      	it	lt
 8005aee:	18e4      	addlt	r4, r4, r3
 8005af0:	f000 f8e0 	bl	8005cb4 <__malloc_lock>
 8005af4:	4a1d      	ldr	r2, [pc, #116]	@ (8005b6c <_free_r+0x90>)
 8005af6:	6813      	ldr	r3, [r2, #0]
 8005af8:	b933      	cbnz	r3, 8005b08 <_free_r+0x2c>
 8005afa:	6063      	str	r3, [r4, #4]
 8005afc:	6014      	str	r4, [r2, #0]
 8005afe:	4628      	mov	r0, r5
 8005b00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b04:	f000 b8dc 	b.w	8005cc0 <__malloc_unlock>
 8005b08:	42a3      	cmp	r3, r4
 8005b0a:	d908      	bls.n	8005b1e <_free_r+0x42>
 8005b0c:	6820      	ldr	r0, [r4, #0]
 8005b0e:	1821      	adds	r1, r4, r0
 8005b10:	428b      	cmp	r3, r1
 8005b12:	bf01      	itttt	eq
 8005b14:	6819      	ldreq	r1, [r3, #0]
 8005b16:	685b      	ldreq	r3, [r3, #4]
 8005b18:	1809      	addeq	r1, r1, r0
 8005b1a:	6021      	streq	r1, [r4, #0]
 8005b1c:	e7ed      	b.n	8005afa <_free_r+0x1e>
 8005b1e:	461a      	mov	r2, r3
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	b10b      	cbz	r3, 8005b28 <_free_r+0x4c>
 8005b24:	42a3      	cmp	r3, r4
 8005b26:	d9fa      	bls.n	8005b1e <_free_r+0x42>
 8005b28:	6811      	ldr	r1, [r2, #0]
 8005b2a:	1850      	adds	r0, r2, r1
 8005b2c:	42a0      	cmp	r0, r4
 8005b2e:	d10b      	bne.n	8005b48 <_free_r+0x6c>
 8005b30:	6820      	ldr	r0, [r4, #0]
 8005b32:	4401      	add	r1, r0
 8005b34:	1850      	adds	r0, r2, r1
 8005b36:	4283      	cmp	r3, r0
 8005b38:	6011      	str	r1, [r2, #0]
 8005b3a:	d1e0      	bne.n	8005afe <_free_r+0x22>
 8005b3c:	6818      	ldr	r0, [r3, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	6053      	str	r3, [r2, #4]
 8005b42:	4408      	add	r0, r1
 8005b44:	6010      	str	r0, [r2, #0]
 8005b46:	e7da      	b.n	8005afe <_free_r+0x22>
 8005b48:	d902      	bls.n	8005b50 <_free_r+0x74>
 8005b4a:	230c      	movs	r3, #12
 8005b4c:	602b      	str	r3, [r5, #0]
 8005b4e:	e7d6      	b.n	8005afe <_free_r+0x22>
 8005b50:	6820      	ldr	r0, [r4, #0]
 8005b52:	1821      	adds	r1, r4, r0
 8005b54:	428b      	cmp	r3, r1
 8005b56:	bf04      	itt	eq
 8005b58:	6819      	ldreq	r1, [r3, #0]
 8005b5a:	685b      	ldreq	r3, [r3, #4]
 8005b5c:	6063      	str	r3, [r4, #4]
 8005b5e:	bf04      	itt	eq
 8005b60:	1809      	addeq	r1, r1, r0
 8005b62:	6021      	streq	r1, [r4, #0]
 8005b64:	6054      	str	r4, [r2, #4]
 8005b66:	e7ca      	b.n	8005afe <_free_r+0x22>
 8005b68:	bd38      	pop	{r3, r4, r5, pc}
 8005b6a:	bf00      	nop
 8005b6c:	2000127c 	.word	0x2000127c

08005b70 <sbrk_aligned>:
 8005b70:	b570      	push	{r4, r5, r6, lr}
 8005b72:	4e0f      	ldr	r6, [pc, #60]	@ (8005bb0 <sbrk_aligned+0x40>)
 8005b74:	460c      	mov	r4, r1
 8005b76:	6831      	ldr	r1, [r6, #0]
 8005b78:	4605      	mov	r5, r0
 8005b7a:	b911      	cbnz	r1, 8005b82 <sbrk_aligned+0x12>
 8005b7c:	f000 fcda 	bl	8006534 <_sbrk_r>
 8005b80:	6030      	str	r0, [r6, #0]
 8005b82:	4621      	mov	r1, r4
 8005b84:	4628      	mov	r0, r5
 8005b86:	f000 fcd5 	bl	8006534 <_sbrk_r>
 8005b8a:	1c43      	adds	r3, r0, #1
 8005b8c:	d103      	bne.n	8005b96 <sbrk_aligned+0x26>
 8005b8e:	f04f 34ff 	mov.w	r4, #4294967295
 8005b92:	4620      	mov	r0, r4
 8005b94:	bd70      	pop	{r4, r5, r6, pc}
 8005b96:	1cc4      	adds	r4, r0, #3
 8005b98:	f024 0403 	bic.w	r4, r4, #3
 8005b9c:	42a0      	cmp	r0, r4
 8005b9e:	d0f8      	beq.n	8005b92 <sbrk_aligned+0x22>
 8005ba0:	1a21      	subs	r1, r4, r0
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	f000 fcc6 	bl	8006534 <_sbrk_r>
 8005ba8:	3001      	adds	r0, #1
 8005baa:	d1f2      	bne.n	8005b92 <sbrk_aligned+0x22>
 8005bac:	e7ef      	b.n	8005b8e <sbrk_aligned+0x1e>
 8005bae:	bf00      	nop
 8005bb0:	20001278 	.word	0x20001278

08005bb4 <_malloc_r>:
 8005bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bb8:	1ccd      	adds	r5, r1, #3
 8005bba:	f025 0503 	bic.w	r5, r5, #3
 8005bbe:	3508      	adds	r5, #8
 8005bc0:	2d0c      	cmp	r5, #12
 8005bc2:	bf38      	it	cc
 8005bc4:	250c      	movcc	r5, #12
 8005bc6:	2d00      	cmp	r5, #0
 8005bc8:	4606      	mov	r6, r0
 8005bca:	db01      	blt.n	8005bd0 <_malloc_r+0x1c>
 8005bcc:	42a9      	cmp	r1, r5
 8005bce:	d904      	bls.n	8005bda <_malloc_r+0x26>
 8005bd0:	230c      	movs	r3, #12
 8005bd2:	6033      	str	r3, [r6, #0]
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005cb0 <_malloc_r+0xfc>
 8005bde:	f000 f869 	bl	8005cb4 <__malloc_lock>
 8005be2:	f8d8 3000 	ldr.w	r3, [r8]
 8005be6:	461c      	mov	r4, r3
 8005be8:	bb44      	cbnz	r4, 8005c3c <_malloc_r+0x88>
 8005bea:	4629      	mov	r1, r5
 8005bec:	4630      	mov	r0, r6
 8005bee:	f7ff ffbf 	bl	8005b70 <sbrk_aligned>
 8005bf2:	1c43      	adds	r3, r0, #1
 8005bf4:	4604      	mov	r4, r0
 8005bf6:	d158      	bne.n	8005caa <_malloc_r+0xf6>
 8005bf8:	f8d8 4000 	ldr.w	r4, [r8]
 8005bfc:	4627      	mov	r7, r4
 8005bfe:	2f00      	cmp	r7, #0
 8005c00:	d143      	bne.n	8005c8a <_malloc_r+0xd6>
 8005c02:	2c00      	cmp	r4, #0
 8005c04:	d04b      	beq.n	8005c9e <_malloc_r+0xea>
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	4639      	mov	r1, r7
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	eb04 0903 	add.w	r9, r4, r3
 8005c10:	f000 fc90 	bl	8006534 <_sbrk_r>
 8005c14:	4581      	cmp	r9, r0
 8005c16:	d142      	bne.n	8005c9e <_malloc_r+0xea>
 8005c18:	6821      	ldr	r1, [r4, #0]
 8005c1a:	1a6d      	subs	r5, r5, r1
 8005c1c:	4629      	mov	r1, r5
 8005c1e:	4630      	mov	r0, r6
 8005c20:	f7ff ffa6 	bl	8005b70 <sbrk_aligned>
 8005c24:	3001      	adds	r0, #1
 8005c26:	d03a      	beq.n	8005c9e <_malloc_r+0xea>
 8005c28:	6823      	ldr	r3, [r4, #0]
 8005c2a:	442b      	add	r3, r5
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	f8d8 3000 	ldr.w	r3, [r8]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	bb62      	cbnz	r2, 8005c90 <_malloc_r+0xdc>
 8005c36:	f8c8 7000 	str.w	r7, [r8]
 8005c3a:	e00f      	b.n	8005c5c <_malloc_r+0xa8>
 8005c3c:	6822      	ldr	r2, [r4, #0]
 8005c3e:	1b52      	subs	r2, r2, r5
 8005c40:	d420      	bmi.n	8005c84 <_malloc_r+0xd0>
 8005c42:	2a0b      	cmp	r2, #11
 8005c44:	d917      	bls.n	8005c76 <_malloc_r+0xc2>
 8005c46:	1961      	adds	r1, r4, r5
 8005c48:	42a3      	cmp	r3, r4
 8005c4a:	6025      	str	r5, [r4, #0]
 8005c4c:	bf18      	it	ne
 8005c4e:	6059      	strne	r1, [r3, #4]
 8005c50:	6863      	ldr	r3, [r4, #4]
 8005c52:	bf08      	it	eq
 8005c54:	f8c8 1000 	streq.w	r1, [r8]
 8005c58:	5162      	str	r2, [r4, r5]
 8005c5a:	604b      	str	r3, [r1, #4]
 8005c5c:	4630      	mov	r0, r6
 8005c5e:	f000 f82f 	bl	8005cc0 <__malloc_unlock>
 8005c62:	f104 000b 	add.w	r0, r4, #11
 8005c66:	1d23      	adds	r3, r4, #4
 8005c68:	f020 0007 	bic.w	r0, r0, #7
 8005c6c:	1ac2      	subs	r2, r0, r3
 8005c6e:	bf1c      	itt	ne
 8005c70:	1a1b      	subne	r3, r3, r0
 8005c72:	50a3      	strne	r3, [r4, r2]
 8005c74:	e7af      	b.n	8005bd6 <_malloc_r+0x22>
 8005c76:	6862      	ldr	r2, [r4, #4]
 8005c78:	42a3      	cmp	r3, r4
 8005c7a:	bf0c      	ite	eq
 8005c7c:	f8c8 2000 	streq.w	r2, [r8]
 8005c80:	605a      	strne	r2, [r3, #4]
 8005c82:	e7eb      	b.n	8005c5c <_malloc_r+0xa8>
 8005c84:	4623      	mov	r3, r4
 8005c86:	6864      	ldr	r4, [r4, #4]
 8005c88:	e7ae      	b.n	8005be8 <_malloc_r+0x34>
 8005c8a:	463c      	mov	r4, r7
 8005c8c:	687f      	ldr	r7, [r7, #4]
 8005c8e:	e7b6      	b.n	8005bfe <_malloc_r+0x4a>
 8005c90:	461a      	mov	r2, r3
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	42a3      	cmp	r3, r4
 8005c96:	d1fb      	bne.n	8005c90 <_malloc_r+0xdc>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	6053      	str	r3, [r2, #4]
 8005c9c:	e7de      	b.n	8005c5c <_malloc_r+0xa8>
 8005c9e:	230c      	movs	r3, #12
 8005ca0:	6033      	str	r3, [r6, #0]
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	f000 f80c 	bl	8005cc0 <__malloc_unlock>
 8005ca8:	e794      	b.n	8005bd4 <_malloc_r+0x20>
 8005caa:	6005      	str	r5, [r0, #0]
 8005cac:	e7d6      	b.n	8005c5c <_malloc_r+0xa8>
 8005cae:	bf00      	nop
 8005cb0:	2000127c 	.word	0x2000127c

08005cb4 <__malloc_lock>:
 8005cb4:	4801      	ldr	r0, [pc, #4]	@ (8005cbc <__malloc_lock+0x8>)
 8005cb6:	f7ff bf00 	b.w	8005aba <__retarget_lock_acquire_recursive>
 8005cba:	bf00      	nop
 8005cbc:	20001274 	.word	0x20001274

08005cc0 <__malloc_unlock>:
 8005cc0:	4801      	ldr	r0, [pc, #4]	@ (8005cc8 <__malloc_unlock+0x8>)
 8005cc2:	f7ff befb 	b.w	8005abc <__retarget_lock_release_recursive>
 8005cc6:	bf00      	nop
 8005cc8:	20001274 	.word	0x20001274

08005ccc <__sfputc_r>:
 8005ccc:	6893      	ldr	r3, [r2, #8]
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	b410      	push	{r4}
 8005cd4:	6093      	str	r3, [r2, #8]
 8005cd6:	da08      	bge.n	8005cea <__sfputc_r+0x1e>
 8005cd8:	6994      	ldr	r4, [r2, #24]
 8005cda:	42a3      	cmp	r3, r4
 8005cdc:	db01      	blt.n	8005ce2 <__sfputc_r+0x16>
 8005cde:	290a      	cmp	r1, #10
 8005ce0:	d103      	bne.n	8005cea <__sfputc_r+0x1e>
 8005ce2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ce6:	f7ff bdda 	b.w	800589e <__swbuf_r>
 8005cea:	6813      	ldr	r3, [r2, #0]
 8005cec:	1c58      	adds	r0, r3, #1
 8005cee:	6010      	str	r0, [r2, #0]
 8005cf0:	7019      	strb	r1, [r3, #0]
 8005cf2:	4608      	mov	r0, r1
 8005cf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <__sfputs_r>:
 8005cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cfc:	4606      	mov	r6, r0
 8005cfe:	460f      	mov	r7, r1
 8005d00:	4614      	mov	r4, r2
 8005d02:	18d5      	adds	r5, r2, r3
 8005d04:	42ac      	cmp	r4, r5
 8005d06:	d101      	bne.n	8005d0c <__sfputs_r+0x12>
 8005d08:	2000      	movs	r0, #0
 8005d0a:	e007      	b.n	8005d1c <__sfputs_r+0x22>
 8005d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d10:	463a      	mov	r2, r7
 8005d12:	4630      	mov	r0, r6
 8005d14:	f7ff ffda 	bl	8005ccc <__sfputc_r>
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	d1f3      	bne.n	8005d04 <__sfputs_r+0xa>
 8005d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d20 <_vfiprintf_r>:
 8005d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d24:	460d      	mov	r5, r1
 8005d26:	b09d      	sub	sp, #116	@ 0x74
 8005d28:	4614      	mov	r4, r2
 8005d2a:	4698      	mov	r8, r3
 8005d2c:	4606      	mov	r6, r0
 8005d2e:	b118      	cbz	r0, 8005d38 <_vfiprintf_r+0x18>
 8005d30:	6a03      	ldr	r3, [r0, #32]
 8005d32:	b90b      	cbnz	r3, 8005d38 <_vfiprintf_r+0x18>
 8005d34:	f7ff fcc2 	bl	80056bc <__sinit>
 8005d38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d3a:	07d9      	lsls	r1, r3, #31
 8005d3c:	d405      	bmi.n	8005d4a <_vfiprintf_r+0x2a>
 8005d3e:	89ab      	ldrh	r3, [r5, #12]
 8005d40:	059a      	lsls	r2, r3, #22
 8005d42:	d402      	bmi.n	8005d4a <_vfiprintf_r+0x2a>
 8005d44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d46:	f7ff feb8 	bl	8005aba <__retarget_lock_acquire_recursive>
 8005d4a:	89ab      	ldrh	r3, [r5, #12]
 8005d4c:	071b      	lsls	r3, r3, #28
 8005d4e:	d501      	bpl.n	8005d54 <_vfiprintf_r+0x34>
 8005d50:	692b      	ldr	r3, [r5, #16]
 8005d52:	b99b      	cbnz	r3, 8005d7c <_vfiprintf_r+0x5c>
 8005d54:	4629      	mov	r1, r5
 8005d56:	4630      	mov	r0, r6
 8005d58:	f7ff fde0 	bl	800591c <__swsetup_r>
 8005d5c:	b170      	cbz	r0, 8005d7c <_vfiprintf_r+0x5c>
 8005d5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d60:	07dc      	lsls	r4, r3, #31
 8005d62:	d504      	bpl.n	8005d6e <_vfiprintf_r+0x4e>
 8005d64:	f04f 30ff 	mov.w	r0, #4294967295
 8005d68:	b01d      	add	sp, #116	@ 0x74
 8005d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d6e:	89ab      	ldrh	r3, [r5, #12]
 8005d70:	0598      	lsls	r0, r3, #22
 8005d72:	d4f7      	bmi.n	8005d64 <_vfiprintf_r+0x44>
 8005d74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d76:	f7ff fea1 	bl	8005abc <__retarget_lock_release_recursive>
 8005d7a:	e7f3      	b.n	8005d64 <_vfiprintf_r+0x44>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d80:	2320      	movs	r3, #32
 8005d82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d86:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d8a:	2330      	movs	r3, #48	@ 0x30
 8005d8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005f3c <_vfiprintf_r+0x21c>
 8005d90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d94:	f04f 0901 	mov.w	r9, #1
 8005d98:	4623      	mov	r3, r4
 8005d9a:	469a      	mov	sl, r3
 8005d9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005da0:	b10a      	cbz	r2, 8005da6 <_vfiprintf_r+0x86>
 8005da2:	2a25      	cmp	r2, #37	@ 0x25
 8005da4:	d1f9      	bne.n	8005d9a <_vfiprintf_r+0x7a>
 8005da6:	ebba 0b04 	subs.w	fp, sl, r4
 8005daa:	d00b      	beq.n	8005dc4 <_vfiprintf_r+0xa4>
 8005dac:	465b      	mov	r3, fp
 8005dae:	4622      	mov	r2, r4
 8005db0:	4629      	mov	r1, r5
 8005db2:	4630      	mov	r0, r6
 8005db4:	f7ff ffa1 	bl	8005cfa <__sfputs_r>
 8005db8:	3001      	adds	r0, #1
 8005dba:	f000 80a7 	beq.w	8005f0c <_vfiprintf_r+0x1ec>
 8005dbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005dc0:	445a      	add	r2, fp
 8005dc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8005dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 809f 	beq.w	8005f0c <_vfiprintf_r+0x1ec>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dd8:	f10a 0a01 	add.w	sl, sl, #1
 8005ddc:	9304      	str	r3, [sp, #16]
 8005dde:	9307      	str	r3, [sp, #28]
 8005de0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005de4:	931a      	str	r3, [sp, #104]	@ 0x68
 8005de6:	4654      	mov	r4, sl
 8005de8:	2205      	movs	r2, #5
 8005dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dee:	4853      	ldr	r0, [pc, #332]	@ (8005f3c <_vfiprintf_r+0x21c>)
 8005df0:	f7fa f9ee 	bl	80001d0 <memchr>
 8005df4:	9a04      	ldr	r2, [sp, #16]
 8005df6:	b9d8      	cbnz	r0, 8005e30 <_vfiprintf_r+0x110>
 8005df8:	06d1      	lsls	r1, r2, #27
 8005dfa:	bf44      	itt	mi
 8005dfc:	2320      	movmi	r3, #32
 8005dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e02:	0713      	lsls	r3, r2, #28
 8005e04:	bf44      	itt	mi
 8005e06:	232b      	movmi	r3, #43	@ 0x2b
 8005e08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e0c:	f89a 3000 	ldrb.w	r3, [sl]
 8005e10:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e12:	d015      	beq.n	8005e40 <_vfiprintf_r+0x120>
 8005e14:	9a07      	ldr	r2, [sp, #28]
 8005e16:	4654      	mov	r4, sl
 8005e18:	2000      	movs	r0, #0
 8005e1a:	f04f 0c0a 	mov.w	ip, #10
 8005e1e:	4621      	mov	r1, r4
 8005e20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e24:	3b30      	subs	r3, #48	@ 0x30
 8005e26:	2b09      	cmp	r3, #9
 8005e28:	d94b      	bls.n	8005ec2 <_vfiprintf_r+0x1a2>
 8005e2a:	b1b0      	cbz	r0, 8005e5a <_vfiprintf_r+0x13a>
 8005e2c:	9207      	str	r2, [sp, #28]
 8005e2e:	e014      	b.n	8005e5a <_vfiprintf_r+0x13a>
 8005e30:	eba0 0308 	sub.w	r3, r0, r8
 8005e34:	fa09 f303 	lsl.w	r3, r9, r3
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	9304      	str	r3, [sp, #16]
 8005e3c:	46a2      	mov	sl, r4
 8005e3e:	e7d2      	b.n	8005de6 <_vfiprintf_r+0xc6>
 8005e40:	9b03      	ldr	r3, [sp, #12]
 8005e42:	1d19      	adds	r1, r3, #4
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	9103      	str	r1, [sp, #12]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	bfbb      	ittet	lt
 8005e4c:	425b      	neglt	r3, r3
 8005e4e:	f042 0202 	orrlt.w	r2, r2, #2
 8005e52:	9307      	strge	r3, [sp, #28]
 8005e54:	9307      	strlt	r3, [sp, #28]
 8005e56:	bfb8      	it	lt
 8005e58:	9204      	strlt	r2, [sp, #16]
 8005e5a:	7823      	ldrb	r3, [r4, #0]
 8005e5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e5e:	d10a      	bne.n	8005e76 <_vfiprintf_r+0x156>
 8005e60:	7863      	ldrb	r3, [r4, #1]
 8005e62:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e64:	d132      	bne.n	8005ecc <_vfiprintf_r+0x1ac>
 8005e66:	9b03      	ldr	r3, [sp, #12]
 8005e68:	1d1a      	adds	r2, r3, #4
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	9203      	str	r2, [sp, #12]
 8005e6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e72:	3402      	adds	r4, #2
 8005e74:	9305      	str	r3, [sp, #20]
 8005e76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005f4c <_vfiprintf_r+0x22c>
 8005e7a:	7821      	ldrb	r1, [r4, #0]
 8005e7c:	2203      	movs	r2, #3
 8005e7e:	4650      	mov	r0, sl
 8005e80:	f7fa f9a6 	bl	80001d0 <memchr>
 8005e84:	b138      	cbz	r0, 8005e96 <_vfiprintf_r+0x176>
 8005e86:	9b04      	ldr	r3, [sp, #16]
 8005e88:	eba0 000a 	sub.w	r0, r0, sl
 8005e8c:	2240      	movs	r2, #64	@ 0x40
 8005e8e:	4082      	lsls	r2, r0
 8005e90:	4313      	orrs	r3, r2
 8005e92:	3401      	adds	r4, #1
 8005e94:	9304      	str	r3, [sp, #16]
 8005e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e9a:	4829      	ldr	r0, [pc, #164]	@ (8005f40 <_vfiprintf_r+0x220>)
 8005e9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ea0:	2206      	movs	r2, #6
 8005ea2:	f7fa f995 	bl	80001d0 <memchr>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d03f      	beq.n	8005f2a <_vfiprintf_r+0x20a>
 8005eaa:	4b26      	ldr	r3, [pc, #152]	@ (8005f44 <_vfiprintf_r+0x224>)
 8005eac:	bb1b      	cbnz	r3, 8005ef6 <_vfiprintf_r+0x1d6>
 8005eae:	9b03      	ldr	r3, [sp, #12]
 8005eb0:	3307      	adds	r3, #7
 8005eb2:	f023 0307 	bic.w	r3, r3, #7
 8005eb6:	3308      	adds	r3, #8
 8005eb8:	9303      	str	r3, [sp, #12]
 8005eba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ebc:	443b      	add	r3, r7
 8005ebe:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ec0:	e76a      	b.n	8005d98 <_vfiprintf_r+0x78>
 8005ec2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ec6:	460c      	mov	r4, r1
 8005ec8:	2001      	movs	r0, #1
 8005eca:	e7a8      	b.n	8005e1e <_vfiprintf_r+0xfe>
 8005ecc:	2300      	movs	r3, #0
 8005ece:	3401      	adds	r4, #1
 8005ed0:	9305      	str	r3, [sp, #20]
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	f04f 0c0a 	mov.w	ip, #10
 8005ed8:	4620      	mov	r0, r4
 8005eda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ede:	3a30      	subs	r2, #48	@ 0x30
 8005ee0:	2a09      	cmp	r2, #9
 8005ee2:	d903      	bls.n	8005eec <_vfiprintf_r+0x1cc>
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d0c6      	beq.n	8005e76 <_vfiprintf_r+0x156>
 8005ee8:	9105      	str	r1, [sp, #20]
 8005eea:	e7c4      	b.n	8005e76 <_vfiprintf_r+0x156>
 8005eec:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ef0:	4604      	mov	r4, r0
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e7f0      	b.n	8005ed8 <_vfiprintf_r+0x1b8>
 8005ef6:	ab03      	add	r3, sp, #12
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	462a      	mov	r2, r5
 8005efc:	4b12      	ldr	r3, [pc, #72]	@ (8005f48 <_vfiprintf_r+0x228>)
 8005efe:	a904      	add	r1, sp, #16
 8005f00:	4630      	mov	r0, r6
 8005f02:	f3af 8000 	nop.w
 8005f06:	4607      	mov	r7, r0
 8005f08:	1c78      	adds	r0, r7, #1
 8005f0a:	d1d6      	bne.n	8005eba <_vfiprintf_r+0x19a>
 8005f0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f0e:	07d9      	lsls	r1, r3, #31
 8005f10:	d405      	bmi.n	8005f1e <_vfiprintf_r+0x1fe>
 8005f12:	89ab      	ldrh	r3, [r5, #12]
 8005f14:	059a      	lsls	r2, r3, #22
 8005f16:	d402      	bmi.n	8005f1e <_vfiprintf_r+0x1fe>
 8005f18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f1a:	f7ff fdcf 	bl	8005abc <__retarget_lock_release_recursive>
 8005f1e:	89ab      	ldrh	r3, [r5, #12]
 8005f20:	065b      	lsls	r3, r3, #25
 8005f22:	f53f af1f 	bmi.w	8005d64 <_vfiprintf_r+0x44>
 8005f26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f28:	e71e      	b.n	8005d68 <_vfiprintf_r+0x48>
 8005f2a:	ab03      	add	r3, sp, #12
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	462a      	mov	r2, r5
 8005f30:	4b05      	ldr	r3, [pc, #20]	@ (8005f48 <_vfiprintf_r+0x228>)
 8005f32:	a904      	add	r1, sp, #16
 8005f34:	4630      	mov	r0, r6
 8005f36:	f000 f879 	bl	800602c <_printf_i>
 8005f3a:	e7e4      	b.n	8005f06 <_vfiprintf_r+0x1e6>
 8005f3c:	0801bdf4 	.word	0x0801bdf4
 8005f40:	0801bdfe 	.word	0x0801bdfe
 8005f44:	00000000 	.word	0x00000000
 8005f48:	08005cfb 	.word	0x08005cfb
 8005f4c:	0801bdfa 	.word	0x0801bdfa

08005f50 <_printf_common>:
 8005f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f54:	4616      	mov	r6, r2
 8005f56:	4698      	mov	r8, r3
 8005f58:	688a      	ldr	r2, [r1, #8]
 8005f5a:	690b      	ldr	r3, [r1, #16]
 8005f5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f60:	4293      	cmp	r3, r2
 8005f62:	bfb8      	it	lt
 8005f64:	4613      	movlt	r3, r2
 8005f66:	6033      	str	r3, [r6, #0]
 8005f68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f6c:	4607      	mov	r7, r0
 8005f6e:	460c      	mov	r4, r1
 8005f70:	b10a      	cbz	r2, 8005f76 <_printf_common+0x26>
 8005f72:	3301      	adds	r3, #1
 8005f74:	6033      	str	r3, [r6, #0]
 8005f76:	6823      	ldr	r3, [r4, #0]
 8005f78:	0699      	lsls	r1, r3, #26
 8005f7a:	bf42      	ittt	mi
 8005f7c:	6833      	ldrmi	r3, [r6, #0]
 8005f7e:	3302      	addmi	r3, #2
 8005f80:	6033      	strmi	r3, [r6, #0]
 8005f82:	6825      	ldr	r5, [r4, #0]
 8005f84:	f015 0506 	ands.w	r5, r5, #6
 8005f88:	d106      	bne.n	8005f98 <_printf_common+0x48>
 8005f8a:	f104 0a19 	add.w	sl, r4, #25
 8005f8e:	68e3      	ldr	r3, [r4, #12]
 8005f90:	6832      	ldr	r2, [r6, #0]
 8005f92:	1a9b      	subs	r3, r3, r2
 8005f94:	42ab      	cmp	r3, r5
 8005f96:	dc26      	bgt.n	8005fe6 <_printf_common+0x96>
 8005f98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f9c:	6822      	ldr	r2, [r4, #0]
 8005f9e:	3b00      	subs	r3, #0
 8005fa0:	bf18      	it	ne
 8005fa2:	2301      	movne	r3, #1
 8005fa4:	0692      	lsls	r2, r2, #26
 8005fa6:	d42b      	bmi.n	8006000 <_printf_common+0xb0>
 8005fa8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005fac:	4641      	mov	r1, r8
 8005fae:	4638      	mov	r0, r7
 8005fb0:	47c8      	blx	r9
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	d01e      	beq.n	8005ff4 <_printf_common+0xa4>
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	6922      	ldr	r2, [r4, #16]
 8005fba:	f003 0306 	and.w	r3, r3, #6
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	bf02      	ittt	eq
 8005fc2:	68e5      	ldreq	r5, [r4, #12]
 8005fc4:	6833      	ldreq	r3, [r6, #0]
 8005fc6:	1aed      	subeq	r5, r5, r3
 8005fc8:	68a3      	ldr	r3, [r4, #8]
 8005fca:	bf0c      	ite	eq
 8005fcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fd0:	2500      	movne	r5, #0
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	bfc4      	itt	gt
 8005fd6:	1a9b      	subgt	r3, r3, r2
 8005fd8:	18ed      	addgt	r5, r5, r3
 8005fda:	2600      	movs	r6, #0
 8005fdc:	341a      	adds	r4, #26
 8005fde:	42b5      	cmp	r5, r6
 8005fe0:	d11a      	bne.n	8006018 <_printf_common+0xc8>
 8005fe2:	2000      	movs	r0, #0
 8005fe4:	e008      	b.n	8005ff8 <_printf_common+0xa8>
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	4652      	mov	r2, sl
 8005fea:	4641      	mov	r1, r8
 8005fec:	4638      	mov	r0, r7
 8005fee:	47c8      	blx	r9
 8005ff0:	3001      	adds	r0, #1
 8005ff2:	d103      	bne.n	8005ffc <_printf_common+0xac>
 8005ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ffc:	3501      	adds	r5, #1
 8005ffe:	e7c6      	b.n	8005f8e <_printf_common+0x3e>
 8006000:	18e1      	adds	r1, r4, r3
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	2030      	movs	r0, #48	@ 0x30
 8006006:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800600a:	4422      	add	r2, r4
 800600c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006010:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006014:	3302      	adds	r3, #2
 8006016:	e7c7      	b.n	8005fa8 <_printf_common+0x58>
 8006018:	2301      	movs	r3, #1
 800601a:	4622      	mov	r2, r4
 800601c:	4641      	mov	r1, r8
 800601e:	4638      	mov	r0, r7
 8006020:	47c8      	blx	r9
 8006022:	3001      	adds	r0, #1
 8006024:	d0e6      	beq.n	8005ff4 <_printf_common+0xa4>
 8006026:	3601      	adds	r6, #1
 8006028:	e7d9      	b.n	8005fde <_printf_common+0x8e>
	...

0800602c <_printf_i>:
 800602c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006030:	7e0f      	ldrb	r7, [r1, #24]
 8006032:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006034:	2f78      	cmp	r7, #120	@ 0x78
 8006036:	4691      	mov	r9, r2
 8006038:	4680      	mov	r8, r0
 800603a:	460c      	mov	r4, r1
 800603c:	469a      	mov	sl, r3
 800603e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006042:	d807      	bhi.n	8006054 <_printf_i+0x28>
 8006044:	2f62      	cmp	r7, #98	@ 0x62
 8006046:	d80a      	bhi.n	800605e <_printf_i+0x32>
 8006048:	2f00      	cmp	r7, #0
 800604a:	f000 80d2 	beq.w	80061f2 <_printf_i+0x1c6>
 800604e:	2f58      	cmp	r7, #88	@ 0x58
 8006050:	f000 80b9 	beq.w	80061c6 <_printf_i+0x19a>
 8006054:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006058:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800605c:	e03a      	b.n	80060d4 <_printf_i+0xa8>
 800605e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006062:	2b15      	cmp	r3, #21
 8006064:	d8f6      	bhi.n	8006054 <_printf_i+0x28>
 8006066:	a101      	add	r1, pc, #4	@ (adr r1, 800606c <_printf_i+0x40>)
 8006068:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800606c:	080060c5 	.word	0x080060c5
 8006070:	080060d9 	.word	0x080060d9
 8006074:	08006055 	.word	0x08006055
 8006078:	08006055 	.word	0x08006055
 800607c:	08006055 	.word	0x08006055
 8006080:	08006055 	.word	0x08006055
 8006084:	080060d9 	.word	0x080060d9
 8006088:	08006055 	.word	0x08006055
 800608c:	08006055 	.word	0x08006055
 8006090:	08006055 	.word	0x08006055
 8006094:	08006055 	.word	0x08006055
 8006098:	080061d9 	.word	0x080061d9
 800609c:	08006103 	.word	0x08006103
 80060a0:	08006193 	.word	0x08006193
 80060a4:	08006055 	.word	0x08006055
 80060a8:	08006055 	.word	0x08006055
 80060ac:	080061fb 	.word	0x080061fb
 80060b0:	08006055 	.word	0x08006055
 80060b4:	08006103 	.word	0x08006103
 80060b8:	08006055 	.word	0x08006055
 80060bc:	08006055 	.word	0x08006055
 80060c0:	0800619b 	.word	0x0800619b
 80060c4:	6833      	ldr	r3, [r6, #0]
 80060c6:	1d1a      	adds	r2, r3, #4
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6032      	str	r2, [r6, #0]
 80060cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80060d4:	2301      	movs	r3, #1
 80060d6:	e09d      	b.n	8006214 <_printf_i+0x1e8>
 80060d8:	6833      	ldr	r3, [r6, #0]
 80060da:	6820      	ldr	r0, [r4, #0]
 80060dc:	1d19      	adds	r1, r3, #4
 80060de:	6031      	str	r1, [r6, #0]
 80060e0:	0606      	lsls	r6, r0, #24
 80060e2:	d501      	bpl.n	80060e8 <_printf_i+0xbc>
 80060e4:	681d      	ldr	r5, [r3, #0]
 80060e6:	e003      	b.n	80060f0 <_printf_i+0xc4>
 80060e8:	0645      	lsls	r5, r0, #25
 80060ea:	d5fb      	bpl.n	80060e4 <_printf_i+0xb8>
 80060ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80060f0:	2d00      	cmp	r5, #0
 80060f2:	da03      	bge.n	80060fc <_printf_i+0xd0>
 80060f4:	232d      	movs	r3, #45	@ 0x2d
 80060f6:	426d      	negs	r5, r5
 80060f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060fc:	4859      	ldr	r0, [pc, #356]	@ (8006264 <_printf_i+0x238>)
 80060fe:	230a      	movs	r3, #10
 8006100:	e011      	b.n	8006126 <_printf_i+0xfa>
 8006102:	6821      	ldr	r1, [r4, #0]
 8006104:	6833      	ldr	r3, [r6, #0]
 8006106:	0608      	lsls	r0, r1, #24
 8006108:	f853 5b04 	ldr.w	r5, [r3], #4
 800610c:	d402      	bmi.n	8006114 <_printf_i+0xe8>
 800610e:	0649      	lsls	r1, r1, #25
 8006110:	bf48      	it	mi
 8006112:	b2ad      	uxthmi	r5, r5
 8006114:	2f6f      	cmp	r7, #111	@ 0x6f
 8006116:	4853      	ldr	r0, [pc, #332]	@ (8006264 <_printf_i+0x238>)
 8006118:	6033      	str	r3, [r6, #0]
 800611a:	bf14      	ite	ne
 800611c:	230a      	movne	r3, #10
 800611e:	2308      	moveq	r3, #8
 8006120:	2100      	movs	r1, #0
 8006122:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006126:	6866      	ldr	r6, [r4, #4]
 8006128:	60a6      	str	r6, [r4, #8]
 800612a:	2e00      	cmp	r6, #0
 800612c:	bfa2      	ittt	ge
 800612e:	6821      	ldrge	r1, [r4, #0]
 8006130:	f021 0104 	bicge.w	r1, r1, #4
 8006134:	6021      	strge	r1, [r4, #0]
 8006136:	b90d      	cbnz	r5, 800613c <_printf_i+0x110>
 8006138:	2e00      	cmp	r6, #0
 800613a:	d04b      	beq.n	80061d4 <_printf_i+0x1a8>
 800613c:	4616      	mov	r6, r2
 800613e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006142:	fb03 5711 	mls	r7, r3, r1, r5
 8006146:	5dc7      	ldrb	r7, [r0, r7]
 8006148:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800614c:	462f      	mov	r7, r5
 800614e:	42bb      	cmp	r3, r7
 8006150:	460d      	mov	r5, r1
 8006152:	d9f4      	bls.n	800613e <_printf_i+0x112>
 8006154:	2b08      	cmp	r3, #8
 8006156:	d10b      	bne.n	8006170 <_printf_i+0x144>
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	07df      	lsls	r7, r3, #31
 800615c:	d508      	bpl.n	8006170 <_printf_i+0x144>
 800615e:	6923      	ldr	r3, [r4, #16]
 8006160:	6861      	ldr	r1, [r4, #4]
 8006162:	4299      	cmp	r1, r3
 8006164:	bfde      	ittt	le
 8006166:	2330      	movle	r3, #48	@ 0x30
 8006168:	f806 3c01 	strble.w	r3, [r6, #-1]
 800616c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006170:	1b92      	subs	r2, r2, r6
 8006172:	6122      	str	r2, [r4, #16]
 8006174:	f8cd a000 	str.w	sl, [sp]
 8006178:	464b      	mov	r3, r9
 800617a:	aa03      	add	r2, sp, #12
 800617c:	4621      	mov	r1, r4
 800617e:	4640      	mov	r0, r8
 8006180:	f7ff fee6 	bl	8005f50 <_printf_common>
 8006184:	3001      	adds	r0, #1
 8006186:	d14a      	bne.n	800621e <_printf_i+0x1f2>
 8006188:	f04f 30ff 	mov.w	r0, #4294967295
 800618c:	b004      	add	sp, #16
 800618e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	f043 0320 	orr.w	r3, r3, #32
 8006198:	6023      	str	r3, [r4, #0]
 800619a:	4833      	ldr	r0, [pc, #204]	@ (8006268 <_printf_i+0x23c>)
 800619c:	2778      	movs	r7, #120	@ 0x78
 800619e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	6831      	ldr	r1, [r6, #0]
 80061a6:	061f      	lsls	r7, r3, #24
 80061a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80061ac:	d402      	bmi.n	80061b4 <_printf_i+0x188>
 80061ae:	065f      	lsls	r7, r3, #25
 80061b0:	bf48      	it	mi
 80061b2:	b2ad      	uxthmi	r5, r5
 80061b4:	6031      	str	r1, [r6, #0]
 80061b6:	07d9      	lsls	r1, r3, #31
 80061b8:	bf44      	itt	mi
 80061ba:	f043 0320 	orrmi.w	r3, r3, #32
 80061be:	6023      	strmi	r3, [r4, #0]
 80061c0:	b11d      	cbz	r5, 80061ca <_printf_i+0x19e>
 80061c2:	2310      	movs	r3, #16
 80061c4:	e7ac      	b.n	8006120 <_printf_i+0xf4>
 80061c6:	4827      	ldr	r0, [pc, #156]	@ (8006264 <_printf_i+0x238>)
 80061c8:	e7e9      	b.n	800619e <_printf_i+0x172>
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	f023 0320 	bic.w	r3, r3, #32
 80061d0:	6023      	str	r3, [r4, #0]
 80061d2:	e7f6      	b.n	80061c2 <_printf_i+0x196>
 80061d4:	4616      	mov	r6, r2
 80061d6:	e7bd      	b.n	8006154 <_printf_i+0x128>
 80061d8:	6833      	ldr	r3, [r6, #0]
 80061da:	6825      	ldr	r5, [r4, #0]
 80061dc:	6961      	ldr	r1, [r4, #20]
 80061de:	1d18      	adds	r0, r3, #4
 80061e0:	6030      	str	r0, [r6, #0]
 80061e2:	062e      	lsls	r6, r5, #24
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	d501      	bpl.n	80061ec <_printf_i+0x1c0>
 80061e8:	6019      	str	r1, [r3, #0]
 80061ea:	e002      	b.n	80061f2 <_printf_i+0x1c6>
 80061ec:	0668      	lsls	r0, r5, #25
 80061ee:	d5fb      	bpl.n	80061e8 <_printf_i+0x1bc>
 80061f0:	8019      	strh	r1, [r3, #0]
 80061f2:	2300      	movs	r3, #0
 80061f4:	6123      	str	r3, [r4, #16]
 80061f6:	4616      	mov	r6, r2
 80061f8:	e7bc      	b.n	8006174 <_printf_i+0x148>
 80061fa:	6833      	ldr	r3, [r6, #0]
 80061fc:	1d1a      	adds	r2, r3, #4
 80061fe:	6032      	str	r2, [r6, #0]
 8006200:	681e      	ldr	r6, [r3, #0]
 8006202:	6862      	ldr	r2, [r4, #4]
 8006204:	2100      	movs	r1, #0
 8006206:	4630      	mov	r0, r6
 8006208:	f7f9 ffe2 	bl	80001d0 <memchr>
 800620c:	b108      	cbz	r0, 8006212 <_printf_i+0x1e6>
 800620e:	1b80      	subs	r0, r0, r6
 8006210:	6060      	str	r0, [r4, #4]
 8006212:	6863      	ldr	r3, [r4, #4]
 8006214:	6123      	str	r3, [r4, #16]
 8006216:	2300      	movs	r3, #0
 8006218:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800621c:	e7aa      	b.n	8006174 <_printf_i+0x148>
 800621e:	6923      	ldr	r3, [r4, #16]
 8006220:	4632      	mov	r2, r6
 8006222:	4649      	mov	r1, r9
 8006224:	4640      	mov	r0, r8
 8006226:	47d0      	blx	sl
 8006228:	3001      	adds	r0, #1
 800622a:	d0ad      	beq.n	8006188 <_printf_i+0x15c>
 800622c:	6823      	ldr	r3, [r4, #0]
 800622e:	079b      	lsls	r3, r3, #30
 8006230:	d413      	bmi.n	800625a <_printf_i+0x22e>
 8006232:	68e0      	ldr	r0, [r4, #12]
 8006234:	9b03      	ldr	r3, [sp, #12]
 8006236:	4298      	cmp	r0, r3
 8006238:	bfb8      	it	lt
 800623a:	4618      	movlt	r0, r3
 800623c:	e7a6      	b.n	800618c <_printf_i+0x160>
 800623e:	2301      	movs	r3, #1
 8006240:	4632      	mov	r2, r6
 8006242:	4649      	mov	r1, r9
 8006244:	4640      	mov	r0, r8
 8006246:	47d0      	blx	sl
 8006248:	3001      	adds	r0, #1
 800624a:	d09d      	beq.n	8006188 <_printf_i+0x15c>
 800624c:	3501      	adds	r5, #1
 800624e:	68e3      	ldr	r3, [r4, #12]
 8006250:	9903      	ldr	r1, [sp, #12]
 8006252:	1a5b      	subs	r3, r3, r1
 8006254:	42ab      	cmp	r3, r5
 8006256:	dcf2      	bgt.n	800623e <_printf_i+0x212>
 8006258:	e7eb      	b.n	8006232 <_printf_i+0x206>
 800625a:	2500      	movs	r5, #0
 800625c:	f104 0619 	add.w	r6, r4, #25
 8006260:	e7f5      	b.n	800624e <_printf_i+0x222>
 8006262:	bf00      	nop
 8006264:	0801be05 	.word	0x0801be05
 8006268:	0801be16 	.word	0x0801be16

0800626c <__sflush_r>:
 800626c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006274:	0716      	lsls	r6, r2, #28
 8006276:	4605      	mov	r5, r0
 8006278:	460c      	mov	r4, r1
 800627a:	d454      	bmi.n	8006326 <__sflush_r+0xba>
 800627c:	684b      	ldr	r3, [r1, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	dc02      	bgt.n	8006288 <__sflush_r+0x1c>
 8006282:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006284:	2b00      	cmp	r3, #0
 8006286:	dd48      	ble.n	800631a <__sflush_r+0xae>
 8006288:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800628a:	2e00      	cmp	r6, #0
 800628c:	d045      	beq.n	800631a <__sflush_r+0xae>
 800628e:	2300      	movs	r3, #0
 8006290:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006294:	682f      	ldr	r7, [r5, #0]
 8006296:	6a21      	ldr	r1, [r4, #32]
 8006298:	602b      	str	r3, [r5, #0]
 800629a:	d030      	beq.n	80062fe <__sflush_r+0x92>
 800629c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800629e:	89a3      	ldrh	r3, [r4, #12]
 80062a0:	0759      	lsls	r1, r3, #29
 80062a2:	d505      	bpl.n	80062b0 <__sflush_r+0x44>
 80062a4:	6863      	ldr	r3, [r4, #4]
 80062a6:	1ad2      	subs	r2, r2, r3
 80062a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80062aa:	b10b      	cbz	r3, 80062b0 <__sflush_r+0x44>
 80062ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80062ae:	1ad2      	subs	r2, r2, r3
 80062b0:	2300      	movs	r3, #0
 80062b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062b4:	6a21      	ldr	r1, [r4, #32]
 80062b6:	4628      	mov	r0, r5
 80062b8:	47b0      	blx	r6
 80062ba:	1c43      	adds	r3, r0, #1
 80062bc:	89a3      	ldrh	r3, [r4, #12]
 80062be:	d106      	bne.n	80062ce <__sflush_r+0x62>
 80062c0:	6829      	ldr	r1, [r5, #0]
 80062c2:	291d      	cmp	r1, #29
 80062c4:	d82b      	bhi.n	800631e <__sflush_r+0xb2>
 80062c6:	4a2a      	ldr	r2, [pc, #168]	@ (8006370 <__sflush_r+0x104>)
 80062c8:	410a      	asrs	r2, r1
 80062ca:	07d6      	lsls	r6, r2, #31
 80062cc:	d427      	bmi.n	800631e <__sflush_r+0xb2>
 80062ce:	2200      	movs	r2, #0
 80062d0:	6062      	str	r2, [r4, #4]
 80062d2:	04d9      	lsls	r1, r3, #19
 80062d4:	6922      	ldr	r2, [r4, #16]
 80062d6:	6022      	str	r2, [r4, #0]
 80062d8:	d504      	bpl.n	80062e4 <__sflush_r+0x78>
 80062da:	1c42      	adds	r2, r0, #1
 80062dc:	d101      	bne.n	80062e2 <__sflush_r+0x76>
 80062de:	682b      	ldr	r3, [r5, #0]
 80062e0:	b903      	cbnz	r3, 80062e4 <__sflush_r+0x78>
 80062e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80062e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062e6:	602f      	str	r7, [r5, #0]
 80062e8:	b1b9      	cbz	r1, 800631a <__sflush_r+0xae>
 80062ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062ee:	4299      	cmp	r1, r3
 80062f0:	d002      	beq.n	80062f8 <__sflush_r+0x8c>
 80062f2:	4628      	mov	r0, r5
 80062f4:	f7ff fbf2 	bl	8005adc <_free_r>
 80062f8:	2300      	movs	r3, #0
 80062fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80062fc:	e00d      	b.n	800631a <__sflush_r+0xae>
 80062fe:	2301      	movs	r3, #1
 8006300:	4628      	mov	r0, r5
 8006302:	47b0      	blx	r6
 8006304:	4602      	mov	r2, r0
 8006306:	1c50      	adds	r0, r2, #1
 8006308:	d1c9      	bne.n	800629e <__sflush_r+0x32>
 800630a:	682b      	ldr	r3, [r5, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d0c6      	beq.n	800629e <__sflush_r+0x32>
 8006310:	2b1d      	cmp	r3, #29
 8006312:	d001      	beq.n	8006318 <__sflush_r+0xac>
 8006314:	2b16      	cmp	r3, #22
 8006316:	d11e      	bne.n	8006356 <__sflush_r+0xea>
 8006318:	602f      	str	r7, [r5, #0]
 800631a:	2000      	movs	r0, #0
 800631c:	e022      	b.n	8006364 <__sflush_r+0xf8>
 800631e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006322:	b21b      	sxth	r3, r3
 8006324:	e01b      	b.n	800635e <__sflush_r+0xf2>
 8006326:	690f      	ldr	r7, [r1, #16]
 8006328:	2f00      	cmp	r7, #0
 800632a:	d0f6      	beq.n	800631a <__sflush_r+0xae>
 800632c:	0793      	lsls	r3, r2, #30
 800632e:	680e      	ldr	r6, [r1, #0]
 8006330:	bf08      	it	eq
 8006332:	694b      	ldreq	r3, [r1, #20]
 8006334:	600f      	str	r7, [r1, #0]
 8006336:	bf18      	it	ne
 8006338:	2300      	movne	r3, #0
 800633a:	eba6 0807 	sub.w	r8, r6, r7
 800633e:	608b      	str	r3, [r1, #8]
 8006340:	f1b8 0f00 	cmp.w	r8, #0
 8006344:	dde9      	ble.n	800631a <__sflush_r+0xae>
 8006346:	6a21      	ldr	r1, [r4, #32]
 8006348:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800634a:	4643      	mov	r3, r8
 800634c:	463a      	mov	r2, r7
 800634e:	4628      	mov	r0, r5
 8006350:	47b0      	blx	r6
 8006352:	2800      	cmp	r0, #0
 8006354:	dc08      	bgt.n	8006368 <__sflush_r+0xfc>
 8006356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800635a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800635e:	81a3      	strh	r3, [r4, #12]
 8006360:	f04f 30ff 	mov.w	r0, #4294967295
 8006364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006368:	4407      	add	r7, r0
 800636a:	eba8 0800 	sub.w	r8, r8, r0
 800636e:	e7e7      	b.n	8006340 <__sflush_r+0xd4>
 8006370:	dfbffffe 	.word	0xdfbffffe

08006374 <_fflush_r>:
 8006374:	b538      	push	{r3, r4, r5, lr}
 8006376:	690b      	ldr	r3, [r1, #16]
 8006378:	4605      	mov	r5, r0
 800637a:	460c      	mov	r4, r1
 800637c:	b913      	cbnz	r3, 8006384 <_fflush_r+0x10>
 800637e:	2500      	movs	r5, #0
 8006380:	4628      	mov	r0, r5
 8006382:	bd38      	pop	{r3, r4, r5, pc}
 8006384:	b118      	cbz	r0, 800638e <_fflush_r+0x1a>
 8006386:	6a03      	ldr	r3, [r0, #32]
 8006388:	b90b      	cbnz	r3, 800638e <_fflush_r+0x1a>
 800638a:	f7ff f997 	bl	80056bc <__sinit>
 800638e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0f3      	beq.n	800637e <_fflush_r+0xa>
 8006396:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006398:	07d0      	lsls	r0, r2, #31
 800639a:	d404      	bmi.n	80063a6 <_fflush_r+0x32>
 800639c:	0599      	lsls	r1, r3, #22
 800639e:	d402      	bmi.n	80063a6 <_fflush_r+0x32>
 80063a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063a2:	f7ff fb8a 	bl	8005aba <__retarget_lock_acquire_recursive>
 80063a6:	4628      	mov	r0, r5
 80063a8:	4621      	mov	r1, r4
 80063aa:	f7ff ff5f 	bl	800626c <__sflush_r>
 80063ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063b0:	07da      	lsls	r2, r3, #31
 80063b2:	4605      	mov	r5, r0
 80063b4:	d4e4      	bmi.n	8006380 <_fflush_r+0xc>
 80063b6:	89a3      	ldrh	r3, [r4, #12]
 80063b8:	059b      	lsls	r3, r3, #22
 80063ba:	d4e1      	bmi.n	8006380 <_fflush_r+0xc>
 80063bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063be:	f7ff fb7d 	bl	8005abc <__retarget_lock_release_recursive>
 80063c2:	e7dd      	b.n	8006380 <_fflush_r+0xc>

080063c4 <__swhatbuf_r>:
 80063c4:	b570      	push	{r4, r5, r6, lr}
 80063c6:	460c      	mov	r4, r1
 80063c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063cc:	2900      	cmp	r1, #0
 80063ce:	b096      	sub	sp, #88	@ 0x58
 80063d0:	4615      	mov	r5, r2
 80063d2:	461e      	mov	r6, r3
 80063d4:	da0d      	bge.n	80063f2 <__swhatbuf_r+0x2e>
 80063d6:	89a3      	ldrh	r3, [r4, #12]
 80063d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80063dc:	f04f 0100 	mov.w	r1, #0
 80063e0:	bf14      	ite	ne
 80063e2:	2340      	movne	r3, #64	@ 0x40
 80063e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80063e8:	2000      	movs	r0, #0
 80063ea:	6031      	str	r1, [r6, #0]
 80063ec:	602b      	str	r3, [r5, #0]
 80063ee:	b016      	add	sp, #88	@ 0x58
 80063f0:	bd70      	pop	{r4, r5, r6, pc}
 80063f2:	466a      	mov	r2, sp
 80063f4:	f000 f87c 	bl	80064f0 <_fstat_r>
 80063f8:	2800      	cmp	r0, #0
 80063fa:	dbec      	blt.n	80063d6 <__swhatbuf_r+0x12>
 80063fc:	9901      	ldr	r1, [sp, #4]
 80063fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006402:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006406:	4259      	negs	r1, r3
 8006408:	4159      	adcs	r1, r3
 800640a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800640e:	e7eb      	b.n	80063e8 <__swhatbuf_r+0x24>

08006410 <__smakebuf_r>:
 8006410:	898b      	ldrh	r3, [r1, #12]
 8006412:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006414:	079d      	lsls	r5, r3, #30
 8006416:	4606      	mov	r6, r0
 8006418:	460c      	mov	r4, r1
 800641a:	d507      	bpl.n	800642c <__smakebuf_r+0x1c>
 800641c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006420:	6023      	str	r3, [r4, #0]
 8006422:	6123      	str	r3, [r4, #16]
 8006424:	2301      	movs	r3, #1
 8006426:	6163      	str	r3, [r4, #20]
 8006428:	b003      	add	sp, #12
 800642a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800642c:	ab01      	add	r3, sp, #4
 800642e:	466a      	mov	r2, sp
 8006430:	f7ff ffc8 	bl	80063c4 <__swhatbuf_r>
 8006434:	9f00      	ldr	r7, [sp, #0]
 8006436:	4605      	mov	r5, r0
 8006438:	4639      	mov	r1, r7
 800643a:	4630      	mov	r0, r6
 800643c:	f7ff fbba 	bl	8005bb4 <_malloc_r>
 8006440:	b948      	cbnz	r0, 8006456 <__smakebuf_r+0x46>
 8006442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006446:	059a      	lsls	r2, r3, #22
 8006448:	d4ee      	bmi.n	8006428 <__smakebuf_r+0x18>
 800644a:	f023 0303 	bic.w	r3, r3, #3
 800644e:	f043 0302 	orr.w	r3, r3, #2
 8006452:	81a3      	strh	r3, [r4, #12]
 8006454:	e7e2      	b.n	800641c <__smakebuf_r+0xc>
 8006456:	89a3      	ldrh	r3, [r4, #12]
 8006458:	6020      	str	r0, [r4, #0]
 800645a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800645e:	81a3      	strh	r3, [r4, #12]
 8006460:	9b01      	ldr	r3, [sp, #4]
 8006462:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006466:	b15b      	cbz	r3, 8006480 <__smakebuf_r+0x70>
 8006468:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800646c:	4630      	mov	r0, r6
 800646e:	f000 f851 	bl	8006514 <_isatty_r>
 8006472:	b128      	cbz	r0, 8006480 <__smakebuf_r+0x70>
 8006474:	89a3      	ldrh	r3, [r4, #12]
 8006476:	f023 0303 	bic.w	r3, r3, #3
 800647a:	f043 0301 	orr.w	r3, r3, #1
 800647e:	81a3      	strh	r3, [r4, #12]
 8006480:	89a3      	ldrh	r3, [r4, #12]
 8006482:	431d      	orrs	r5, r3
 8006484:	81a5      	strh	r5, [r4, #12]
 8006486:	e7cf      	b.n	8006428 <__smakebuf_r+0x18>

08006488 <_putc_r>:
 8006488:	b570      	push	{r4, r5, r6, lr}
 800648a:	460d      	mov	r5, r1
 800648c:	4614      	mov	r4, r2
 800648e:	4606      	mov	r6, r0
 8006490:	b118      	cbz	r0, 800649a <_putc_r+0x12>
 8006492:	6a03      	ldr	r3, [r0, #32]
 8006494:	b90b      	cbnz	r3, 800649a <_putc_r+0x12>
 8006496:	f7ff f911 	bl	80056bc <__sinit>
 800649a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800649c:	07d8      	lsls	r0, r3, #31
 800649e:	d405      	bmi.n	80064ac <_putc_r+0x24>
 80064a0:	89a3      	ldrh	r3, [r4, #12]
 80064a2:	0599      	lsls	r1, r3, #22
 80064a4:	d402      	bmi.n	80064ac <_putc_r+0x24>
 80064a6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064a8:	f7ff fb07 	bl	8005aba <__retarget_lock_acquire_recursive>
 80064ac:	68a3      	ldr	r3, [r4, #8]
 80064ae:	3b01      	subs	r3, #1
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	60a3      	str	r3, [r4, #8]
 80064b4:	da05      	bge.n	80064c2 <_putc_r+0x3a>
 80064b6:	69a2      	ldr	r2, [r4, #24]
 80064b8:	4293      	cmp	r3, r2
 80064ba:	db12      	blt.n	80064e2 <_putc_r+0x5a>
 80064bc:	b2eb      	uxtb	r3, r5
 80064be:	2b0a      	cmp	r3, #10
 80064c0:	d00f      	beq.n	80064e2 <_putc_r+0x5a>
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	1c5a      	adds	r2, r3, #1
 80064c6:	6022      	str	r2, [r4, #0]
 80064c8:	701d      	strb	r5, [r3, #0]
 80064ca:	b2ed      	uxtb	r5, r5
 80064cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80064ce:	07da      	lsls	r2, r3, #31
 80064d0:	d405      	bmi.n	80064de <_putc_r+0x56>
 80064d2:	89a3      	ldrh	r3, [r4, #12]
 80064d4:	059b      	lsls	r3, r3, #22
 80064d6:	d402      	bmi.n	80064de <_putc_r+0x56>
 80064d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064da:	f7ff faef 	bl	8005abc <__retarget_lock_release_recursive>
 80064de:	4628      	mov	r0, r5
 80064e0:	bd70      	pop	{r4, r5, r6, pc}
 80064e2:	4629      	mov	r1, r5
 80064e4:	4622      	mov	r2, r4
 80064e6:	4630      	mov	r0, r6
 80064e8:	f7ff f9d9 	bl	800589e <__swbuf_r>
 80064ec:	4605      	mov	r5, r0
 80064ee:	e7ed      	b.n	80064cc <_putc_r+0x44>

080064f0 <_fstat_r>:
 80064f0:	b538      	push	{r3, r4, r5, lr}
 80064f2:	4d07      	ldr	r5, [pc, #28]	@ (8006510 <_fstat_r+0x20>)
 80064f4:	2300      	movs	r3, #0
 80064f6:	4604      	mov	r4, r0
 80064f8:	4608      	mov	r0, r1
 80064fa:	4611      	mov	r1, r2
 80064fc:	602b      	str	r3, [r5, #0]
 80064fe:	f7fa fc21 	bl	8000d44 <_fstat>
 8006502:	1c43      	adds	r3, r0, #1
 8006504:	d102      	bne.n	800650c <_fstat_r+0x1c>
 8006506:	682b      	ldr	r3, [r5, #0]
 8006508:	b103      	cbz	r3, 800650c <_fstat_r+0x1c>
 800650a:	6023      	str	r3, [r4, #0]
 800650c:	bd38      	pop	{r3, r4, r5, pc}
 800650e:	bf00      	nop
 8006510:	20001270 	.word	0x20001270

08006514 <_isatty_r>:
 8006514:	b538      	push	{r3, r4, r5, lr}
 8006516:	4d06      	ldr	r5, [pc, #24]	@ (8006530 <_isatty_r+0x1c>)
 8006518:	2300      	movs	r3, #0
 800651a:	4604      	mov	r4, r0
 800651c:	4608      	mov	r0, r1
 800651e:	602b      	str	r3, [r5, #0]
 8006520:	f7fa fc20 	bl	8000d64 <_isatty>
 8006524:	1c43      	adds	r3, r0, #1
 8006526:	d102      	bne.n	800652e <_isatty_r+0x1a>
 8006528:	682b      	ldr	r3, [r5, #0]
 800652a:	b103      	cbz	r3, 800652e <_isatty_r+0x1a>
 800652c:	6023      	str	r3, [r4, #0]
 800652e:	bd38      	pop	{r3, r4, r5, pc}
 8006530:	20001270 	.word	0x20001270

08006534 <_sbrk_r>:
 8006534:	b538      	push	{r3, r4, r5, lr}
 8006536:	4d06      	ldr	r5, [pc, #24]	@ (8006550 <_sbrk_r+0x1c>)
 8006538:	2300      	movs	r3, #0
 800653a:	4604      	mov	r4, r0
 800653c:	4608      	mov	r0, r1
 800653e:	602b      	str	r3, [r5, #0]
 8006540:	f7fa fc28 	bl	8000d94 <_sbrk>
 8006544:	1c43      	adds	r3, r0, #1
 8006546:	d102      	bne.n	800654e <_sbrk_r+0x1a>
 8006548:	682b      	ldr	r3, [r5, #0]
 800654a:	b103      	cbz	r3, 800654e <_sbrk_r+0x1a>
 800654c:	6023      	str	r3, [r4, #0]
 800654e:	bd38      	pop	{r3, r4, r5, pc}
 8006550:	20001270 	.word	0x20001270

08006554 <_init>:
 8006554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006556:	bf00      	nop
 8006558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800655a:	bc08      	pop	{r3}
 800655c:	469e      	mov	lr, r3
 800655e:	4770      	bx	lr

08006560 <_fini>:
 8006560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006562:	bf00      	nop
 8006564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006566:	bc08      	pop	{r3}
 8006568:	469e      	mov	lr, r3
 800656a:	4770      	bx	lr
